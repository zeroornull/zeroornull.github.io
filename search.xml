<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用cloudflare免费加速github page</title>
      <link href="2021/07/26/%E4%BD%BF%E7%94%A8cloudflare%E5%8A%A0%E9%80%9FgithubPage/"/>
      <url>2021/07/26/%E4%BD%BF%E7%94%A8cloudflare%E5%8A%A0%E9%80%9FgithubPage/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  使用cloudflare免费加速github page</p><p>​        2021-07-26 14:00:16</p><span id="more"></span><h1 id="使用cloudflare免费加速github-page"><a href="#使用cloudflare免费加速github-page" class="headerlink" title="使用cloudflare免费加速github page"></a>使用cloudflare免费加速github page</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>github page 在国内访问速度非常慢，而且近期 github.io 的域名经常被干扰解析成<code>127.0.0.1</code>，迫于无奈在网上找到了一个能白嫖加速 github page 的办法，就是套一层 cloudflare CDN，虽然它在国内没有 CDN 节点，但是整体效果是完爆 github.io，不过要注意的是免费版本是有请求次数限制的，每天 10W 次，当然这足够我的小博客使用了，这里记录一下操作步骤。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h3><p>随便到哪买一个</p><p>国内好像得备案</p><h3 id="设置-github-page"><a href="#设置-github-page" class="headerlink" title="设置 github page"></a>设置 github page</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/penno/blogimg/raw/master/img/g5yOSXAVPsU6QZi.png" alt="image-20210726134824948"></h3><p>保存之后 github 会<code>自动</code>的在仓库根目录里生成一个<code>CNAME</code>文件，里面存储着域名配置信息</p><h3 id="设置域名解析"><a href="#设置域名解析" class="headerlink" title="设置域名解析"></a>设置域名解析</h3><p>可以使用这个</p><p><a href="https://zijian.aliyun.com/?spm=a2c1d.8251892.content.11.7c5c5b76F5cVb1#/domainDetect">https://zijian.aliyun.com/?spm=a2c1d.8251892.content.11.7c5c5b76F5cVb1#/domainDetect</a></p><p>通过域名提供商，修改刚刚的域名解析，通过 A 记录分别解析到以下 4 个 IP：</p><p>添加到自己的 域名解析那里</p><p>当记录全部解析生效时，就可以通过<code>你自己的设置的域名</code>访问到博客了，这个时候再开启<code>HTTPS</code>，示例图：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-24-13.png" alt="img"></p><p>然后 github 会自动签发提供给<code>你自己的设置的域名</code>域名使用的 SSL 证书，等待一段时间后，就可以通过<code>HTTPS</code>访问博客了。</p><h3 id="使用-cloudflare-CDN"><a href="#使用-cloudflare-CDN" class="headerlink" title="使用 cloudflare CDN"></a>使用 cloudflare CDN</h3><p>上面的步骤全部就绪之后，就可以开始白嫖之路了</p><ol><li><p>先通过<a href="https://dash.cloudflare.com/sign-up%E9%93%BE%E6%8E%A5%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%86%8C">https://dash.cloudflare.com/sign-up链接进行注册</a></p></li><li><p>添加站点，把对应的域名填写进去：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-31-57.png" alt="img"></p></li><li><p>提交之后会自动扫描域名对应的解析记录：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-32-34.png" alt="img"></p></li><li><p>查看 cloudfalre 对应的 NS 记录</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-33-46.png" alt="img"></p></li><li><p>通过域名的运营商修改对应的 NS 记录，这里每个运营商的修改方式都不一样，我这里是用的阿里云的：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-36-57.png" alt="img"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-37-25.png" alt="img"></p></li><li><p>这样就设置完毕了</p></li></ol><p>可以看到 dns 解析的 ip 已经变了，已经被 cloudflare 接管了，<br>然后清除下浏览器 DNS 缓存，chrome 浏览器输入<code>chrome://net-internals/#dns</code>进入清除页：</p><p>再次访问<code>你自己的设置的域名</code>，F12 打开网络面板可以看到已经用上了 CDN 了：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/2020-08-20-18-43-05.png" alt="img"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>一直白嫖一直爽，但是<code>cloudflare</code>不一定一直会提供免费版的，如果有一天它挂了，只需要把 DNS 的 NS 解析记录再还原回去就行了。</p>]]></content>
      
      
      <categories>
          
          <category> githubpage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> githubpage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改造eladmin为前后端一起部署</title>
      <link href="2021/06/25/%E6%94%B9%E9%80%A0eladmin%E4%B8%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E4%B8%80%E8%B5%B7%E9%83%A8%E7%BD%B2/"/>
      <url>2021/06/25/%E6%94%B9%E9%80%A0eladmin%E4%B8%BA%E5%89%8D%E5%90%8E%E7%AB%AF%E4%B8%80%E8%B5%B7%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  改造eladmin为前后端一起部署</p><p>2021-06-25 15:07:08</p><span id="more"></span><p>用了很多方法，不介绍失败的方法了，直接上成功的</p><h2 id="首先改造前端"><a href="#首先改造前端" class="headerlink" title="首先改造前端"></a>首先改造前端</h2><p>1.更改<code>.env.production</code></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210523224726.png" alt="image-20210523224726030"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_BASE_API  = 'http://47.99.209.106:18061'</span><br><span class="line">VUE_APP_WS_API = 'ws://47.99.209.106:18061'</span><br></pre></td></tr></tbody></table></figure><p>改成对应的后端接口</p><p>2.更改vue.config.js</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210523224805.png" alt="image-20210523224805657"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: process.env.NODE_ENV === 'development' ? '/' : './',</span><br></pre></td></tr></tbody></table></figure><p>3.更改router.js</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210523224858.png" alt="image-20210523224858317"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode: 'hash',</span><br></pre></td></tr></tbody></table></figure><h2 id="然后就是后端"><a href="#然后就是后端" class="headerlink" title="然后就是后端"></a>然后就是后端</h2><p>1、添加META-INF/resource/</p><p>将前端打包好的dist放在下面</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210523225108.png" alt="image-20210523225108200"></p><p>2、给<code>SpringSecurityConfig</code>添加图上四个 暂不确定是否都必须</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210523225245.png" alt="image-20210523225245250"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>部署后的项目web加载很慢 很奇怪    </p>]]></content>
      
      
      <categories>
          
          <category> eladmin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eladmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署nginx二级目录</title>
      <link href="2021/06/25/%E9%83%A8%E7%BD%B2nginx%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95/"/>
      <url>2021/06/25/%E9%83%A8%E7%BD%B2nginx%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近的nginx笔记</p><p>2021-06-25 13:07:08</p><span id="more"></span><p>项目为eladmin 前端 vue</p><p>主要的问题是前端更改配置 及部分nginx修改</p><p>参考链接: <a href="https://blog.csdn.net/qq_38319289/article/details/111867185">https://blog.csdn.net/qq_38319289/article/details/111867185</a></p><h3 id="1-修改-router-router-js"><a href="#1-修改-router-router-js" class="headerlink" title="1.修改 router/router.js"></a>1.修改 router/router.js</h3><p>添加一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base: 'xinfuwu',</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210517001420.png" alt="image-20210517001420375"></p><h3 id="2、然后修改-vue-config-js"><a href="#2、然后修改-vue-config-js" class="headerlink" title="2、然后修改 vue.config.js"></a>2、然后修改 vue.config.js</h3><p>更改一行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: '/xinfuwu/',</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210517001626.png" alt="image-20210517001626470"></p><h3 id="3、部署时，通过NGINX的反向代理"><a href="#3、部署时，通过NGINX的反向代理" class="headerlink" title="3、部署时，通过NGINX的反向代理"></a>3、部署时，通过NGINX的反向代理</h3><p>首先，给需要部署的项目定义一个 NGINX 的 server</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server {</span><br><span class="line">        listen 4071;</span><br><span class="line">        location / {</span><br><span class="line">             #vue h5 history mode 时配置</span><br><span class="line">            try_files $uri $uri/ /xinfuwu_web/index.html;</span><br><span class="line">    </span><br><span class="line">             root html/xinfuwu_web;</span><br><span class="line">             index index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>再到配置域名的主配置server上做反向代理</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location /xinfuwu/api/ {</span><br><span class="line">          client_max_body_size 40M;</span><br><span class="line">          proxy_pass http://127.0.0.1:10088/;</span><br><span class="line">          proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">           proxy_set_header   Host              $http_host;</span><br><span class="line">          proxy_set_header   X-Real-IP         $remote_addr;</span><br><span class="line">        }</span><br><span class="line">location ^~/xinfuwu/ {</span><br><span class="line">          proxy_redirect off;</span><br><span class="line">          proxy_set_header Host $host;</span><br><span class="line">          proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_pass http://127.0.0.1:4071/;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h3 id="4-env-production也需要修改"><a href="#4-env-production也需要修改" class="headerlink" title="4.env.production也需要修改"></a>4.env.production也需要修改</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210517001821.png" alt="image-20210517001821294"></p><p>baseapi修改为 ‘/xinfuwu/api’</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记</title>
      <link href="2021/06/01/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>2021/06/01/LeetCode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  LeetCode刷题笔记<br>  2021-06-01 15:15:56</p><span id="more"></span><h1 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h1><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="[7]整数反转"></a>[7]整数反转</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x!=<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span> (rev &lt; Integer.MIN_VALUE / <span class="number">10</span> || rev &gt; Integer.MAX_VALUE/<span class="number">10</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> digit = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            rev = rev * <span class="number">10</span> + digit;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="9-回文数"><a href="#9-回文数" class="headerlink" title="[9]回文数"></a>[9]回文数</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) {</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="[14]最长公共前缀"></a>[14]最长公共前缀</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">""</span>;</span><br><span class="line">        }</span><br><span class="line">        String prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> count = strs.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; count; i++) {</span><br><span class="line">            prefix = longestCommonPrefix(prefix, strs[i]);</span><br><span class="line">            <span class="keyword">if</span> (prefix.length() == <span class="number">0</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String str1,String str2)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> length = Math.min(str1.length(), str2.length());</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; str1.charAt(index) == str2.charAt(index)){</span><br><span class="line">            index++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> str1.substring(<span class="number">0</span>, index);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="[20]有效的括号"></a>[20]有效的括号</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="comment">//偶数必错</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        Map&lt;Character, Character&gt; pairs = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;() {{</span><br><span class="line">            put(<span class="string">')'</span>, <span class="string">'('</span>);</span><br><span class="line">            put(<span class="string">']'</span>, <span class="string">'['</span>);</span><br><span class="line">            put(<span class="string">'}'</span>, <span class="string">'{'</span>);</span><br><span class="line">        }};</span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (pairs.containsKey(ch)) {</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty() || stack.peek() != pairs.get(ch)) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">                stack.pop();</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                stack.push(ch);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="[21]合并两个有序链表"></a>[21]合并两个有序链表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{</span><br><span class="line">        <span class="comment">//使用带头结点的链表解决问题</span></span><br><span class="line">        <span class="comment">//待输出链表的头部</span></span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 待输出链表的 last 结点</span></span><br><span class="line">        ListNode last = head;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span> (l1.val &gt; l2.val){</span><br><span class="line">                last.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                last.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            }</span><br><span class="line">            last = last.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// l1 或 l2 可能还有剩余结点没有合并，</span></span><br><span class="line">        <span class="comment">// 由于从上面的while循环中退出，那么链表 l1 和 l2 至少有一个已经遍历结束</span></span><br><span class="line">        <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) last.next = l1;</span><br><span class="line">        <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) last.next = l2;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="[26]删除有序数组中的重复项"></a>[26]删除有序数组中的重复项</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> fast = <span class="number">1</span>,slow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n){</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != nums[fast - <span class="number">1</span>]){</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++ slow;</span><br><span class="line">            }</span><br><span class="line">            ++fast;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="[53]最大子序和"></a>[53]最大子序和</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) {</span><br><span class="line">                sum += num;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                sum = num;</span><br><span class="line">            }</span><br><span class="line">            ans = Math.max(ans, sum);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="[70]爬楼梯"></a>[70]爬楼梯</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 倒着推 f(x) = f(x-1) + f(x-2)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">            r = p + q;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="[88]合并两个有序数组"></a>[88]合并两个有序数组</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：直接合并后排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) {</span><br><span class="line">            nums1[m + i] = nums2[i];</span><br><span class="line">        }</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：双指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] sorted = <span class="keyword">new</span> <span class="keyword">int</span>[m + n];</span><br><span class="line">        <span class="keyword">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) {</span><br><span class="line">            <span class="keyword">if</span> (p1 == m) {</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (p2 == n) {</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) {</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            }</span><br><span class="line">            sorted[p1 + p2 - <span class="number">1</span>] = cur;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m + n; i++) {</span><br><span class="line">            nums1[i] = sorted[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="[101]对称二叉树"></a>[101]对称二叉树</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> check(root, root);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val &amp;&amp; check(p.left, q.right) &amp;&amp; check(p.right, q.left);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> check(root, root);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode u,TreeNode v)</span></span>{</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        q.offer(u);</span><br><span class="line">        q.offer(v);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()){</span><br><span class="line">            u = q.poll();</span><br><span class="line">            v = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (u == <span class="keyword">null</span> &amp;&amp; v == <span class="keyword">null</span>){</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (u == <span class="keyword">null</span> || v == <span class="keyword">null</span> || (u.val != v.val)){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            q.offer(u.left);</span><br><span class="line">            q.offer(v.right);</span><br><span class="line">            </span><br><span class="line">            q.offer(u.right);</span><br><span class="line">            q.offer(v.left);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历" class="headerlink" title="[103]二叉树的锯齿形层序遍历"></a>[103]二叉树的锯齿形层序遍历</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一: 层级遍历 双端队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; nodeQueue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        nodeQueue.offer(root);</span><br><span class="line">        <span class="keyword">boolean</span> isOrderLeft = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.isEmpty()){</span><br><span class="line">            Deque&lt;Integer&gt; levelList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> size = nodeQueue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                TreeNode curNode = nodeQueue.poll();</span><br><span class="line">                <span class="keyword">if</span> (isOrderLeft){</span><br><span class="line">                    levelList.offerLast(curNode.val);</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    levelList.offerFirst(curNode.val);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (curNode.left != <span class="keyword">null</span>){</span><br><span class="line">                    nodeQueue.offer(curNode.left);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (curNode.right != <span class="keyword">null</span>){</span><br><span class="line">                    nodeQueue.offer(curNode.right);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            ans.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(levelList));</span><br><span class="line">            isOrderLeft = !isOrderLeft;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*O(N)*，其中 <em>N</em> 为二叉树的节点数。每个节点会且仅会被遍历一次。</li><li>空间复杂度：*O(N)*。我们需要维护存储节点的队列和存储节点值的双端队列，空间复杂度为 *O(N)*。</li></ul><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="[104]二叉树的最大深度"></a>[104]二叉树的最大深度</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：深度优先搜索 DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">         <span class="keyword">if</span> (root == <span class="keyword">null</span>){</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">         }<span class="keyword">else</span> {</span><br><span class="line">             <span class="keyword">int</span> leftHeight = maxDepth(root.left);</span><br><span class="line">             <span class="keyword">int</span> rightHeight = maxDepth(root.right);</span><br><span class="line">             <span class="comment">//一直递归+1</span></span><br><span class="line">             <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">         }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二:BFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()){</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">while</span> (size&gt;<span class="number">0</span>){</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>){</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//反复压栈</span></span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>){</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                }</span><br><span class="line">                size --;</span><br><span class="line">            }<span class="comment">//</span></span><br><span class="line">            <span class="comment">//size = 0 时，最后+1</span></span><br><span class="line">            ans ++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="[121]买卖股票的最佳时机"></a>[121]买卖股票的最佳时机</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：暴力破解 超时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;prices.length ; j++) {</span><br><span class="line">                <span class="keyword">int</span> profit = prices[j] - prices[i];</span><br><span class="line">                <span class="keyword">if</span> (profit &gt; maxprofit){</span><br><span class="line">                    maxprofit = profit;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：*O(n^2)*。循环运行 n(n-1)/2 次。</li><li>空间复杂度：*O(1)*。只使用了常数个变量。</li></ul><p><a href="https://blog.csdn.net/weixin_44824500/article/details/104768290">Integer.MAX_VALUE的含义</a></p><p><strong>Integer.MAX_VALUE表示int数据类型的最大取值数：2 147 483 647<br>Integer.MIN_VALUE表示int数据类型的最小取值数：-2 147 483 648</strong></p><p>对应：<br><strong>Short.MAX_VALUE 为short类型的最大取值数 32 767<br>Short.MIN_VALUE 为short类型的最小取值数 -32 768</strong></p><p><strong>Integer.MAX_VALUE+1=Integer.MIN_VALUE</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：一次遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> minprice = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//一次遍历 不会出现前面-后面而出现利润错误的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; minprice){</span><br><span class="line">                minprice = prices[i];</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - minprice &gt; maxprofit){</span><br><span class="line">                maxprofit = prices[i] - minprice;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>时间复杂度：*O(n)*，只需要遍历一次。</p></li><li><p>空间复杂度：*O(1)*，只使用了常数个变量。</p></li></ul><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="[141]环形链表"></a>[141]环形链表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：哈希表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        Set&lt;ListNode&gt; seen = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>){</span><br><span class="line">            <span class="comment">//这一步应该是表示不能添加 则返回true</span></span><br><span class="line">            <span class="keyword">if</span> (!seen.add(head)){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：*O(N)*，其中 <em>N</em> 是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</li><li>空间复杂度：*O(N)*，其中 <em>N</em> 是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：快慢指针</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">具体地，我们定义两个指针，一快一满。慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next。这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表。否则快指针将到达链表尾部，该链表不为环形链表。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (slow!=fast){</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：*O(N)*，其中 <em>N</em> 是链表中的节点数。<ul><li>当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。</li><li>当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动 <em>N</em> 轮。</li></ul></li><li>空间复杂度：*O(1)*。我们只使用了两个指针的额外空间。</li></ul><h3 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="[155]最小栈"></a>[155]最小栈</h3><p>这道题没什么思路，基础太差的原因</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>{</span><br><span class="line"></span><br><span class="line">    Deque&lt;Integer&gt; xStack;</span><br><span class="line">    Deque&lt;Integer&gt; minStack;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>{</span><br><span class="line">        xStack = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        minStack = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        minStack.push(Integer.MAX_VALUE);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        xStack.push(val);</span><br><span class="line">        minStack.push(Math.min(minStack.peek(),val));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        xStack.pop();</span><br><span class="line">        minStack.pop();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> xStack.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="[169]多数元素"></a>[169]多数元素</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：哈希表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;Integer,Integer&gt; <span class="title">countNums</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>{</span><br><span class="line">        Map&lt;Integer, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (!counts.containsKey(num)){</span><br><span class="line">                counts.put(num, <span class="number">1</span>);</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                counts.put(num, counts.get(num) + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> counts;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        Map&lt;Integer, Integer&gt; counts = countNums(nums);</span><br><span class="line">        Map.Entry&lt;Integer,Integer&gt; majorityEntry = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : counts.entrySet()) {</span><br><span class="line">            <span class="keyword">if</span> (majorityEntry == <span class="keyword">null</span> || entry.getValue() &gt; majorityEntry.getValue()){</span><br><span class="line">                majorityEntry = entry;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> majorityEntry.getKey();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>时间复杂度：<em>O(n)</em></li><li>空间复杂度：*O(n)*。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">return</span> nums[nums.length/<span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法三：随机化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> majorityCount = nums.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            <span class="keyword">int</span> candidate = nums[randRange(rand,<span class="number">0</span>,nums.length)];</span><br><span class="line">            <span class="keyword">if</span> (countOccurences(nums,candidate) &gt; majorityCount){</span><br><span class="line">                <span class="keyword">return</span> candidate;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">randRange</span><span class="params">(Random rand,<span class="keyword">int</span> min,<span class="keyword">int</span> max)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> rand.nextInt(max-min) + min;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countOccurences</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> num)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == num){</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于一个给定的下标对应的数字很有可能是众数，我们随机挑选一个下标，检查它是否是众数，如果是就返回，否则继续随机挑选。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法四：分治</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> majorityElementRec(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countInRange</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> num, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lo; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == num) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">majorityElementRec</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>{</span><br><span class="line">        <span class="comment">//base case; the only element in an array of size 1 is the majority element</span></span><br><span class="line">        <span class="keyword">if</span> (lo == hi) {</span><br><span class="line">            <span class="keyword">return</span> nums[lo];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//recurse on left and right halves of this slice</span></span><br><span class="line">        <span class="keyword">int</span> mid = (hi - lo) / <span class="number">2</span> + lo;</span><br><span class="line">        <span class="keyword">int</span> left = majorityElementRec(nums, lo, mid);</span><br><span class="line">        <span class="keyword">int</span> right = majorityElementRec(nums, mid + <span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if the two halves agree on the majority element,return it</span></span><br><span class="line">        <span class="keyword">if</span> (left == right) {</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//otherwise,count each element and return the "winner"</span></span><br><span class="line">        <span class="keyword">int</span> leftCount = countInRange(nums, left, lo, hi);</span><br><span class="line">        <span class="keyword">int</span> rightCount = countInRange(nums, right, lo, hi);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftCount &gt; rightCount ? left : right;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="[206]反转链表"></a>[206]反转链表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：迭代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>){</span><br><span class="line">            ListNode next = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev  = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*O(n)*，其中 <em>n</em> 是链表的长度。需要遍历链表一次。</li><li>空间复杂度：*O(1)*。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        ListNode newHead = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*O(n)*，其中 <em>n</em> 是链表的长度。需要对链表的每个节点进行反转操作。</li><li>空间复杂度：*O(n)*，其中 <em>n</em> 是链表的长度。空间复杂度主要取决于递归调用的栈空间，最多为 <em>n</em> 层。</li></ul><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="[226]翻转二叉树"></a>[226]翻转二叉树</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 递归翻转</span></span><br><span class="line">        TreeNode left = invertTree(root.left);</span><br><span class="line">        TreeNode right = invertTree(root.right);</span><br><span class="line">        root.left = right;</span><br><span class="line">        root.right = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*O(N)*，其中 <em>N</em> 为二叉树节点的数目。我们会遍历二叉树中的每一个节点，对每个节点而言，我们在常数时间内交换其两棵子树。</li><li>空间复杂度：*O(N)*。使用的空间由递归栈的深度决定，它等于当前节点在二叉树中的高度。在平均情况下，二叉树的高度与节点个数为对数关系，即 O(logN)。而在最坏情况下，树形成链状，空间复杂度为 *O(N)*。</li></ul><h3 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="[234]回文链表"></a>[234]回文链表</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：将值复制到数组中后用双指针法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; vals = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">// 将链表的值复制到数组中</span></span><br><span class="line">        ListNode currentNode = head;</span><br><span class="line">        <span class="keyword">while</span> (currentNode != <span class="keyword">null</span>){</span><br><span class="line">            vals.add(currentNode.val);</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> back = vals.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (front &lt; back){</span><br><span class="line">            <span class="keyword">if</span> (!vals.get(front).equals(vals.get(back))){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            front++;</span><br><span class="line">            back--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ListNode frontPointer;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">recursivelyCheck</span><span class="params">(ListNode currentNode)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (currentNode!=<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span> (!recursivelyCheck(currentNode.next)){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (currentNode.val != frontPointer.val){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">            frontPointer = frontPointer.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        frontPointer = head;</span><br><span class="line">        <span class="keyword">return</span> recursivelyCheck(head);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="[283]移动零"></a>[283]移动零</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：双指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = nums.length,left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n){</span><br><span class="line">            <span class="keyword">if</span> (nums[right] != <span class="number">0</span>){</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：*O(n)*，其中 <em>n</em> 为序列长度。每个位置至多被遍历两次。</li><li>空间复杂度：*O(1)*。只需要常数的空间存放若干变量。</li></ul><h3 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="[448]找到所有数组中消失的数字"></a>[448]找到所有数组中消失的数字</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) {</span><br><span class="line">            <span class="comment">// 取模 以免被增加过</span></span><br><span class="line">            <span class="keyword">int</span> x = (num - <span class="number">1</span>) % n;</span><br><span class="line">            nums[x] += n;</span><br><span class="line">        }</span><br><span class="line">        List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= n) {</span><br><span class="line">                ret.add(i + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="[461]汉明距离"></a>[461]汉明距离</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置位计数功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> Integer.bitCount(x ^ y);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二：移位</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> xor = x ^ y;</span><br><span class="line">        <span class="keyword">int</span> distance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (xor % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                distance += <span class="number">1</span>;</span><br><span class="line">            xor = xor &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//布赖恩·克尼根算法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> xor = x ^ y;</span><br><span class="line">        <span class="keyword">int</span> distance = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (xor != <span class="number">0</span>) {</span><br><span class="line">            distance += <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// remove the rightmost bit of '1'</span></span><br><span class="line">            xor = xor &amp; (xor - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="[543]二叉树的直径"></a>[543]二叉树的直径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        ans = <span class="number">1</span>;</span><br><span class="line">        depth(root);</span><br><span class="line">        <span class="keyword">return</span> ans - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode node)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//访问了空节点，返回0</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> L = depth(node.left);<span class="comment">//左儿子为根的子树的深度</span></span><br><span class="line">        <span class="keyword">int</span> R = depth(node.right);<span class="comment">//右儿子为根的子树的深度</span></span><br><span class="line">        ans = Math.max(ans, L + R + <span class="number">1</span>);<span class="comment">//计算d_node即L+R+1 并更新ans</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(L, R) + <span class="number">1</span>;<span class="comment">//返回该节点为根的子树的深度</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="[617]合并二叉树"></a>[617]合并二叉树</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：深度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (root1 == <span class="keyword">null</span>){</span><br><span class="line">                <span class="keyword">return</span> root2;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (root2 == <span class="keyword">null</span>){</span><br><span class="line">                <span class="keyword">return</span> root1;</span><br><span class="line">            }</span><br><span class="line">            TreeNode merged = <span class="keyword">new</span> TreeNode(root1.val+root2.val);</span><br><span class="line">            merged.left = mergeTrees(root1.left, root2.left);</span><br><span class="line">            merged.right = mergeTrees(root1.right, root2.right);</span><br><span class="line">            <span class="keyword">return</span> merged;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法二：广度优先搜索</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t2 == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> t1;</span><br><span class="line">        }</span><br><span class="line">        TreeNode merged = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(merged);</span><br><span class="line">        queue1.offer(t1);</span><br><span class="line">        queue2.offer(t2);</span><br><span class="line">        <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) {</span><br><span class="line">            TreeNode node = queue.poll(), node1 = queue1.poll(), node2 = queue2.poll();</span><br><span class="line">            TreeNode left1 = node1.left, left2 = node2.left, right1 = node1.right,right2 = node2.right;</span><br><span class="line">            <span class="keyword">if</span> (left1 != <span class="keyword">null</span> || left2 != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (left1 != <span class="keyword">null</span> &amp;&amp; left2 != <span class="keyword">null</span>) {</span><br><span class="line">                    TreeNode left = <span class="keyword">new</span> TreeNode(left1.val + left2.val);</span><br><span class="line">                    node.left = left;</span><br><span class="line">                    queue.offer(left);</span><br><span class="line">                    queue1.offer(left1);</span><br><span class="line">                    queue2.offer(left2);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (left1 != <span class="keyword">null</span>) {</span><br><span class="line">                    node.left = left1;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (left2 != <span class="keyword">null</span>) {</span><br><span class="line">                    node.left = left2;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (right1 != <span class="keyword">null</span> || right2 != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (right1 != <span class="keyword">null</span> &amp;&amp; right2 != <span class="keyword">null</span>) {</span><br><span class="line">                    TreeNode right = <span class="keyword">new</span> TreeNode(right1.val + right2.val);</span><br><span class="line">                    node.right = right;</span><br><span class="line">                    queue.offer(right);</span><br><span class="line">                    queue1.offer(right1);</span><br><span class="line">                    queue2.offer(right2);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (right1 != <span class="keyword">null</span>) {</span><br><span class="line">                    node.right = right1;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (right2 != <span class="keyword">null</span>) {</span><br><span class="line">                    node.right = right2;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> merged;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的Redis笔记</title>
      <link href="2021/05/16/redis%E7%AC%94%E8%AE%B0/"/>
      <url>2021/05/16/redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近的Redis笔记</p><p>​        2021-05-16 18:05:26</p><span id="more"></span><h2 id="2-Redis-简介"><a href="#2-Redis-简介" class="headerlink" title="2.Redis 简介"></a>2.Redis 简介</h2><p>Redis 是我们在互联网应用中使用最广泛的一个 NoSQL 数据库，基于 C 开发的键值对存储数据库，<br>Redis 这个名字是 Remote Dictionary Service 字母缩写。<br>很多人想到 Redis，就想到缓存。但实际上 Redis 除了缓存之外，还有许多更加丰富的使用场景。比如<br>分布式锁，限流。<br>特点：<br>支持数据持久化<br>支持多种不同的数据结构类型之间的映射<br>支持主从模式的数据备份<br>自带了发布订阅系统<br>定时器、计数器</p><h2 id="3-Redis-安装"><a href="#3-Redis-安装" class="headerlink" title="3.Redis 安装"></a>3.Redis 安装</h2><p>四种方式获取一个 Redis：</p><ol><li>直接编译安装（推荐使用）</li><li>使用 Docker</li><li>也可以直接安装</li><li>还有一个在线体验的方式，通过在线体验，可以直接使用 Redis 的功能<a href="http://try.redis.io/">http://try.redis.io/</a></li></ol><h3 id="3-1-直接编译安装"><a href="#3-1-直接编译安装" class="headerlink" title="3.1 直接编译安装"></a>3.1 直接编译安装</h3><p>提前准备好 gcc 环境。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></tbody></table></figure><p>接下来下载并安装 Redis:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br><span class="line">tar -zxvf redis-5.0.7.tar.gz</span><br><span class="line">cd redis-5.0.7/</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>安装完成后，启动 Redis:</p><p>redis-server redis.conf</p><p>启动成功页面如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210519233337.png" alt="image-20210519233337140"></p><h3 id="3-2-通过-Docker-安装"><a href="#3-2-通过-Docker-安装" class="headerlink" title="3.2 通过 Docker 安装"></a>3.2 通过 Docker 安装</h3><p>Docker 安装好之后，启动 Docker ，直接运行安装命令即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name javaboy-redis -d -p 6379:6379 redis --requirepass 123</span><br></pre></td></tr></tbody></table></figure><p>Docker 上的 Redis 启动成功之后，可以从宿主机上连接（前提是宿主机上存在 redis-cli）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a 123</span><br></pre></td></tr></tbody></table></figure><p>如果宿主机上没有安装 Redis，那么也可以进入到 Docker 容器种去操作 Redis:</p><p>docker exec -it javaboy-redis redis-cli -a 123</p><h3 id="3-3-直接安装"><a href="#3-3-直接安装" class="headerlink" title="3.3 直接安装"></a>3.3 直接安装</h3><p>CentOS：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install redis</span><br></pre></td></tr></tbody></table></figure><p>Mac:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-在线体验"><a href="#3-4-在线体验" class="headerlink" title="3.4 在线体验"></a>3.4 在线体验</h3><p><a href="http://try.redis.io/">http://try.redis.io/</a></p><h2 id="4-Redis-五种基本数据类型"><a href="#4-Redis-五种基本数据类型" class="headerlink" title="4. Redis 五种基本数据类型"></a>4. Redis 五种基本数据类型</h2><h3 id="4-1-Redis-启动"><a href="#4-1-Redis-启动" class="headerlink" title="4.1 Redis 启动"></a>4.1 Redis 启动</h3><p>首先，修改 redis.conf 配置文件：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210519234652.png" alt="image-20210519234652935"></p><p>配置完成后，保存退出，再次通过 <code>redis-server redis.conf</code> 命令启动 Redis，此时，就是在后台启<br>动了。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210519234708.png" alt="image-20210519234708846"></p><h3 id="4-2-String"><a href="#4-2-String" class="headerlink" title="4.2 String"></a>4.2 String</h3><p>String 是 Redis 里边最最简单的一种数据结构。在 Redis 中，所以的 key 都是字符串，但是，不同的<br>key 对应的 value 则具备不同的数据结构，我们所说的五种不同的数据类型，主要是指 value 的数据类<br>型不同。<br>Redis 中的字符串是动态字符串，内部是可以修改的，像 Java 中的 StringBuffer，它采用分配冗余空间<br>的方式来减少内存的频繁分配。在 Redis 内部结构中，一般实际分配的内存会大于需要的内存，当字符<br>串小于 1M 的时候，扩容都是在现有的空间基础上加倍，扩容每次扩 1M 空间，最大 512M。</p><ul><li><p>set<br>set 就是给一个 key 赋值的。</p></li><li><p>append<br>使用 append 命令时，如果 key 已经存在，则直接在对应的 value 后追加值，否则就创建新的键值对。</p></li><li><p>decr<br>可以实现对 value 的减 1 操作（前提是 value 是一个数字），如果 value 不是数字，会报错，如果<br>value 不存在，则会给一个默认的值为 0，在默认值的基础上减一。</p></li><li><p>decrby<br>和 decr 类似，但是可以自己设置步长，该命令第二个参数就是步长。</p></li><li><p>get<br>get 用来获取一个 key 的 value。</p></li><li><p>getrange<br>getrange 可以用来返回 key 对应的 value 的子串，这有点类似于 Java 里边的 substring。这个命令第<br>二个和第三个参数就是截取的起始和终止位置，其中，-1 表示最后一个字符串，-2 表示倒数第二个字符<br>串，以此类推…</p></li><li><p>getset<br>获取并更新某一个 key。</p></li><li><p>incr<br>给某一个 key 的 value 自增。</p></li><li><p>incrby<br>给某一个 key 的 value 自增，同时还可以设置步长。</p></li><li><p>incrbyfloat<br>和 incrby 类似，但是自增的步长可以设置为浮点数。</p></li><li><p>mget 和 mset<br>批量获取和批量存储</p></li></ul><p>ttl<br>查看 key 的有效期<br>setex<br>在给 key 设置 value 的同时，还设置过期时间。<br>psetex<br>和 setex 类似，只不过这里的时间单位是毫秒。<br>setnx<br>默认情况下， set 命令会覆盖已经存在的 key，setnx 则不会。<br>msetnx<br>批量设置。<br>setrange<br>覆盖一个已经存在的 key 的value。<br>strlen<br>查看字符串长度</p><h4 id="4-2-1-BIT-命令"><a href="#4-2-1-BIT-命令" class="headerlink" title="4.2.1 BIT 命令"></a>4.2.1 BIT 命令</h4><p>在 Redis 中，字符串都是以二进制的方式来存储的。例如 set k1 a，a 对应的 ASCII 码是 97，97 转为<br>二进制是 01100001，BIT 相关的命令就是对二进制进行操作的。<br>getbit<br>key 对应的 value 在 offset 处的 bit 值。<br>setbit<br>修改 key 对应的 value 在 offset 处的 bit 值<br>bitcount<br>统计二进制数据中 1 的个数。</p><h3 id="4-3-List"><a href="#4-3-List" class="headerlink" title="4.3 List"></a>4.3 List</h3><p>lpush<br>将所有指定的值插入到存于 key 的列表的头部。如果 key 不存在，那么在进行 push 操作前会创建一个<br>空列表。 如果 key 对应的值不是一个 list 的话，那么会返回一个错误。<br>lrange<br>返回列表指定区间内的元素。<br>rpush<br>向存于 key 的列表的尾部插入所有指定的值。<br>rpop<br>移除并返回列表的尾元素。<br>lpop</p><p>移除并返回列表的头元素。<br>lindex<br>返回列表中，下标为 index 的元素。<br>ltrim<br>ltrim 可以对一个列表进行修剪。<br>blpop<br>阻塞式的弹出，相当于 lpop 的阻塞版。</p><h3 id="4-4-Set"><a href="#4-4-Set" class="headerlink" title="4.4 Set"></a>4.4 Set</h3><p>sadd<br>添加元素到一个 key 中<br>smembers<br>获取一个 key 下的所有元素<br>srem<br>移除指定的元素<br>sismemeber<br>返回某一个成员是否在集合中<br>scard<br>返回集合的数量<br>srandmember<br>随机返回一个元素<br>spop<br>随机返回并且出栈一个元素。<br>smove<br>把一个元素从一个集合移到另一个集合中去。<br>sdiff<br>返回两个集合的差集。<br>sinter<br>返回两个集合的交集。<br>sdiffstore<br>这个类似于 sdiff ，不同的是，计算出来的结果会保存在一个新的集合中。<br>sinterstore<br>类似于 sinter，只是将计算出来的交集保存到一个新的集合中。<br>sunion<br>求并集。</p><p>sunionstore<br>求并集并且将结果保存到新的集合中。</p><h3 id="4-5-Hash"><a href="#4-5-Hash" class="headerlink" title="4.5 Hash"></a>4.5 Hash</h3><p>在 hash 结构中，key 是一个字符串，value 则是一个 key/value 键值对。<br>hset<br>添加值。<br>hget<br>获取值<br>hmset<br>批量设置<br>hmget<br>批量获取<br>hdel<br>删除一个指定的 field<br>hsetnx<br>默认情况下，如果 key 和 field 相同，会覆盖掉已有的 value，hsetnx 则不会。<br>hvals<br>获取所有的 value<br>hkeys<br>获取所有的 key<br>hgetall<br>同时获取所有的 key 和 value<br>hexists<br>返回 field 是否存在<br>hincrby<br>给指定的 value 自增<br>hincrbyfloat<br>可以自增一个浮点数<br>hlen<br>返回 某一个 key 中 value 的数量<br>hstrlen<br>返回某一个 key 中的某一个 field 的字符串长度</p><h3 id="4-6-ZSet"><a href="#4-6-ZSet" class="headerlink" title="4.6 ZSet"></a>4.6 ZSet</h3><p>zadd<br>将指定的元素添加到有序集合中。<br>zscore<br>返回 member 的 score 值<br>zrange<br>返回集合中的一组元素。<br>zrevrange<br>返回一组元素，但是是倒序。<br>zcard<br>返回元素个数<br>zcount<br>返回 score 在某一个区间内的元素。<br>zrangebyscore<br>按照 score 的范围返回元素。<br>zrank<br>返回元素的排名（从小到大<br>zrevrank<br>返回元素排名（从大到小<br>zincrby<br>score 自增<br>zinterstore<br>给两个集合求交集。<br>zrem<br>弹出一个元素<br>zlexcount<br>计算有序集合中成员数量<br>zrangebylex<br>返回指定区间内的成员。</p><h3 id="4-7-key"><a href="#4-7-key" class="headerlink" title="4.7 key"></a>4.7 key</h3><p>del<br>删除一个 key/value<br>dump<br>序列化给定的 key<br>exists</p><p>判断一个 key 是否存在<br>ttl<br>查看一个 key 的有效期<br>expire<br>给一个 key 设置有效期，如果 key 在过期之前被重新 set 了，则过期时间会失效。<br>persist<br>移除一个 key 的过期时间<br>keys *<br>查看所有的 key<br>pttl<br>和 ttl 一样，只不过这里返回的是毫秒</p><h3 id="4-8-补充"><a href="#4-8-补充" class="headerlink" title="4.8 补充"></a>4.8 补充</h3><ol><li>四种数据类型（list/set/zset/hash），在第一次使用时，如果容器不存在，就自动创建一个</li><li>四种数据类型（list/set/zset/hash），如果里边没有元素了，那么立即删除容器，释放内存。</li></ol><h2 id="5-Redis-的-Java-客户端"><a href="#5-Redis-的-Java-客户端" class="headerlink" title="5.Redis 的 Java 客户端"></a>5.Redis 的 Java 客户端</h2><h3 id="5-1-开启远程连接"><a href="#5-1-开启远程连接" class="headerlink" title="5.1 开启远程连接"></a>5.1 开启远程连接</h3><p>Redis 默认是不支持远程连接的，需要手动开启。<br>一共修改两个地方：</p><ol><li>注释掉 bind: 127.0.0.1</li><li>开启密码校验，去掉 requirepass 的注释<br>改完之后，保存退出，启动 Redis。</li></ol><h3 id="5-2-Jedis"><a href="#5-2-Jedis" class="headerlink" title="5.2 Jedis"></a>5.2 Jedis</h3><h4 id="5-2-1-基本使用"><a href="#5-2-1-基本使用" class="headerlink" title="5.2.1 基本使用"></a>5.2.1 基本使用</h4><p>Jedis 的 GitHub 地址：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a><br>首先创建一个普通的 Maven 项目。<br>项目创建成功后，添加 Jedis 依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;type&gt;jar&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后创建一个测试方法。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class MyJedis {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">//1.构造一个 Jedis 对象，因为这里使用的默认端口 6379，所以不用配置端口</span><br><span class="line">Jedis jedis = new Jedis("192.168.91.128");</span><br><span class="line">//2.密码认证</span><br><span class="line">jedis.auth("javaboy");</span><br><span class="line">//3.测试是否连接成功</span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">//4.返回 pong 表示连接成功</span><br><span class="line">System.out.println(ping);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于 Jedis 而言，一旦连接上 Redis 服务端，剩下的操作都很容易了。<br>在 Jedis 中，由于方法的 API 和 Redis 的命令高度一致，所以，Jedis 中的方法见名知意，直接使用即<br>可。</p><h4 id="5-2-2-连接池"><a href="#5-2-2-连接池" class="headerlink" title="5.2.2 连接池"></a>5.2.2 连接池</h4><p>在实际应用中，Jedis 实例我们一般都是通过连接池来获取，由于 Jedis 对象不是线城安全的，所以，当<br>我们使用 Jedis 对象时，从连接池获取 Jedis，使用完成之后，再还给连接池。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class JedisPoolTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">//1. 构造一个 Jedis 连接池</span><br><span class="line">JedisPool pool = new JedisPool("192.168.91.128", 6379);</span><br><span class="line">//2. 从连接池中获取一个 Jedis 连接</span><br><span class="line">Jedis jedis = pool.getResource();</span><br><span class="line">//3. Jedis 操作</span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);</span><br><span class="line">//4. 归还连接</span><br><span class="line">jedis.close();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果第三步抛出异常的话，会导致第四步无法执行，所以，我们要对代码进行改进，确保第四步能够执<br>行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class JedisPoolTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Jedis jedis = null;</span><br><span class="line">//1. 构造一个 Jedis 连接池</span><br><span class="line">JedisPool pool = new JedisPool("192.168.91.128", 6379);</span><br><span class="line">//2. 从连接池中获取一个 Jedis 连接</span><br><span class="line">jedis = pool.getResource();</span><br><span class="line">jedis.auth("javaboy");</span><br><span class="line">try {</span><br><span class="line">//3. Jedis 操作</span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);</span><br><span class="line">} catch (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} finally {</span><br><span class="line">//4. 归还连接</span><br><span class="line">if (jedis != null) {</span><br><span class="line">jedis.close();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 finally 我们可以确保 jedis 一定被关闭。<br>利用 JDK1.7 中的 try-with-resource 特性，可以对上面的代码进行改造：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class JedisPoolTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">JedisPool pool = new JedisPool("192.168.91.128");</span><br><span class="line">try(Jedis jedis = pool.getResource()) {</span><br><span class="line">jedis.auth("javaboy");</span><br><span class="line">String ping = jedis.ping();</span><br><span class="line">System.out.println(ping);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段代码的作用和上面的是一致的。<br>但是，上面这段代码无法实现强约束。我们可以做进一步的改进：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public interface CallWithJedis {</span><br><span class="line">void call(Jedis jedis);</span><br><span class="line">}</span><br><span class="line">public class Redis {</span><br><span class="line">private JedisPool pool;</span><br><span class="line">public Redis() {</span><br><span class="line">GenericObjectPoolConfig config = new GenericObjectPoolConfig();</span><br><span class="line">//连接池最大空闲数</span><br><span class="line">config.setMaxIdle(300);</span><br><span class="line">//最大连接数</span><br><span class="line">config.setMaxTotal(1000);</span><br><span class="line">//连接最大等待时间，如果是 -1 表示没有限制</span><br><span class="line">config.setMaxWaitMillis(30000);</span><br><span class="line">//在空闲时检查有效性</span><br><span class="line">config.setTestOnBorrow(true);</span><br><span class="line">/**</span><br><span class="line">* 1. Redis 地址</span><br><span class="line">* 2. Redis 端口</span><br><span class="line">* 3. 连接超时时间</span><br><span class="line">* 4. 密码</span><br><span class="line">*/</span><br><span class="line">pool = new JedisPool(config, "192.168.91.128", 6379, 30000, "javaboy");</span><br><span class="line">}</span><br><span class="line">public void execute(CallWithJedis callWithJedis) {</span><br><span class="line">try (Jedis jedis = pool.getResource()) {</span><br><span class="line">callWithJedis.call(jedis);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(jedis -&gt; {</span><br><span class="line">System.out.println(jedis.ping());</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-Lettuce"><a href="#5-3-Lettuce" class="headerlink" title="5.3 Lettuce"></a>5.3 Lettuce</h3><p>GitHub：<a href="https://github.com/lettuce-io/lettuce-core">https://github.com/lettuce-io/lettuce-core</a><br>Lettuce 和 Jedis 的一个比较：</p><ol><li>Jedis 在实现的过程中是直接连接 Redis 的，在多个线程之间共享一个 Jedis 实例，这是线城不安<br>全的，如果想在多线程场景下使用 Jedis，就得使用连接池，这样，每个线城都有自己的 Jedis 实<br>例。</li><li>Lettuce 基于目前很火的 Netty NIO 框架来构建，所以克服了 Jedis 中线程不安全的问题，Lettuce<br>支持同步、异步 以及 响应式调用，多个线程可以共享一个连接实例。<br>使用 Lettuce，首先创建一个普通的 Maven 项目，添加 Lettuce 依赖：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.lettuce&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后来一个简单的测试案例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class LettuceTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">RedisClient redisClient =</span><br><span class="line">RedisClient.create("redis://javaboy@192.168.91.128");</span><br><span class="line">StatefulRedisConnection&lt;String, String&gt; connect = redisClient.connect();</span><br><span class="line">RedisCommands&lt;String, String&gt; sync = connect.sync();</span><br><span class="line">sync.set("name", "javaboy");</span><br><span class="line">String name = sync.get("name");</span><br><span class="line">System.out.println(name);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意这里的密码传递方式，密码直接写在连接地址里边。</p><h2 id="6-Redis-做分布式锁"><a href="#6-Redis-做分布式锁" class="headerlink" title="6.Redis 做分布式锁"></a>6.Redis 做分布式锁</h2><p>分布式锁也算是 Redis 比较常见的使用场景。<br>问题场景：<br>例如一个简单的用户操作，一个线城去修改用户的状态，首先从数据库中读出用户的状态，然后<br>在内存中进行修改，修改完成后，再存回去。在单线程中，这个操作没有问题，但是在多线程<br>中，由于读取、修改、存 这是三个操作，不是原子操作，所以在多线程中，这样会出问题。<br>对于这种问题，我们可以使用分布式锁来限制程序的并发执行。</p><h3 id="6-1-基本用法"><a href="#6-1-基本用法" class="headerlink" title="6.1 基本用法"></a>6.1 基本用法</h3><p>分布式锁实现的思路很简单，就是进来一个线城先占位，当别的线城进来操作时，发现已经有人占位<br>了，就会放弃或者稍后再试。</p><p>在 Redis 中，占位一般使用 setnx 指令，先进来的线城先占位，线程的操作执行完成后，再调用 del 指<br>令释放位子。<br>根据上面的思路，我们写出的代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Redis redis = <span class="keyword">new</span> Redis();</span><br><span class="line">redis.execute(jedis-&gt;{</span><br><span class="line">Long setnx = jedis.setnx(<span class="string">"k1"</span>, <span class="string">"v1"</span>);</span><br><span class="line"><span class="keyword">if</span> (setnx == <span class="number">1</span>) {</span><br><span class="line"><span class="comment">//没人占位</span></span><br><span class="line">jedis.set(<span class="string">"name"</span>, <span class="string">"javaboy"</span>);</span><br><span class="line">String name = jedis.get(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line">jedis.del(<span class="string">"k1"</span>);<span class="comment">//释放资源</span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="comment">//有人占位，停止/暂缓 操作</span></span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的代码存在一个小小问题：如果代码业务执行的过程中抛异常或者挂了，这样会导致 del 指令没有<br>被调用，这样，k1 无法释放，后面来的请求全部堵塞在这里，锁也永远得不到释放。<br>要解决这个问题，我们可以给锁添加一个过期时间，确保锁在一定的时间之后，能够得到释放。改进后<br>的代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class LockTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(jedis-&gt;{</span><br><span class="line">Long setnx = jedis.setnx("k1", "v1");</span><br><span class="line">if (setnx == 1) {</span><br><span class="line">//给锁添加一个过期时间，防止应用在运行过程中抛出异常导致锁无法及时得到释放</span><br><span class="line">jedis.expire("k1", 5);</span><br><span class="line">//没人占位</span><br><span class="line">jedis.set("name", "javaboy");</span><br><span class="line">String name = jedis.get("name");</span><br><span class="line">System.out.println(name);</span><br><span class="line">jedis.del("k1");//释放资源</span><br><span class="line">}else{</span><br><span class="line">//有人占位，停止/暂缓 操作</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样改造之后，还有一个问题，就是在获取锁和设置过期时间之间如果如果服务器突然挂掉了，这个时<br>候锁被占用，无法及时得到释放，也会造成死锁，因为获取锁和设置过期时间是两个操作，不具备原子<br>性。<br>为了解决这个问题，从 Redis2.8 开始，setnx 和 expire 可以通过一个命令一起来执行了，我们对上述<br>代码再做改进：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class LockTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(jedis-&gt;{</span><br><span class="line">String set = jedis.set("k1", "v1", new SetParams().nx().ex(5));</span><br><span class="line">if (set !=null &amp;&amp; "OK".equals(set)) {</span><br><span class="line">//给锁添加一个过期时间，防止应用在运行过程中抛出异常导致锁无法及时得到释放</span><br><span class="line">jedis.expire("k1", 5);</span><br><span class="line">//没人占位</span><br><span class="line">jedis.set("name", "javaboy");</span><br><span class="line">String name = jedis.get("name");</span><br><span class="line">System.out.println(name);</span><br><span class="line">jedis.del("k1");//释放资源</span><br><span class="line">}else{</span><br><span class="line">//有人占位，停止/暂缓 操作</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2-解决超时问题"><a href="#6-2-解决超时问题" class="headerlink" title="6.2 解决超时问题"></a>6.2 解决超时问题</h3><p>为了防止业务代码在执行的时候抛出异常，我们给每一个锁添加了一个超时时间，超时之后，锁会被自<br>动释放，但是这也带来了一个新的问题：如果要执行的业务非常耗时，可能会出现紊乱。举个例子：第<br>一个线程首先获取到锁，然后开始执行业务代码，但是业务代码比较耗时，执行了 8 秒，这样，会在第<br>一个线程的任务还未执行成功锁就会被释放了，此时第二个线程会获取到锁开始执行，在第二个线程刚<br>执行了 3 秒，第一个线程也执行完了，此时第一个线程会释放锁，但是注意，它释放的第二个线程的<br>锁，释放之后，第三个线程进来。<br>对于这个问题，我们可以从两个角度入手：<br>尽量避免在获取锁之后，执行耗时操作。<br>可以在锁上面做文章，将锁的 value 设置为一个随机字符串，每次释放锁的时候，都去比较随机<br>字符串是否一致，如果一致，再去释放，否则，不释放。<br>对于第二种方案，由于释放锁的时候，要去查看锁的 value，第二个比较 value 的值是否正确，第三步<br>释放锁，有三个步骤，很明显三个步骤不具备原子性，为了解决这个问题，我们得引入 Lua 脚本。<br>Lua 脚本的优势：<br>1.使用方便，Redis 中内置了对 Lua 脚本的支持。<br>2.Lua 脚本可以在 Redis 服务端原子的执行多个 Redis 命令。</p><p>3.由于网络在很大程度上会影响到 Redis 性能，而使用 Lua 脚本可以让多个命令一次执行，可以有<br>效解决网络给 Redis 带来的性能问题。</p><p>在 Redis 中，使用 Lua 脚本，大致上两种思路：</p><ol><li>提前在 Redis 服务端写好 Lua 脚本，然后在 Java 客户端去调用脚本（推荐）。</li><li>可以直接在 Java 端去写 Lua 脚本，写好之后，需要执行时，每次将脚本发送到 Redis 上去执行。</li></ol><p>首先在 Redis 服务端创建 Lua 脚本，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if redis.call("get",KEYS[1])==ARGV[1] then</span><br><span class="line">return redis.call("del",KEYS[1])</span><br><span class="line">else</span><br><span class="line">return 0</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>接下来，可以给 Lua 脚本求一个 SHA1 和，命令如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat lua/releasewherevalueequal.lua | redis-cli -a javaboy script load --pipe</span><br></pre></td></tr></tbody></table></figure><p>script load 这个命令会在 Redis 服务器中缓存 Lua 脚本，并返回脚本内容的 SHA1 校验和，然后在<br>Java 端调用时，传入 SHA1 校验和作为参数，这样 Redis 服务端就知道执行哪个脚本了。</p><p>接下来，在 Java 端调用这个脚本。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuaTest</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Redis redis = <span class="keyword">new</span> Redis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) {</span><br><span class="line">redis.execute(jedis -&gt; {</span><br><span class="line"><span class="comment">//1.先获取一个随机字符串</span></span><br><span class="line">String value = UUID.randomUUID().toString();</span><br><span class="line"><span class="comment">//2.获取锁</span></span><br><span class="line">String k1 = jedis.set(<span class="string">"k1"</span>, value, <span class="keyword">new</span> SetParams().nx().ex(<span class="number">5</span>));</span><br><span class="line"><span class="comment">//3.判断是否成功拿到锁</span></span><br><span class="line"><span class="keyword">if</span> (k1 != <span class="keyword">null</span> &amp;&amp; <span class="string">"OK"</span>.equals(k1)) {</span><br><span class="line"><span class="comment">//4. 具体的业务操作</span></span><br><span class="line">jedis.set(<span class="string">"site"</span>, <span class="string">"www.javaboy.org"</span>);</span><br><span class="line">String site = jedis.get(<span class="string">"site"</span>);</span><br><span class="line">System.out.println(site);</span><br><span class="line"><span class="comment">//5.释放锁</span></span><br><span class="line">jedis.evalsha(<span class="string">"b8059ba43af6ffe8bed3db65bac35d452f8115d8"</span>,</span><br><span class="line">Arrays.asList(<span class="string">"k1"</span>), Arrays.asList(value));</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"没拿到锁"</span>);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>-javaagent:D:\SoftWare\Dbeaver21.0pj\dbeaver-agent\dbeaver-agent.jar</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat releasewherevalueequal.lua | redis-cli -a lunanboy script load --pipe</span><br><span class="line">-a后面是redis密码 根据实际情况填写</span><br></pre></td></tr></tbody></table></figure><p>sha1 xxpalicloud</p><p>“b8059ba43af6ffe8bed3db65bac35d452f8115d8”</p><h2 id="7-Redis-做消息队列"><a href="#7-Redis-做消息队列" class="headerlink" title="7.Redis 做消息队列"></a>7.Redis 做消息队列</h2><p>我们平时说到消息队列，一般都是指 RabbitMQ、RocketMQ、ActiveMQ 以及大数据里边的 Kafka，<br>这些是我们比较常见的消息中间件，也是非常专业的消息中间件，作为专业的中间件，它里边提供了许<br>多功能。<br>但是，当我们需要使用消息中间件的时候，并非每次都需要非常专业的消息中间件，假如我们只有一个<br>消息队列，只有一个消费者，那就没有必要去使用上面这些专业的消息中间件，这种情况我们可以直接<br>使用 Redis 来做消息队列。<br>Redis 的消息队列不是特别专业，他没有很多高级特性，适用简单的场景，如果对于消息可靠性有着极<br>高的追求，那么不适合使用 Redis 做消息队列。</p><h3 id="7-1-消息队列"><a href="#7-1-消息队列" class="headerlink" title="7.1 消息队列"></a>7.1 消息队列</h3><p>Redis 做消息队列，使用它里边的 List 数据结构就可以实现，我们可以使用 lpush/rpush 操作来实现入<br>队，然后使用 lpop/rpop 来实现出队。<br>回顾一下：<br>在客户端（例如 Java 端），我们会维护一个死循环来不停的从队列中读取消息，并处理，如果队列中<br>有消息，则直接获取到，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成<br>大量的资源浪费，这个时候，我们可以使用之前讲的 blpop/brpop 。</p><h3 id="7-2-延迟消息队列"><a href="#7-2-延迟消息队列" class="headerlink" title="7.2 延迟消息队列"></a>7.2 延迟消息队列</h3><p>延迟队列可以通过 zset 来实现，因为 zset 中有一个 score，我们可以把时间作为 score，将 value 存到<br>redis 中，然后通过轮询的方式，去不断的读取消息出来。<br>首先，如果消息是一个字符串，直接发送即可，如果是一个对象，则需要对对象进行序列化，这里我们<br>使用 JSON 来实现序列化和反序列化。<br>所以，首先在项目中，添加 JSON 依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.10.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>接下来，构造一个消息对象：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class JavaboyMessage {</span><br><span class="line">private String id;</span><br><span class="line">private Object data;</span><br><span class="line">@Override</span><br><span class="line">public String toString() {</span><br><span class="line">return "JavaboyMessage{" +</span><br><span class="line">"id='" + id + '\'' +</span><br><span class="line">", data=" + data +</span><br><span class="line">'}';</span><br><span class="line">}</span><br><span class="line">public String getId() {</span><br><span class="line">return id;</span><br><span class="line">}</span><br><span class="line">public void setId(String id) {</span><br><span class="line">this.id = id;</span><br><span class="line">}</span><br><span class="line">public Object getData() {</span><br><span class="line">return data;</span><br><span class="line">}</span><br><span class="line">public void setData(Object data) {</span><br><span class="line">this.data = data;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来封装一个消息队列：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public class DelayMsgQueue {</span><br><span class="line">private Jedis jedis;</span><br><span class="line">private String queue;</span><br><span class="line">public DelayMsgQueue(Jedis jedis, String queue) {</span><br><span class="line">this.jedis = jedis;</span><br><span class="line">this.queue = queue;</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line">* 消息入队</span><br><span class="line">*</span><br><span class="line">* @param data 要发送的消息</span><br><span class="line">*/</span><br><span class="line">public void queue(Object data) {</span><br><span class="line">//构造一个 JavaboyMessage</span><br><span class="line">JavaboyMessage msg = new JavaboyMessage();</span><br><span class="line">msg.setId(UUID.randomUUID().toString());</span><br><span class="line">msg.setData(data);</span><br><span class="line">//序列化</span><br><span class="line">try {</span><br><span class="line">String s = new ObjectMapper().writeValueAsString(msg);</span><br><span class="line">System.out.println("msg publish:" + new Date());</span><br><span class="line">//消息发送，score 延迟 5 秒</span><br><span class="line">jedis.zadd(queue, System.currentTimeMillis() + 5000, s);</span><br><span class="line">} catch (JsonProcessingException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line">* 消息消费</span><br><span class="line">*/</span><br><span class="line">public void loop() {</span><br><span class="line">while (!Thread.interrupted()) {</span><br><span class="line">//读取 score 在 0 到当前时间戳之间的消息</span><br><span class="line">Set&lt;String&gt; zrange = jedis.zrangeByScore(queue, 0,</span><br><span class="line">System.currentTimeMillis(), 0, 1);</span><br><span class="line">if (zrange.isEmpty()) {</span><br><span class="line">//如果消息是空的，则休息 500 毫秒然后继续</span><br><span class="line">try {</span><br><span class="line">Thread.sleep(500);</span><br><span class="line">} catch (InterruptedException e) {</span><br><span class="line">break;</span><br><span class="line">}</span><br><span class="line">continue;</span><br><span class="line">}</span><br><span class="line">//如果读取到了消息，则直接读取消息出来</span><br><span class="line">String next = zrange.iterator().next();</span><br><span class="line">if (jedis.zrem(queue, next) &gt; 0) {</span><br><span class="line">//抢到了，接下来处理业务</span><br><span class="line">try {</span><br><span class="line">JavaboyMessage msg = new ObjectMapper().readValue(next,</span><br><span class="line">JavaboyMessage.class);</span><br><span class="line">System.out.println("receive msg:" + msg);</span><br><span class="line">} catch (JsonProcessingException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class DelayMsgTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(jedis -&gt; {</span><br><span class="line">//构造一个消息队列</span><br><span class="line">DelayMsgQueue queue = new DelayMsgQueue(jedis, "javaboy-delayqueue");</span><br><span class="line">//构造消息生产者</span><br><span class="line">Thread producer = new Thread(){</span><br><span class="line">@Override</span><br><span class="line">public void run() {</span><br><span class="line">for (int i = 0; i &lt; 5; i++) {</span><br><span class="line">queue.queue("www.javaboy.org&gt;&gt;&gt;&gt;" + i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">//构造一个消息消费者</span><br><span class="line">Thread consumer = new Thread(){</span><br><span class="line">@Override</span><br><span class="line">public void run() {</span><br><span class="line">queue.loop();</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">//启动</span><br><span class="line">producer.start();</span><br><span class="line">consumer.start();</span><br><span class="line">//休息 7 秒后，停止程序</span><br><span class="line">try {</span><br><span class="line">Thread.sleep(7000);</span><br><span class="line">consumer.interrupt();</span><br><span class="line">} catch (InterruptedException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8-再谈-Bit-操作"><a href="#8-再谈-Bit-操作" class="headerlink" title="8.再谈 Bit 操作"></a>8.再谈 Bit 操作</h2><h3 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h3><p>用户一年的签到记录，如果你用 string 类型来存储，那你需要 365 个 key/value，操作起来麻烦。通过<br>位图可以有效的简化这个操作。<br>它的统计很简单：<br>01111000111<br>每天的记录占一个位，365 天就是 365 个位，大概 46 个字节，这样可以有效的节省存储空间，如果有<br>一天想要统计用户一共签到了多少天，统计 1 的个数即可。<br>对于位图的操作，可以直接操作对应的字符串（get/set），可以直接操作位（getbit/setbit）.</p><h3 id="8-2-基本操作"><a href="#8-2-基本操作" class="headerlink" title="8.2 基本操作"></a>8.2 基本操作</h3><p>Redis 的基本操作可以归为两大类：</p><h4 id="8-2-1-零存整取"><a href="#8-2-1-零存整取" class="headerlink" title="8.2.1 零存整取"></a>8.2.1 零存整取</h4><p>例如存储一个 Java 字符串：</p><table><thead><tr><th align="center">字符</th><th>ASCII</th><th>二进制</th></tr></thead><tbody><tr><td align="center">J</td><td>74</td><td>01001010</td></tr><tr><td align="center">a</td><td>97</td><td>01100001</td></tr><tr><td align="center">v</td><td>118</td><td>01110110</td></tr></tbody></table><p>接下来去存储：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210524003422.png" alt="image-20210524003422814"></p><h4 id="8-2-1-整存零取"><a href="#8-2-1-整存零取" class="headerlink" title="8.2.1 整存零取"></a>8.2.1 整存零取</h4><p>存一个字符串进去，但是通过位操作获取字符串。</p><h3 id="8-3-统计"><a href="#8-3-统计" class="headerlink" title="8.3 统计"></a>8.3 统计</h3><p>例如签到记录：<br>01111000111<br>1 表示签到的天，0 表示没签到，统计总的签到天数：<br>可以使用 bitcount。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210524003506.png" alt="image-20210524003506621"></p><p>bitcount 中，可以统计的起始位置，但是注意，这个起始位置是指字符的起始位置而不是 bit 的起始位<br>置。<br>除了 bitcount 之外，还有一个 bitpos。bitpos 可以用来统计在指定范围内出现的第一个 1 或者 0 的位<br>置，这个命令中的起始和结束位置都是字符索引，不是 bit 索引，一定要注意。</p><h3 id="8-4-Bit-批处理"><a href="#8-4-Bit-批处理" class="headerlink" title="8.4 Bit 批处理"></a>8.4 Bit 批处理</h3><p>在 Redis 3.2 之后，新加了一个功能叫做 bitfiled ，可以对 bit 进行批量操作。<br>例如：<br>BITFIELD name get u4 0<br>表示获取 name 中的位，从 0 开始获取，获取 4 个位，返回一个无符号数字。<br>    u 表示无符号数字<br>    i 表示有符号数字，有符号的话，第一个符号就表示符号位，1 表示是一个负数。</p><p>bitfiled 也可以一次执行多个操作。</p><p>GET：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210524003544.png" alt="image-20210524003544657"></p><p>SET：</p><p>用无符号的 98 转成的 8 位二进制数字，代替从第 8 位开始接下来的 8 位数字。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210524003557.png" alt="image-20210524003557746"></p><p>INCRBY：</p><p>对置顶范围进行自增操作，自增操作可能会出现溢出，既可能是向上溢出，也可能是向下溢出。Redis<br>中对于溢出的处理方案是折返。8 位无符号数 255 加 1 溢出变为 0；8 位有符号数 127，加 1 变为 -<br>128.</p><p>也可以修改默认的溢出策略，可以改为 fail ，表示执行失败。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITFIELD name overflow fail incrby u2 6 1</span><br></pre></td></tr></tbody></table></figure><p>sat 表示留在在最大/最小值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITFIELD name overflow sat incrby u2 6 1</span><br></pre></td></tr></tbody></table></figure><h2 id="9-HyperLogLog"><a href="#9-HyperLogLog" class="headerlink" title="9.HyperLogLog"></a>9.HyperLogLog</h2><p>一般我们评估一个网站的访问量，有几个主要的参数：<br>    pv，Page View，网页的浏览量<br>    uv，User View，访问的用户</p><p>一般来说，pv 或者 uv 的统计，可以自己来做，也可以借助一些第三方的工具，比如 cnzz，友盟 等。<br>如果自己实现，pv 比较简单，可以直接通过 Redis 计数器就能实现。但是 uv 就不一样，uv 涉及到另<br>外一个问题，去重。<br>我们首先需要在前端给每一个用户生成一个唯一 id，无论是登录用户还是未登录用户，都要有一个唯一<br>id，这个 id 伴随着请求一起到达后端，在后端我们通过 set 集合中的 sadd 命令来存储这个 id，最后通<br>过 scard 统计集合大小，进而得出 uv 数据。<br>如果是千万级别的 UV，需要的存储空间就非常惊人。而且，像 UV 统计这种，一般也不需要特别精<br>确，800w 的 uv 和 803w 的 uv，其实差别不大。所以，我们要介绍今天的主角—HyperLogLog<br>Redis 中提供的 HyperLogLog 就是专门用来解决这个问题的，HyperLogLog 提供了一套不怎么精确但<br>是够用的去重方案，会有误差，官方给出的误差数据是 0.81%，这个精确度，统计 UV 够用了。<br>HyperLogLog 主要提供了两个命令：pfadd 和 pfcount。<br>pfadd 用来添加记录，类似于 sadd ，添加过程中，重复的记录会自动去重。<br>pfcount 则用来统计数据。</p><p>数据量少的时候看不出来误差。<br>在 Java 中，我们多添加几个元素：    </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HyperLogLog {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(jedis -&gt; {</span><br><span class="line">for (int i = 0; i &lt; 1000; i++) {</span><br><span class="line">jedis.pfadd("uv", "u" + i, "u" + (i + 1));</span><br><span class="line">}</span><br><span class="line">long uv = jedis.pfcount("uv");</span><br><span class="line">System.out.println(uv);//理论值是 1001</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>理论值是 1001，实际打印出来 994，有误差，但是在可以接受的范围内。<br>除了 pfadd 和 pfcount 之外，还有一个命令 pfmerge ，合并多个统计结果，在合并的过程中，会自动<br>去重多个集合中重复的元素。</p><h2 id="10-布隆过滤器"><a href="#10-布隆过滤器" class="headerlink" title="10.布隆过滤器"></a>10.布隆过滤器</h2><h3 id="10-1-场景重现"><a href="#10-1-场景重现" class="headerlink" title="10.1 场景重现"></a>10.1 场景重现</h3><p>我们用 HyperLogLog 来估计一个数，有偏差但是也够用。HyperLogLog 主要提供两个方法：<br>pfadd<br>pfcount<br>但是 HyperLogLog 没有判断是否包含的方法，例如 pfexists 、pfcontains 等。没有这样的方法存在，<br>但是我们有这样的业务需求。<br>例如刷今日头条，推送的内容有相似的，但是没有重复的。这就涉及到如何在推送的时候去重？<br>解决方案很多，例如将用户的浏览历史记录下来，然后每次推送时去比较该条消息是否已经给用户推送<br>了。但是这种方式效率极低，不推荐。<br>解决这个问题，就要靠我们今天要说的布隆过滤器。</p><h3 id="10-2-Bloom-Filter-介绍"><a href="#10-2-Bloom-Filter-介绍" class="headerlink" title="10.2 Bloom Filter 介绍"></a>10.2 Bloom Filter 介绍</h3><p>Bloom Filter 专门用来解决我们上面所说的去重问题的，使用 Bloom Filter 不会像使用缓存那么浪费空<br>间。当然，他也存在一个小小问题，就是不太精确。<br>Bloom Filter 相当于是一个不太精确的 set 集合，我们可以利用它里边的 contains 方法去判断某一个对<br>象是否存在，但是需要注意，这个判断不是特别精确。一般来说，通过 contains 判断某个值不存在，<br>那就一定不存在，但是判断某个值存在的话，则他可能不存在。</p><p>以今日头条为例，假设我们将用户的浏览记录用 B 表示，A 表示用户没有浏览的新闻，现在要给用户推<br>送消息，先去 B 里边判断这条消息是否已经推送过，如果判断结果说没推送过（B 里边没有这条记<br>录），那就一定没有推送过。如果判断结果说有推送过（B 里边也有可能没有这条消息），这个时候该<br>条消息就不会推送给用户，导致用户错过该条消息，当然这是概率极低的。</p><h3 id="10-3-Bloom-Filter-原理"><a href="#10-3-Bloom-Filter-原理" class="headerlink" title="10.3 Bloom Filter 原理"></a>10.3 Bloom Filter 原理</h3><p>每一个布隆过滤器，在 Redis 中都对应了一个大型的位数组以及几个不同的 hash 函数。</p><p>所谓的 add 操作是这样的：<br>首先根据几个不同的 hash 函数给元素进行 hash 运算一个整数索引值，拿到这个索引值之后，对位数<br>组的长度进行取模运算，得到一个位置，每一个 hash 函数都会得到一个位置，将位数组中对应的位置<br>设置位 1 ，这样就完成了添加操作。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210525180124.png" alt="image-20210525180124216"></p><p>当判断元素是否粗存在时，依然先对元素进行 hash 运算，将运算的结果和位数组取模，然后去对应的<br>位置查看是否有相应的数据，如果有，表示元素可能存在（因为这个有数据的地方也可能是其他元素存<br>进来的），如果没有表示元素一定不存在。<br>Bloom Filter 中，误判的概率和位数组的大小有很大关系，位数组越大，误判概率越小，当然占用的存<br>储空间越大；位数组越小，误判概率越大，当然占用的存储空间就小。</p><h3 id="10-4-Bloom-Filter-安装"><a href="#10-4-Bloom-Filter-安装" class="headerlink" title="10.4 Bloom Filter 安装"></a>10.4 Bloom Filter 安装</h3><p><a href="https://oss.redislabs.com/redisbloom/Quick_Start/">https://oss.redislabs.com/redisbloom/Quick_Start/</a></p><p>这里给大家介绍两种安装方式：</p><ol><li>Docker：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis-redisbloom redislabs/rebloom:latest</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>自己编译安装：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.7</span><br><span class="line">git clone https://github.com/RedisBloom/RedisBloom.git</span><br><span class="line">cd RedisBloom/</span><br><span class="line">make</span><br><span class="line">cd ..</span><br><span class="line">redis-server redis.conf --loadmodule ./RedisBloom/redisbloom.so</span><br></pre></td></tr></tbody></table></figure><p>安装完成后，执行 bf.add 命令，测试安装是否成功。<br>每次启动时都输入 <code>redis-server redis.conf --loadmodule ./RedisBloom/redisbloom.so</code> 比较<br>麻烦，我们可以将要加载的模块在 redis.conf 中提前配置好。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">################################## MODULES #####################################</span><br><span class="line"># Load modules at startup. If the server is not able to load modules</span><br><span class="line"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line">#</span><br><span class="line"># loadmodule /path/to/my_module.so</span><br><span class="line"># loadmodule /path/to/other_module.so</span><br><span class="line">loadmodule /root/redis-5.0.7/RedisBloom/redisbloom.so</span><br></pre></td></tr></tbody></table></figure><p>最下面这一句，配置完成后，以后只需要 redis-server redis.conf 来启动 Redis 即可。</p><h3 id="10-5-基本用法"><a href="#10-5-基本用法" class="headerlink" title="10.5 基本用法"></a>10.5 基本用法</h3><p>主要是两类命令，添加和判断是否存在。<br>bf.add\bf.madd 添加和批量添加<br>bf.exists\bf.mexists 判断是否存在和批量判断</p><p>使用 Jedis 操作布隆过滤器，首先添加依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.redislabs&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jrebloom&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后进行测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class BloomFilter {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">GenericObjectPoolConfig config = new GenericObjectPoolConfig();</span><br><span class="line">config.setMaxIdle(300);</span><br><span class="line">config.setMaxTotal(1000);</span><br><span class="line">config.setMaxWaitMillis(30000);</span><br><span class="line">config.setTestOnBorrow(true);</span><br><span class="line">JedisPool pool = new JedisPool(config, "192.168.91.128", 6379, 30000,</span><br><span class="line">"javaboy");</span><br><span class="line">Client client = new Client(pool);</span><br><span class="line">//存入数据</span><br><span class="line">for (int i = 0; i &lt; 100000; i++) {</span><br><span class="line">client.add("name", "javaboy-" + i);</span><br><span class="line">}</span><br><span class="line">//检查数据是否存在</span><br><span class="line">boolean exists = client.exists("name", "javaboy-9999999");</span><br><span class="line">System.out.println(exists);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>默认情况下，我们使用的布隆过滤器它的错误率是 0.01 ，默认的元素大小是 100。但是这两个参数也<br>是可以配置的。<br>我们可以调用 bf.reserve 方法进行配置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BF.RESERVE k1 0.0001 1000000</span><br></pre></td></tr></tbody></table></figure><p>第一个参数是 key，第二个参数是错误率，错误率越低，占用的空间越大，第三个参数预计存储的数<br>量，当实际数量超出预计数量时，错误率会上升。</p><h3 id="10-6-典型场景"><a href="#10-6-典型场景" class="headerlink" title="10.6 典型场景"></a>10.6 典型场景</h3><p>前面所说的新闻推送过滤算是一个应用场景。<br>解决 Redis 穿透或者又叫缓存击穿问题。<br>假设我有 1亿 条用户数据，现在查询用户要去数据库中查，效率低而且数据库压力大，所以我们会把请<br>求首先在 Redis 中处理（活跃用户存在 Redis 中），Redis 中没有的用户，再去数据库中查询。<br>现在可能会存在一种恶意请求，这个请求携带上了很多不存在的用户，这个时候 Redis 无法拦截下来请<br>求，所以请求会直接跑到数据库里去。这个时候，这些恶意请求会击穿我们的缓存，甚至数据库，进而<br>引起“雪崩效应”。<br>为了解决这个问题，我们就可以使用布隆过滤器。将 1亿条用户数据存在 Redis 中不现实，但是可以存<br>在布隆过滤器中，请求来了，首先去判断数据是否存在，如果存在，再去数据库中查询，否则就不去数<br>据库中查询。</p><h2 id="11-Redis-限流"><a href="#11-Redis-限流" class="headerlink" title="11.Redis 限流"></a>11.Redis 限流</h2><h3 id="11-1-预备知识"><a href="#11-1-预备知识" class="headerlink" title="11.1 预备知识"></a>11.1 预备知识</h3><p>Pipeline（管道）本质上是由客户端提供的一种操作。Pipeline 通过调整指令列表的读写顺序，可以大<br>幅度的节省 IO 时间，提高效率。</p><h3 id="11-2-简单限流"><a href="#11-2-简单限流" class="headerlink" title="11.2 简单限流"></a>11.2 简单限流</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class RateLimiter {</span><br><span class="line">private Jedis jedis;</span><br><span class="line">public RateLimiter(Jedis jedis) {</span><br><span class="line">this.jedis = jedis;</span><br><span class="line">}</span><br><span class="line">/**</span><br><span class="line">* 限流方法</span><br><span class="line">* @param user 操作的用户，相当于是限流的对象</span><br><span class="line">* @param action 具体的操作</span><br><span class="line">* @param period 时间窗，限流的周期</span><br><span class="line">* @param maxCount 限流的次数</span><br><span class="line">* @return</span><br><span class="line">*/</span><br><span class="line">public boolean isAllowed(String user, String action, int period, int</span><br><span class="line">maxCount) {</span><br><span class="line">//1.数据用 zset 保存，首先生成一个 key</span><br><span class="line">String key = user + "-" + action;</span><br><span class="line">//2.获取当前时间戳</span><br><span class="line">long nowTime = System.currentTimeMillis();</span><br><span class="line">//3.建立管道</span><br><span class="line">Pipeline pipelined = jedis.pipelined();</span><br><span class="line">pipelined.multi();</span><br><span class="line">//4.将当前的操作先存储下来</span><br><span class="line">pipelined.zadd(key, nowTime, String.valueOf(nowTime));</span><br><span class="line">//5.移除时间窗之外的数据</span><br><span class="line">pipelined.zremrangeByScore(key, 0, nowTime - period * 1000);</span><br><span class="line">//6.统计剩下的 key</span><br><span class="line">Response&lt;Long&gt; response = pipelined.zcard(key);</span><br><span class="line">//7.将当前 key 设置一个过期时间，过期时间就是时间窗</span><br><span class="line">pipelined.expire(key, period + 1);</span><br><span class="line">//关闭管道</span><br><span class="line">pipelined.exec();</span><br><span class="line">pipelined.close();</span><br><span class="line">//8.比较时间窗内的操作数</span><br><span class="line">return response.get() &lt;= maxCount;</span><br><span class="line">}</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">Redis redis = new Redis();</span><br><span class="line">redis.execute(j -&gt; {</span><br><span class="line">RateLimiter rateLimiter = new RateLimiter(j);</span><br><span class="line">for (int i = 0; i &lt; 20; i++) {</span><br><span class="line">System.out.println(rateLimiter.isAllowed("javaboy", "publish",</span><br><span class="line">5, 3));</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-3-深入限流操作"><a href="#11-3-深入限流操作" class="headerlink" title="11.3 深入限流操作"></a>11.3 深入限流操作</h3><p>Redis4.0 开始提供了一个 Redis-Cell 模块，这个模块使用漏斗算法，提供了一个非常好用的限流指令。<br>漏斗算法就像名字一样，是一个漏斗，请求从漏斗的大口进，然后从小口出进入到系统中，这样，无论<br>是多大的访问量，最终进入到系统中的请求，都是固定的。<br>使用漏斗算法，需要我们首先安装 Redis-Cell 模块：<br><a href="https://github.com/brandur/redis-cell">https://github.com/brandur/redis-cell</a><br>安装步骤：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/brandur/redis-cell/releases/download/v0.2.4/redis-cellv0.2.4-</span><br><span class="line">x86_64-unknown-linux-gnu.tar.gz</span><br><span class="line">tar -zxvf redis-cell-v0.2.4-x86_64-unknown-linux-gnu.tar.gz</span><br><span class="line">mkdir redis-cell</span><br><span class="line">mv libredis_cell.d ./redis-cell</span><br><span class="line">mv libredis_cell.so ./redis-cell</span><br></pre></td></tr></tbody></table></figure><p>接下来修改 redis.conf 文件，加载额外的模块：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadmodule /root/redis-5.0.7/redis-cell/libredis_cell.so</span><br></pre></td></tr></tbody></table></figure><p>然后，启动 Redis：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></tbody></table></figure><h5 id="Redis-中加入-Redis-Cell-模块，配置文件出错-version-GLIBC-2-18-not-found"><a href="#Redis-中加入-Redis-Cell-模块，配置文件出错-version-GLIBC-2-18-not-found" class="headerlink" title="Redis 中加入 Redis-Cell 模块，配置文件出错 version GLIBC_2.18 not found"></a>Redis 中加入 Redis-Cell 模块，配置文件出错 version <code>GLIBC_2.18</code> not found</h5><p>添加 Redis-Cell 模块到 redis.conf 配置文件中，启动就会报下面的错误。</p><p>最后配置了 redis.log 的日志发现是缺少 CLIBC_2.18 这个文件，经过一系列下载就解决了这个问题。</p><p>参考链接 ： <a href="https://blog.csdn.net/qq_43647359/article/details/105864565">https://blog.csdn.net/qq_43647359/article/details/105864565</a></p><ol><li>下载 glibc 文件</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 下载 glibc 压缩包</span><br><span class="line">wget http://ftp.gnu.org/gnu/glibc/glibc-2.18.tar.gz </span><br><span class="line">// 解压 glibc 压缩包</span><br><span class="line">tar -zxvf glibc-2.18.tar.gz</span><br><span class="line">// 进入解压后的目录</span><br><span class="line">cd glibc-2.18</span><br><span class="line">// 创建编译目录</span><br><span class="line">mkdir build</span><br><span class="line">// 进入到创建好的目录</span><br><span class="line">cd build/</span><br><span class="line">// 编译、安装</span><br><span class="line">../configure --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin</span><br><span class="line"></span><br><span class="line">// 这一步比较慢</span><br><span class="line">make -j 8</span><br><span class="line"></span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>redis 启动成功后，如果存在 CL.THROTTLE 命令，说明 redis-cell 已经安装成功了。</p><p>CL.THROTTLE 命令一共有五个参数</p><ol><li>第一个参数是 key</li><li>第二个参数是漏斗的容量</li><li>时间窗内可以操作的次数</li><li>时间窗</li><li>每次漏出数量</li></ol><p>执行完成后，返回值也有五个：</p><ol><li>第一个 0 表示允许，1表示拒绝</li><li>第二个参数是漏斗的容量</li><li>第三个参数是漏斗的剩余空间</li><li>如果拒绝了，多长时间后，可以再试</li><li>多长时间后，漏斗会完全空出来</li></ol><h3 id="11-4-Lettuce扩展"><a href="#11-4-Lettuce扩展" class="headerlink" title="11.4 Lettuce扩展"></a>11.4 Lettuce扩展</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl.throttle &lt;key&gt; &lt;max_burst&gt; &lt;count per period&gt; &lt;period&gt; [&lt;quantity&gt;]</span><br></pre></td></tr></tbody></table></figure><p>首先定义一个命令接口：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface RedisCommandInterface extends Commands {</span><br><span class="line">@Command("CL.THROTTLE ?0 ?1 ?2 ?3 ?4")</span><br><span class="line">List&lt;Object&gt; throttle(String key, Long init, Long count, Long period, Long</span><br><span class="line">quota);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>定义完成后，接下来，直接调用即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ThrottleTest {</span><br><span class="line">public static void main(String[] args) {</span><br><span class="line">RedisClient redisClient =</span><br><span class="line">RedisClient.create("redis://javaboy@192.168.91.128");</span><br><span class="line">StatefulRedisConnection&lt;String, String&gt; connect = redisClient.connect();</span><br><span class="line">RedisCommandFactory factory = new RedisCommandFactory(connect);</span><br><span class="line">RedisCommandInterface commands =</span><br><span class="line">factory.getCommands(RedisCommandInterface.class);</span><br><span class="line">List&lt;Object&gt; list = commands.throttle("javaboy-publish", 10L, 10L, 60L,</span><br><span class="line">1L);</span><br><span class="line">System.out.println(list);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12-Redis-之-Geo"><a href="#12-Redis-之-Geo" class="headerlink" title="12.Redis 之 Geo"></a>12.Redis 之 Geo</h2><p>Redis3.2 开始提供了 GEO 模块。该模块也使用了 GeoHash 算法。</p><h3 id="1-GeoHash"><a href="#1-GeoHash" class="headerlink" title="1.GeoHash"></a>1.GeoHash</h3><p>核心思想：GeoHash 是一种地址编码方法，使用这种方式，能够将二维的空间经纬度数据编码成一个<br>一维字符串。<br>地球上经纬度的划分：</p><p>以经过伦敦格林尼治天文台旧址的经线为 0 度经线，向东就是东经，向西就是西经。如果我们将西经定<br>义负，经度的范围就是 [-180,180]。<br>纬度北纬 90 度到南纬 90 度，如果我们将南纬定义负，则纬度的范围就是 [-90,90]。<br>接下来，以本初子午线和赤道为界，我们可以将地球上的点分配到一个二维坐标中：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210526010744.png" alt="image-20210526010744884"></p><p>GeoHash 算法就是基于这样的思想，划分的次数越多，区域越多，每个区域中的面积就更小了，精确<br>度就会提高。<br>GeoHash 具体算法：<br>以北京天安门广场为例（39.9053908600,116.3980007200）：</p><ol><li>纬度的范围在 (-90,90) 之间，中间值为 0，对于 39.9053908600 值落在 (0,90),因此得到的值为 1</li><li>(0,90) 的中间值为 45，39.9053908600 落在 (0,45) 之间，因此得到一个 0</li><li>(0,45) 的中间值为 22.5，39.9053908600 落在 (22.5,45)之间，因此得到一个 1</li><li>….</li></ol><p>这样，我们得到的纬度二进制是 101<br>按照同样的步骤，我们可以算出来经度的二进制是 110<br>接下来将经纬度合并（经度占偶数位，纬度占奇数位）：<br>111001<br>按照 Base32 （0-9,b-z,去掉 a i l 0）对合并后的二进制数据进行编码，编码的时候，先将二进制转换为<br>十进制，然后进行编码。</p><p>将编码得到的字符串，可以拿去 geohash.org 网站上解析。<br>GeoHash 有哪些特点：</p><ol><li>用一个字符串表示经纬度</li><li>GeoHash 表示的是一个区域，而不是一个点。</li><li>编码格式有规律，例如一个地址编码之后的格式是 123，另一个地址编码之后的格式是 123456，<br>从字符串上就可以看出来，123456 处于 123 之中。</li></ol><h3 id="Redis-中使用"><a href="#Redis-中使用" class="headerlink" title="Redis 中使用"></a>Redis 中使用</h3><p>添加地址：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GEOADD city 116.3980007200 39.9053908600 beijing</span><br><span class="line">GEOADD city 114.0592002900 22.5536230800 shenzhen</span><br></pre></td></tr></tbody></table></figure><p>查看两个地址之间的距离：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEODIST city beijing shenzhen km</span><br><span class="line">"1942.5435"</span><br></pre></td></tr></tbody></table></figure><p>获取元素的位置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOPOS city beijing</span><br><span class="line">1) 1) "116.39800339937210083"</span><br><span class="line">2) "39.90539144357683909"</span><br></pre></td></tr></tbody></table></figure><p>获取元素 hash 值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEOHASH city beijing</span><br><span class="line">1) "wx4g08w3y00"</span><br></pre></td></tr></tbody></table></figure><p>通过 hash 值可以查看定位。<a href="http://geohash.org/wx4g08w3y00">http://geohash.org/wx4g08w3y00</a><br>查看附近的人：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER city beijing 200 km count 3 asc</span><br><span class="line">1) "beijing"</span><br></pre></td></tr></tbody></table></figure><p>以北京为中心，方圆 200km 以内的城市找出来 3 个，按照远近顺序排列，这个命令不会排除 北京。<br>当然，也可以根据经纬度来查询（将 member 换成对应的经纬度）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUS city 116.3980007200 39.9053908600 2000 km withdist</span><br><span class="line">withhash withcoord count 4 desc</span><br></pre></td></tr></tbody></table></figure><p><a href="http://www.gpsspg.com/maps.htm">http://www.gpsspg.com/maps.htm</a></p><h2 id="13-Redis-之-Scan"><a href="#13-Redis-之-Scan" class="headerlink" title="13.Redis 之 Scan"></a>13.Redis 之 Scan</h2><h3 id="1-简单介绍"><a href="#1-简单介绍" class="headerlink" title="1.简单介绍"></a>1.简单介绍</h3><p>scan 实际上是 keys 的一个升级版。<br>可以用 keys 来查询 key，在查询的过程中，可以使用通配符。keys 虽然用着还算方便，但是没有分页<br>功能。同时因为 Redis 是单线程，所以 key 的执行会比较消耗时间，特别是当数据量大的时候，影响整<br>个程序的运行。<br>为了解决 keys 存在的问题，从 Redis2.8 中开始，引入了 scan。<br>scan 具备 keys 的功能，但是不会阻塞线程，而且可以控制每次返回的结果数。</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h3><p>首先准备 10000 条测试数据：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScanTest</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Redis redis = <span class="keyword">new</span> Redis();</span><br><span class="line">redis.execute(jedis -&gt; {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) {</span><br><span class="line">jedis.set(<span class="string">"k"</span> + i, <span class="string">"v"</span> + i);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>scan 命令一共提供了三个参数，第一个 cursor，第二个参数是 key，第三个参数是 limit。<br>cursor 实际上是指一维数组的位置索引，limit 则是遍历的一维数组个数（所以每次返回的数据大小可<br>能不确定）。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan 0 match k8* count 1000</span><br></pre></td></tr></tbody></table></figure><h3 id="3-原理"><a href="#3-原理" class="headerlink" title="3.原理"></a>3.原理</h3><p>SCAN 的遍历顺序。<br>假设目有三条数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "key1"</span><br><span class="line">2) "db_number"</span><br><span class="line">3) "myKey"</span><br><span class="line">127.0.0.1:6379&gt; scan 0 match * count 1</span><br><span class="line">1) "2"</span><br><span class="line">2) 1) "key1"</span><br><span class="line">127.0.0.1:6379&gt; scan 2 match * count 1</span><br><span class="line">1) "1"</span><br><span class="line">2) 1) "myKey"</span><br><span class="line">127.0.0.1:6379&gt; scan 1 match * count 1</span><br><span class="line">1) "3"</span><br><span class="line">2) 1) "db_number"</span><br><span class="line">127.0.0.1:6379&gt; scan 3 match * count 1</span><br><span class="line">1) "0"</span><br><span class="line">2) (empty list or set)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></tbody></table></figure><p>在遍历的过程中，大家发现游标的顺序是 0 2 1 3，从十进制来看好像没有规律，但是从转为二进制，<br>则是有规律的：</p><p><code>00-&gt;10-&gt;01-&gt;11</code></p><p>这种规律就是高位进1，传统的二进制加法，是从右往左加，这里是从左往右加。<br>实际上，在 Redis 中，它的具体计算流程给是这样：</p><ol><li>将要计算的数字反转</li><li>给反转后的数字加 1</li><li>再反转</li></ol><p>那么为什么不是按照 0、1、2、3、4…这样的顺序遍历呢？因为主要考虑到两个问题：</p><ol><li>字典扩容</li><li>字典缩容</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210526165224.png" alt="image-20210526165224745"></p><p>假如我们将要访问 110 时，发生了扩容，此时 scan 就会从 0110 开始遍历，之前已经被遍历过的元素<br>就不会被重复遍历了。<br>假如我们将要访问 110 时，发生缩容，此时 scan 就会从 10 开始遍历，这个时候，也会遍历到 010，<br>但是 010 之前的不会再被遍历了。所以，在发生缩容的时候，可能返回重复的元素。</p><h3 id="4-其他用法"><a href="#4-其他用法" class="headerlink" title="4.其他用法"></a>4.其他用法</h3><p>scan 是一系列的指令，除了遍历所有的 key 之外，也可以遍历某一个类型的 key，对应的命令有：<br>zscan–&gt;zset<br>hscan–&gt;hash<br>sscan–&gt;set</p><h2 id="14-Redis-单线程如何处理高并发"><a href="#14-Redis-单线程如何处理高并发" class="headerlink" title="14.Redis 单线程如何处理高并发"></a>14.Redis 单线程如何处理高并发</h2><h3 id="1-阻塞-IO-与非阻塞-IO"><a href="#1-阻塞-IO-与非阻塞-IO" class="headerlink" title="1.阻塞 IO 与非阻塞 IO"></a>1.阻塞 IO 与非阻塞 IO</h3><p>Java 在 JDK1.4 中引入 NIO，但是也有很多人在使用阻塞 IO，这两种 IO 有什么区别？<br>在阻塞模式下，如果你从数据流中读取不到指定大小的数据两，IO 就会阻塞。比如已知会有 10 个字节<br>发送过来，但是我目前只收到 4 个，还剩六个，此时就会发生阻塞。如果是非阻塞模式，虽然此时只收<br>到 4 个字节，但是读到 4 个字节就会立即返回，不会傻傻等着，等另外 6 个字节来的时候，再去继续读<br>取。<br>所以阻塞 IO 性能低于 非阻塞 IO。<br>如果有一个 Web 服务器，使用阻塞 IO 来处理请求，那么每一个请求都需要开启一个新的线程；但是如<br>果使用了非阻塞 IO，基本上一个小小线程池就够用了，因为不会发生阻塞，每一个线程都能够高效利<br>用。</p><p>Java 在 JDK1.4 中引入 NIO，但是也有很多人在使用阻塞 IO，这两种 IO 有什么区别？<br>在阻塞模式下，如果你从数据流中读取不到指定大小的数据两，IO 就会阻塞。比如已知会有 10 个字节<br>发送过来，但是我目前只收到 4 个，还剩六个，此时就会发生阻塞。如果是非阻塞模式，虽然此时只收<br>到 4 个字节，但是读到 4 个字节就会立即返回，不会傻傻等着，等另外 6 个字节来的时候，再去继续读<br>取。<br>所以阻塞 IO 性能低于 非阻塞 IO。<br>如果有一个 Web 服务器，使用阻塞 IO 来处理请求，那么每一个请求都需要开启一个新的线程；但是如<br>果使用了非阻塞 IO，基本上一个小小线程池就够用了，因为不会发生阻塞，每一个线程都能够高效利<br>用。</p><h3 id="2-Redis-的线程模型"><a href="#2-Redis-的线程模型" class="headerlink" title="2.Redis 的线程模型"></a>2.Redis 的线程模型</h3><p>首先一点，Redis 是单线程。单线程如何解决高并发问题的？<br>实际上，能够处理高并发的单线程应用不仅仅是 Redis，除了 Redis 之外，还有 NodeJS、Nginx 等等<br>也是单线程。</p><p>Redis 虽然是单线程，但是运行很快，主要有如下几方面原因：</p><ol><li>Redis 中的所有数据都是基于内存的，所有的计算也都是内存级别的计算，所以快。</li><li>Redis 是单线程的，所以有一些时间复杂度高的指令，可能会导致 Redis 卡顿，例如 keys。</li><li>Redis 在处理并发的客户端连接时，使用了非阻塞 IO。</li></ol><p>在使用非阻塞 IO 时，有一个问题，就是线程如何知道剩下的数据来了？<br>这里就涉及到一个新的概念叫做多路复用，本质上就是一个事件轮询 API。</p><ol start="4"><li>Redis 会给每一个客户端指令通过队列来排队进行顺序处理。</li><li>Redis 做出响应时，也会有一个响应的队列。</li></ol><h2 id="15-Redis-通信协议"><a href="#15-Redis-通信协议" class="headerlink" title="15.Redis 通信协议"></a>15.Redis 通信协议</h2><p>Redis 通信使用了文本协议，文本协议比较费流量，但是 Redis 作者认为数据库的瓶颈不在于网络流<br>量，而在于内部逻辑，所以采用了这样一个费流量的文本协议。<br>这个文本协议叫做 Redis Serialization Protocol，简称 RESP。<br>Redis 协议将传输的数据结构分为 5 种最小单元，单元结束时，加上回车换行符 \r\n。</p><ol><li>单行字符串以 + 开始，例如 +javaboy.org\r\n</li><li>多行字符串以 $ 开始，后面加上字符串长度，例如 $11\r\njavaboy.org\r\n</li><li>整数值以: 开始，例如 :1024\r\n</li><li>错误消息以 - 开始</li><li>数组以 * 开始，后面加上数组长度。<br>需要注意的是，如果是客户端连接服务端，只能使用第 5 种。</li></ol><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><p>做两件事情：<br>为了方便客户端连接 Redis，我们关闭 Redis 种的保护模式(在 redis.conf 文件中)<br>protected no<br>同时关闭密码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># requirepass xxxx</span><br></pre></td></tr></tbody></table></figure><p>配置完成后，重启 Redis。</p><h3 id="2-实战"><a href="#2-实战" class="headerlink" title="2. 实战"></a>2. 实战</h3><p>接下来，我们通过 Socket+RESP 来定义两个最最常见的命令 set 和 get。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaboyRedisClient</span> </span>{</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JavaboyRedisClient</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">socket = <span class="keyword">new</span> Socket(<span class="string">"192.168.91.128"</span>, <span class="number">6379</span>);</span><br><span class="line">} <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(<span class="string">"Redis 连接失败"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 执行 Redis 中的 set 命令 [set,key,value]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key, String value)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">"*3"</span>)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"$"</span>)</span><br><span class="line">.append(<span class="string">"set"</span>.length())</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"set"</span>)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"$"</span>)</span><br><span class="line">.append(key.getBytes().length)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(key)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"$"</span>)</span><br><span class="line">.append(value.getBytes().length)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(value)</span><br><span class="line">.append(<span class="string">"\r\n"</span>);</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">socket.getOutputStream().write(sb.toString().getBytes());</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">socket.getInputStream().read(buf);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(buf);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 执行 Redis 中的 get 命令 [get,key]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">sb.append(<span class="string">"*2"</span>)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"$"</span>)</span><br><span class="line">.append(<span class="string">"get"</span>.length())</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"get"</span>)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(<span class="string">"$"</span>)</span><br><span class="line">.append(key.getBytes().length)</span><br><span class="line">.append(<span class="string">"\r\n"</span>)</span><br><span class="line">.append(key)</span><br><span class="line">.append(<span class="string">"\r\n"</span>);</span><br><span class="line">socket.getOutputStream().write(sb.toString().getBytes());</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">socket.getInputStream().read(buf);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(buf);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">String set = <span class="keyword">new</span> JavaboyRedisClient().set(<span class="string">"k1"</span>, <span class="string">"江南一点雨"</span>);</span><br><span class="line">System.out.println(set);</span><br><span class="line">String k1 = <span class="keyword">new</span> JavaboyRedisClient().get(<span class="string">"k1"</span>);</span><br><span class="line">System.out.println(k1);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="16-Redis-持久化"><a href="#16-Redis-持久化" class="headerlink" title="16.Redis 持久化"></a>16.Redis 持久化</h2><p>Redis 是一个缓存工具，也叫做 NoSQL 数据库，既然是数据库，必然支持数据的持久化操作。在 Redis<br>中，数据库持久化一共有两种方案：</p><ol><li>快照方式</li><li>AOF 日志</li></ol><h3 id="1-快照"><a href="#1-快照" class="headerlink" title="1.快照"></a>1.快照</h3><h4 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h4><p>Redis 使用操作系统的多进程机制来实现快照持久化：Redis 在持久化时，会调用 glibc 函数 fork 一个<br>子进程，然后将快照持久化操作完全交给子进程去处理，而父进程则继续处理客户端请求。在这个过程<br>中，子进程能够看到的内存中的数据在子进程产生的一瞬间就固定下来了，再也不会改变，也就是为什<br>么 Redis 持久化叫做 快照。</p><h4 id="1-2-具体配置"><a href="#1-2-具体配置" class="headerlink" title="1.2 具体配置"></a>1.2 具体配置</h4><p>在 Redis 中，默认情况下，快照持久化的方式就是开启的。<br>默认情况下会产生一个 dump.rdb 文件，这个文件就是备份下来的文件。当 Redis 启动时，会自动的去<br>加载这个 rdb 文件，从该文件中恢复数据。<br>具体的配置，在 redis.conf 中：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 表示快照的频率，第一个表示 900 秒内如果有一个键被修改，则进行快照</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"># 快照执行出错后，是否继续处理客户端的写命令</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"># 是否对快照文件进行压缩</span><br><span class="line">rdbcompression yes</span><br><span class="line"># 表示生成的快照文件名</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"># 表示生成的快照文件位置</span><br><span class="line">dir ./</span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-备份流程"><a href="#1-3-备份流程" class="headerlink" title="1.3 备份流程"></a>1.3 备份流程</h4><ol><li><p>在 Redis 运行过程中，我们可以向 Redis 发送一条 save 命令来创建一个快照。但是需要注意，<br>save 是一个阻塞命令，Redis 在收到 save 命令开始处理备份操作之后，在处理完成之前，将不再<br>处理其他的请求。其他命令会被挂起，所以 save 使用的并不多。</p></li><li><p>我们一般可以使用 bgsave，bgsave 会 fork 一个子进程去处理备份的事情，不影响父进程处理客<br>户端请求。</p></li><li><p>我们定义的备份规则，如果有规则满足，也会自动触发 bgsave。</p></li><li><p>另外，当我们执行 shutdown 命令时，也会触发 save 命令，备份工作完成后，Redis 才会关闭。</p></li><li><p>用 Redis 搭建主从复制时，在 从机连上主机之后，会自动发送一条 sync 同步命令，主机收到命令<br>之后，首先执行 bgsave 对数据进行快照，然后才会给从机发送快照数据进行同步。</p></li></ol><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h3><p>与快照持久化不同，AOF 持久化是将被执行的命令追加到 aof 文件末尾，在恢复时，只需要把记录下来<br>的命令从头到尾执行一遍即可。<br>默认情况下，AOF 是没有开启的。我们需要手动开启：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 开启 aof 配置</span><br><span class="line">appendonly yes</span><br><span class="line"># AOF 文件名</span><br><span class="line">appendfilename "appendonly.aof"</span><br><span class="line"># 备份的时机，下面的配置表示每秒钟备份一次</span><br><span class="line">appendfsync everysec</span><br><span class="line"># 表示 aof 文件在压缩时，是否还继续进行同步操作</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"># 表示当目前 aof 文件大小超过上一次重写时的 aof 文件大小的百分之多少的时候，再次进行重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"># 如果之前没有重写过，则以启动时的 aof 大小为依据，同时要求 aof 文件至少要大于 64M</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></tbody></table></figure><p>同时为了避免快照备份的影响，记得将快照备份关闭：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save ""</span><br><span class="line">#save 900 1</span><br><span class="line">#save 300 10</span><br><span class="line">#save 60 10000</span><br></pre></td></tr></tbody></table></figure><h2 id="17-Redis-事务"><a href="#17-Redis-事务" class="headerlink" title="17.Redis 事务"></a>17.Redis 事务</h2><p>正常来说，一个可以商用的数据库往往都有比较完善的事务支持，Redis 当然也不例外。相对于 关系型<br>数据库中的事务模型，Redis 中的事务要简单很多。因为简单，所以 Redis 中的事务模型不太严格，所<br>以我们不能像使用关系型数据库中的事务那样来使用 Redis。</p><p>在关系型数据库中，和事务相关的三个指令分别是：<br>begin<br>commit<br>rollback</p><p>在 Redis 中，当然也有对应的指令：<br>multi<br>exec<br>discard</p><h3 id="1-原子性"><a href="#1-原子性" class="headerlink" title="1.原子性"></a>1.原子性</h3><p>注意，Redis 中的事务并不能算作原子性。它仅仅具备隔离性，也就是说当前的事务可以不被其他事务<br>打断。<br>由于每一次事务操作涉及到的指令还是比较多的，为了提高执行效率，我们在使用客户端的时候，可以<br>通过 pipeline 来优化指令的执行。<br>Redis 中还有一个 watch 指令，watch 可以用来监控一个 key，通过这种监控，我们可以确保在 exec<br>之前，watch 的键的没有被修改过。</p><h3 id="2-Java代码实现"><a href="#2-Java代码实现" class="headerlink" title="2.Java代码实现"></a>2.Java代码实现</h3>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db2window数据及结构迁移linux</title>
      <link href="2021/05/14/db2window%E6%95%B0%E6%8D%AE%E5%8F%8A%E7%BB%93%E6%9E%84%E8%BF%81%E7%A7%BBlinux/"/>
      <url>2021/05/14/db2window%E6%95%B0%E6%8D%AE%E5%8F%8A%E7%BB%93%E6%9E%84%E8%BF%81%E7%A7%BBlinux/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  db2window数据及结构迁移linux</p><span id="more"></span><p>环境 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">win10 db2v9.5</span><br><span class="line">linux db2v9.7</span><br></pre></td></tr></tbody></table></figure><h2 id="一、操作系统相同之脱机备份"><a href="#一、操作系统相同之脱机备份" class="headerlink" title="一、操作系统相同之脱机备份"></a>一、操作系统相同之脱机备份</h2><p>原本准备使用备份backup 与 restore  但是有与系统不同失败了</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--断开连接</span><br><span class="line">db2 force application all  </span><br><span class="line">--备份数据库      </span><br><span class="line">db2 backup database <span class="tag">&lt;<span class="name">db_name</span>&gt;</span> to <span class="tag">&lt;<span class="name">location</span>&gt;</span>   </span><br><span class="line">--恢复数据库，20161101134642 为备份文件时间戳      </span><br><span class="line">db2 restore database <span class="tag">&lt;<span class="name">db_name</span>&gt;</span> from <span class="tag">&lt;<span class="name">location</span>&gt;</span> taken at 20161101134642                                </span><br></pre></td></tr></tbody></table></figure><p>据向下兼容原则，版本相同或者低版本的数据库可以还原在高版本上。</p><h2 id="二、操作系统不同，或者源数据库版本较高"><a href="#二、操作系统不同，或者源数据库版本较高" class="headerlink" title="二、操作系统不同，或者源数据库版本较高"></a>二、操作系统不同，或者源数据库版本较高</h2><p>DB2 提供了两个非常实用的工具：<br> ★数据迁移工具 db2move<br> ★数据字典获取工具 db2look<br> 以下为Windows 环境迁移到Linux下操作小结：<br> 1、登录Windows&gt;db2cmd,使用 db2move 命令将源数据库（TEST）数据导出至指定的文件夹D:\db2move 下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\db2move&gt;db2move TEST <span class="built_in">export</span> -u db2inst1 -p 123456 </span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 另可以将导出操作限制在特定的表(-tn)、表空间(-ts)、表创建者(-tc)、表模式 (-sn)的范围内。</span><br><span class="line">-- db2move TEST export -sn test -u db2inst1 -p 123456（密码）</span><br><span class="line">-- 将test模式下的所有数据导出。</span><br></pre></td></tr></tbody></table></figure><p>执行成功后会显示 Disconnecting from database … successful!</p><p>2、使用 db2look 命令将数据库结构（DDL文件） 导出至指定的文件夹D:\db2look下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\db2look&gt; db2look -d TEST -e -a -o db2look_TEST.sql</span><br></pre></td></tr></tbody></table></figure><p>ps：参数说明：<br> -d 为指定数据库，必须参数<br> -e 抽取数据库对象的DDL，必须参数<br> -a 所有用户和模式，(-u test01 可以指定用户， -a 和 -u 都没有时默认当前登录用户)<br> -o 指定输出文件名称</p><p>3、将db2move和db2look文件上传至Linux系统下：<br>4、Linux下db2用户登录，同步数据结构，载入数据：</p><p>★更新表结构：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - <span class="symbol">db2inst1:</span></span><br><span class="line"><span class="symbol">password:</span><span class="number">123456</span>  </span><br><span class="line">db2inst1<span class="variable">@localhost</span><span class="symbol">:~/db2back/db2look&gt;</span> db2 -tvf db2look_TEST.sql</span><br></pre></td></tr></tbody></table></figure><p>出现缺表可能是表空间太小</p><p>注意选择较大的表空间即可</p><p>参考 <a href="https://blog.csdn.net/weixin_33901641/article/details/90500494">https://blog.csdn.net/weixin_33901641/article/details/90500494</a></p><p>具体指令为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建pagesize为32K的bufferpool</span><br><span class="line">db2 =&gt; create BUFFERPOOL bigbuffer SIZE 5000 PAGESIZE 32K</span><br><span class="line">DB20000I  The SQL command completed successfully.</span><br><span class="line"> </span><br><span class="line">#创建pagesize为32K的tablespace，同时使用新创建的bufferpool</span><br><span class="line">db2 =&gt; CREATE TABLESPACE bigtablespace PAGESIZE 32K BUFFERPOOL bigbuffer</span><br><span class="line">DB20000I  The SQL command completed successfully.</span><br></pre></td></tr></tbody></table></figure><p>★装载数据：</p><figure class="highlight ruby"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2inst1<span class="variable">@localhost</span><span class="symbol">:~/db2back/db2move&gt;</span> db2move TEST load </span><br></pre></td></tr></tbody></table></figure><p>在这需要注意操作角色需要有对于文件的写入权限且 load指令在含有db2move.list的目录下</p><p>操作顺利的话，数据已迁移至linux&gt;db2。要注意几个问题：<br>★关于表模式</p><blockquote><p>关于表模式，Windows下面默认用户db2admin ,默认表模式也是db2admin ，而linux下面的默认用户是db2inst1 表模式也是db2inst1，<br> 所以需要做以下处理：<br> D:\DBBack\CNAS\db2look\TEST\db2look_TEST.sql里面的db2admin字符全部替换成db2inst1<br> D:\DBBack\CNAS\db2move\TEST\db2move.lst 也做同样的操作</p></blockquote><p>★CHECK表状态，修改暂挂状态的表</p><blockquote><p>在db2move过程中会有些表因为检查约束可能会处于暂挂状态，需要执行SET INTEGRITY命令来恢复它的暂挂状态。<br>可以从系统表中检索处于检查暂挂状态的表信息 Select tabname from syscat.tables where status=’C’ —暂挂状态的表信息<br>对暂挂的表执行</p></blockquote><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> integrity <span class="keyword">for</span> usertbl ALLOW NO ACCESS immediate checked   </span><br></pre></td></tr></tbody></table></figure><p>遗漏的表</p><blockquote><p>导出的时候，可能会有个别表的数据丢失，这时候只能对相应的表执行db2move命令重新load了，如果还是不行就重建表再load<br>load单个表的命令</p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2 load <span class="selector-tag">from</span> tab11<span class="selector-class">.ixf</span> of ixf terminate into db2admin<span class="selector-class">.tablename</span>  --tab11<span class="selector-class">.ixf</span>对应的是tablename表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关键，可能需要</span><br><span class="line">call sysproc.admin_cmd (‘reorg table schema名.表名’)</span><br></pre></td></tr></tbody></table></figure><h2 id="三、Linux下数据导出"><a href="#三、Linux下数据导出" class="headerlink" title="三、Linux下数据导出"></a>三、Linux下数据导出</h2><p>参看: <a href="http://www.ibm.com/developerworks/cn/education/data/db2-cert7315/section6.html">http://www.ibm.com/developerworks/cn/education/data/db2-cert7315/section6.html</a> </p><p>和 </p><p><a href="http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0712xiam/index.html?ca=drs">http://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0712xiam/index.html?ca=drs</a></p><p><strong>The below is how to do the db2 data migration.</strong></p><p>(1).Export source data from source DB(导出至指定数据库)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2move &lt;database_name&gt; export -sn &lt;database_schema&gt; -u &lt;DBA&gt; -p &lt;DBA_PASSWORD&gt; &gt; &lt;logFile&gt;</span><br><span class="line">db2move sample export -sn NPMM -u db2inst1 -p db2inst1</span><br></pre></td></tr></tbody></table></figure><p>For example:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2move GEHGAL export -sn GEH_ADMIN -u GEH_ADMIN -p GEH_ADMIN &gt; mv.log</span><br></pre></td></tr></tbody></table></figure><p>If you want to export the db DDL schema from source DB, you should use the below db2 commands:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2look -d GEHGAL -e -o ddlfile -i GEH_ADMIN -w GEH_ADMIN</span><br></pre></td></tr></tbody></table></figure><p>or</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2look -d GEHGAL -u GEH_ADMIN -e -o alltables.sql</span><br><span class="line">db2look -d sample -z NPMM -u db2inst1 -e -o NP.sql</span><br></pre></td></tr></tbody></table></figure><p>以上为导出</p><p>(2).Create a 32k normal or large tablespace</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2 CREATE LARGE TABLESPACE LARGEGEHGAL32 PAGESIZE 32 K MANAGED BY DATABASE USING (FILE 'C:\DB2\NODE0000\SQL00001\largegehgal32' 20000) BUFFERPOOL IBMDEFAULT32K</span><br></pre></td></tr></tbody></table></figure><p>(3).Create the db2 user that should be same name as exported <database_schema> that is from source DB in target DB2 database, assign the 32k tablespace to the user, and delete the other tablespaces<br>(4).Code page from target DB should be same as the code page of source DB. You should use the following command to check:</database_schema></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2 get db cfg</span><br></pre></td></tr></tbody></table></figure><p>If they are different, change the code page in target DB, use the following command:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db2set db2codepage=1252 (1252 is the page code of source DB)</span><br><span class="line">db2 terminate</span><br></pre></td></tr></tbody></table></figure><p><code>db2 terminate command must be executed(**注意一定要进行terminate**)</code><br>(5).Create a 16k or 32k temporary tablespace. It will be used when you view the Project Exception List from deployed GEH GUI</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB2 CREATE TEMPORARY TABLESPACE gehgalsystemtmp32 IN DATABASE PARTITION GROUP IBMTEMPGROUP PAGESIZE 32K MANAGED BY SYSTEM USING ('C:\DB2\NODE0000\SQL00001\gehgalsystemtmp32') EXTENTSIZE 32 PREFETCHSIZE 16 BUFFERPOOL IBMDEFAULT32K</span><br></pre></td></tr></tbody></table></figure><p>(6).Import the data into the target DB</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2move &lt;database_name&gt; import -io create -u &lt;DBA&gt; -p &lt;DBA_PASSWORD&gt; &gt; &lt;logFile&gt;</span><br></pre></td></tr></tbody></table></figure><p>For example:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2move GEHGAL import -io create -u GEH_MIGRATION -p Gal@pass &gt; imp.log</span><br></pre></td></tr></tbody></table></figure><p>Check the imp.log whether the import operation is successful.</p><p>If the table schema has been created/existed in target DB, so you can use the following command:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2move GEHGAL import -io INSERT_UPDATE -u GEH_MIGRATION -p Gal@pass &gt; imp.log</span><br></pre></td></tr></tbody></table></figure><p>(7).If the export operation is successful, and you will find some tables in [color=green]userspace1 tablespace[/color], and the other tables in [color=green]LARGEGEHGAL32 tablespace[/color]<br>(8).If there are some procedures in your db schema, you should [color=green]execute the procedures that will not be imported into target database[/color]<br>(9).You should change the tables that have identify column if you want to store new messages in the target DB. The below is the commands that reset the identify value of EXCEPTION_MESSAGE table.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select max(EXCEPTION_MESSAGE_ID) from EXCEPTION_MESSAGE</span><br><span class="line">$nextMessageId = max(EXCEPTION_MESSAGE_ID) + 1</span><br><span class="line">alter table EXCEPTION_MESSAGE alter column EXCEPTION_MESSAGE_ID restart with $nextMessageId</span><br></pre></td></tr></tbody></table></figure><p>import usage</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2move &lt;database-name&gt; &lt;action&gt; [&lt;option&gt; &lt;value&gt;]</span><br></pre></td></tr></tbody></table></figure><p>首先，您必须指定数据库名（想要移动的表所在的数据库）和要执行的操作(export和import或load)。然后指定一个选项来定义操作的范围。例如，可以将一个操作限制在特定的表（-tn）、表空间（-ts）、表创建者（-tc）或模式名（-sn）范围内。指定表、表空间或表的创建者的一个子集只对export操作有效。如果指定多个值，就必须使用逗号将其分隔开；在值列表项之间不允许有空格。可以指定的项最多为10个。</p><p>另外，也可以指定-tf选项，此时要使用一个文件名作为参数，其中列出了要导出的表名；在该文件中，每行只能列出一个完整的表名。您还可以指定以下内容：<br>-io import-option<br>指定DB2的import工具可以运行的一种模式。有效的选项有：CREATE、INSERT、INSERT_UPDATE、REPLACE和REPLACE_CREATE。缺省值为REPLACE_CREATE。</p><p>参看: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v8/index.jsp?topic=/com.ibm.db2.udb.doc/core/r0008304.html">http://publib.boulder.ibm.com/infocenter/db2luw/v8/index.jsp?topic=/com.ibm.db2.udb.doc/core/r0008304.html</a></p><p>-lo load-option<br>指定DB2的load工具可以运行的一种模式。有效的选项有：INSERT和REPLACE。缺省值为INSERT。</p><p>-l lobpaths<br>指定要创建或查找的LOB文件的位置。必须指定一个或多个绝对路径名。如果指定了多个绝对路径，就必须使用逗号将其分隔开；值之间不允许有空格。缺省值是当前目录。</p><p>-u userid<br>指定一个用户ID，该工具可以使用这个用户ID登录到远程系统上。</p><p>-p password<br>指定对该用户进行认证的密码；该工具需要使用一个有效的用户ID和密码登录到远程系统上。</p><p>[b]db2codepage 设置[/b]<br>1、db2 变量查看<br>db2set -all<br>(connect to dbanme ) get db cfg<br>db2pd -osinfo</p><p>2、db2c变量的设置用命令<br>db2set 变量=value<br>可以参考一下：<br>客户端：<br>db2codepage=1386(简体中文)<br>db2country=86(中国)<br>db2comm=tcpip</p><p>服务器端：<br>db2codepage=1386(简体中文)<br>db2country=86(中国)<br>db2comm=tcpip<br>一定要把缺省的db2codepage=819改为数据库的代码页设置</p>]]></content>
      
      
      <categories>
          
          <category> db2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2v9.7Express-CLinux下安装</title>
      <link href="2021/05/13/DB2v9.7Linux%E5%AE%89%E8%A3%85/"/>
      <url>2021/05/13/DB2v9.7Linux%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  DB2v9.7Express-CLinux下安装</p><span id="more"></span><h2 id="1-解压db2安装包"><a href="#1-解压db2安装包" class="headerlink" title="1.解压db2安装包"></a>1.解压db2安装包</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf v9.7_linuxx64_server.tar.gz</span><br></pre></td></tr></tbody></table></figure><h2 id="2-进入server目录下，执行安装检查"><a href="#2-进入server目录下，执行安装检查" class="headerlink" title="2.进入server目录下，执行安装检查"></a>2.进入server目录下，执行安装检查</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd server</span><br><span class="line">./db2prereqcheck</span><br></pre></td></tr></tbody></table></figure><h2 id="3-运行安装程序"><a href="#3-运行安装程序" class="headerlink" title="3.运行安装程序"></a>3.运行安装程序</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@server]./db2_install</span><br><span class="line"></span><br><span class="line">要选择另一个目录用于安装吗？[yes/no]</span><br><span class="line"></span><br><span class="line">--输入no默认安装opt下，选择yes自己输入安装目录</span><br><span class="line"></span><br><span class="line">指定下列其中一个关键字以安装 DB2 产品</span><br><span class="line"></span><br><span class="line">--输入ESE</span><br><span class="line"></span><br><span class="line">ESE</span><br><span class="line"></span><br><span class="line">正在初始化 DB2 安装。</span><br><span class="line"></span><br><span class="line">要执行的任务总数为：47</span><br><span class="line"></span><br><span class="line">要执行的所有任务的总估计时间为：2070</span><br><span class="line"></span><br><span class="line">任务 #1 启动</span><br><span class="line"></span><br><span class="line">描述：正在检查许可协议的接受情况</span><br><span class="line"></span><br><span class="line">估计时间 1 秒</span><br><span class="line"></span><br><span class="line">任务 #1 结束</span><br><span class="line"></span><br><span class="line">…</span><br><span class="line"></span><br><span class="line">任务 #47 启动</span><br><span class="line"></span><br><span class="line">描述：正在注册 DB2 更新服务</span><br><span class="line"></span><br><span class="line">估计时间 30 秒</span><br><span class="line"></span><br><span class="line">任务 #47 结束</span><br><span class="line"></span><br><span class="line">任务 #48 启动</span><br><span class="line"></span><br><span class="line">描述：正在更新全局概要文件注册表</span><br><span class="line"></span><br><span class="line">估计时间 3 秒</span><br><span class="line"></span><br><span class="line">任务 #48 结束</span><br><span class="line"></span><br><span class="line">已成功完成执行。</span><br></pre></td></tr></tbody></table></figure><h2 id="4-安装license-这一步可以在创建好用户后在db2inst1用户下进行"><a href="#4-安装license-这一步可以在创建好用户后在db2inst1用户下进行" class="headerlink" title="4.安装license(这一步可以在创建好用户后在db2inst1用户下进行)"></a>4.安装license(这一步可以在创建好用户后在db2inst1用户下进行)</h2><p>db2licm -l命令可以查看到db2的license信息。可以找一个永久的license添加到db2数据库即可,把db2ese_c.lic放到一目录下：</p><p>/opt/ibm/db2/V9.7/license/db2ese_c.lic,在/opt/ibm/db2/V9.7/adm/目录下执行:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2licm -a /opt/ibm/db2/V9.7/license/db2ese_c.lic</span><br></pre></td></tr></tbody></table></figure><p>执行后显示：LIC1402I License added successfully.再用db2licm -l查看，你会发现你的db2变为永久了,大功告成，以后就不怕db2数据库过期了</p><h2 id="5-创建DB2运行所需要的用户组和用户"><a href="#5-创建DB2运行所需要的用户组和用户" class="headerlink" title="5.创建DB2运行所需要的用户组和用户"></a>5.创建DB2运行所需要的用户组和用户</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 901 db2iadm1</span><br><span class="line">groupadd -g 902 db2fadm1</span><br><span class="line">groupadd -g 903 dasadm1</span><br><span class="line">useradd -g db2iadm1 -u 801 -d /home/db2inst1 -m  db2inst1</span><br><span class="line">useradd -g db2fadm1 -u 802 -d /home/db2fenc1 -m  db2fenc1</span><br><span class="line">useradd -g dasadm1 -u 803 -d /home/dasadm1 -m  dasusr1</span><br></pre></td></tr></tbody></table></figure><h2 id="6-为db2inst1创建密码"><a href="#6-为db2inst1创建密码" class="headerlink" title="6.为db2inst1创建密码"></a>6.为db2inst1创建密码</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd db2inst1</span><br></pre></td></tr></tbody></table></figure><h2 id="7-创建实例"><a href="#7-创建实例" class="headerlink" title="7.创建实例"></a>7.创建实例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@server]#cd /opt/ibm/db2/V9.7/instance</span><br><span class="line"></span><br><span class="line">[root@instance]#./dascrt -u dasusr1</span><br><span class="line"></span><br><span class="line">SQL4406W  The DB2 Administration Server was started successfully.</span><br><span class="line"></span><br><span class="line">DBI1070I  Program dascrt completed successfully.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@instance]#./db2icrt -u db2inst1 db2inst1</span><br><span class="line"></span><br><span class="line">DBI1070I  Program db2icrt completed successfully.</span><br></pre></td></tr></tbody></table></figure><h2 id="8-启动db2实例"><a href="#8-启动db2实例" class="headerlink" title="8.启动db2实例"></a>8.启动db2实例</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@instance]#su - dasusr1</span><br><span class="line"></span><br><span class="line">[dasusr1@db2]$. das/dasprofile</span><br><span class="line"></span><br><span class="line">[dasusr1@db2]$db2admin start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[dasusr1@db2]$su - db2inst1</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$. sqllib/db2profile</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2start</span><br></pre></td></tr></tbody></table></figure><h2 id="9-关闭、启动数据库"><a href="#9-关闭、启动数据库" class="headerlink" title="9.关闭、启动数据库"></a>9.关闭、启动数据库</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[db2inst1@db2]$db2stop</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2 force applications all</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2start</span><br></pre></td></tr></tbody></table></figure><h2 id="10-创建样本库"><a href="#10-创建样本库" class="headerlink" title="10.创建样本库"></a>10.创建样本库</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[db2inst1@db2]$cd /opt/ibm/db2/V9.7/bin</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$./db2sampl</span><br></pre></td></tr></tbody></table></figure><h2 id="11-设置DB2自启动"><a href="#11-设置DB2自启动" class="headerlink" title="11.设置DB2自启动"></a>11.设置DB2自启动</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db2]#cd /opt/ibm/db2/V9.7/instance</span><br><span class="line"></span><br><span class="line">[root@instance]#./db2iauto -on db2inst1</span><br></pre></td></tr></tbody></table></figure><h2 id="12-配置TCPIP-这一步更改-etc-service建议在root用户下执行"><a href="#12-配置TCPIP-这一步更改-etc-service建议在root用户下执行" class="headerlink" title="12.配置TCPIP(这一步更改/etc/service建议在root用户下执行)"></a>12.配置TCPIP(这一步更改/etc/service建议在root用户下执行)</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@instance]#su - db2inst1</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2set DB2COMM=TCPIP</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2 get dbm cfg |grep SVCENAME</span><br><span class="line"></span><br><span class="line">TCP/IP Service name                          (SVCENAME) =</span><br><span class="line"></span><br><span class="line">SSL service name                         (SSL_SVCENAME) =</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$tail /etc/services</span><br><span class="line"></span><br><span class="line">DB2_db2inst1    60000/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_1  60001/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_2  60002/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_END        60003/tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$vim /etc/services</span><br><span class="line"></span><br><span class="line">修改成如下</span><br><span class="line"></span><br><span class="line">DB2_db2inst1    50000/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_1  50001/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_2  50002/tcp</span><br><span class="line"></span><br><span class="line">DB2_db2inst1_END        50003/tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2 update dbm cfg using SVCENAME 50000</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2stop</span><br><span class="line"></span><br><span class="line">[db2inst1@db2]$db2start</span><br></pre></td></tr></tbody></table></figure><p>附：如果系统为CENTOS7，可能会因为防火墙问题导致50000端口被禁用</p><p>解决方法：</p><p>su - root</p><p>systemctl stop firewalld.service</p><p>或者将50000端口加入防火墙信任：</p><p>firewall-cmd –permanent –zone=public –add-port=50000/tcp</p><p>重启防火墙:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></tbody></table></figure><p><strong>注</strong></p><p>阿里云需要在安全组添加</p>]]></content>
      
      
      <categories>
          
          <category> db2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2v9.7Linux安装</title>
      <link href="2021/05/12/DB2v9.7Express-CLinux%E4%B8%8B%E5%AE%89%E8%A3%85/"/>
      <url>2021/05/12/DB2v9.7Express-CLinux%E4%B8%8B%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  DB2v9.7Linux安装</p><span id="more"></span><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载地址：ftp://public.dhe.ibm.com/software/hk/cobra/db2exc_nlpack_970_LNX_x86.tar.gz</span><br><span class="line">建议迅雷下载</span><br><span class="line">安装环境：centos7</span><br></pre></td></tr></tbody></table></figure><h2 id="DB2v9-7Express-C安装"><a href="#DB2v9-7Express-C安装" class="headerlink" title="DB2v9.7Express-C安装"></a>DB2v9.7Express-C安装</h2><p><strong>1.解压</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf db2exc_970_LNX_x86_64.tar.gz</span><br></pre></td></tr></tbody></table></figure><p><strong>2.检查安装条件</strong></p><p>cd进入解压的后的文件中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./db2prereqcheck</span><br><span class="line">WARNING:</span><br><span class="line">      The 32 bit library file libstdc++.so.6 is not found on the system.</span><br><span class="line">       32-bit applcations may be affected.</span><br><span class="line">#出现warning 按照提示安装</span><br><span class="line">yum install -y libstdc++.so.6</span><br></pre></td></tr></tbody></table></figure><p><strong>3.安装</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./db2_install</span><br></pre></td></tr></tbody></table></figure><p><strong>4.创建DB2运行所需要的用户组和用户</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 901 db2grp</span><br><span class="line">groupadd -g 902 db2fgrp</span><br><span class="line">groupadd -g 903 db2agrp</span><br><span class="line">useradd -g db2grp -u 801 -d /home/db2inst1 -m -s /bin/sh db2inst1</span><br><span class="line">useradd -g db2fgrp -u 802 -d /home/db2fenc -m -s /bin/sh db2fenc</span><br><span class="line">useradd -g db2agrp -u 803 -d /home/db2das -m -s /bin/sh db2das</span><br></pre></td></tr></tbody></table></figure><p><strong>5.添加密码</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">passwd db2inst1 我设置的分别为zyksdb21 zyksdb22 zyksdb22</span><br><span class="line">passwd db2fenc</span><br><span class="line">passwd db2das</span><br></pre></td></tr></tbody></table></figure><p><strong>6.进入/opt/ibm/db2/V9.7/instance目录</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/ibm/db2/V9.7/instance</span><br><span class="line">执行以下命令</span><br><span class="line">./dascrt -u db2das</span><br><span class="line">./db2icrt -u db2inst1 db2inst1</span><br><span class="line">这里dascrt创建的是DB2 adminstration server，每台服务器只有一个这种server，为进行DB2管理（比如运行控制中心）所必须，同时指定其管理用户是db2das。db2icrt创建的是实例，其名字一般和管理用户名一样，这里均为db2inst1</span><br></pre></td></tr></tbody></table></figure><p><strong>6.db2set -g DB2SYSTEM=localhost.localdomain</strong></p><p>db2 terminate</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6.vi /home/db2inst1/.bash_profile</span><br><span class="line">插入下面这句话：</span><br><span class="line"># The following three lines have been added by IBM DB2 instance utilities.</span><br><span class="line">if [ -f /home/db2inst1/sqllib/db2profile ]; then</span><br><span class="line">        . /home/db2inst1/sqllib/db2profile</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p>db2 不起作用 如果配置了 还是不起作用那么就只有每次切换db2inst1用户后手动执行source /home/db2inst1/sqllib/db2profile 进行环境变量初始化</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7.vi /home/db2inst1/.profile</span><br><span class="line">export PATH=$PATH:/home/db2inst1/sqllib/adm:/home/db2inst1/bin</span><br><span class="line"></span><br><span class="line">8.vi /home/db2das/.profile</span><br><span class="line">export PATH=$PATH:/home/db2das/sqllib/adm:/home/db2das/bin</span><br></pre></td></tr></tbody></table></figure><p><strong>9.切换到db2das用户，执行db2admin启动DB2管理服务器。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/ibm/db2/V9.7/bin</span><br><span class="line">db2admin start</span><br><span class="line">切换到db2inst1用户，执行db2start启动数据库实例。</span><br><span class="line">db2start</span><br></pre></td></tr></tbody></table></figure><p><strong>10. 配置DB2</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1 设置DB2自启动。</span><br><span class="line">使用root用户执行以下命令：</span><br><span class="line">cd /opt/ibm/db2/V9.7/instance</span><br><span class="line">./db2iauto -on db2inst1</span><br><span class="line">设置对db2inst1在LINUX启动时自动启动。</span><br><span class="line"></span><br><span class="line">2 配置网络</span><br><span class="line">切换到db2inst1用户。</span><br><span class="line">su - db2inst1</span><br><span class="line">修改DB2的服务端口为50000，这里默认端口就是50000。</span><br><span class="line">db2 update dbm cfg using SVCENAME 50000</span><br><span class="line">修改DB2连接方式为TCPIP，然后可通过JDBC、ODBC等访问本DB2服务器上的数据库，安装了DB2客户端的其它机器也可访问数据库。</span><br><span class="line">db2set DB2COMM=TCPIP</span><br><span class="line">3 禁用防火墙</span><br><span class="line">vi /etc/selinux/config,修改为：</span><br><span class="line">SELINUX=disabled</span><br><span class="line">4 服务禁用防火墙 </span><br></pre></td></tr></tbody></table></figure><p>显示状态： firewall-cmd –state<br>关闭：systemctl stop firewalld<br>开机禁用 ： systemctl disable firewalld</p><p><strong>11.Centos7提示” xxx 不在 sudoers 文件中。此事将被报告。”</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">cd /etc</span><br><span class="line">chmod 740 sudoers</span><br><span class="line">vim sudoers</span><br><span class="line">fendo ALL=(root) ALL, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root</span><br></pre></td></tr></tbody></table></figure><p><strong>五．批注</strong></p><p>备注： 创建和访问数据库，安装验证<br>1 启动与关闭数据库实例<br>su - db2ins1<br>db2start<br>db2 force applications all<br>db2stop<br>（在调用toad连接创建数据库时，先自己在命令行下随意创建一个表，用来初始化这个用户的schema）<br>db2 create database test1</p><p>2 DB2 for linux卸载<br>由于某种原因，要卸载DB2再重新安装，一定要完全卸载DB2，否则不能重新安装或安装后的DB2不可用。<br>因为卸载步骤比较复杂，我建议在虚拟机上安装该软件的朋友，应该先做一个快照，然后方可进行，出错就恢复快照，重新来过。在主机上卸载则最好先做一个备份，以防万一。<br>为了操作方便，可以同时打开几个Shell，分别属于不同用户，配合完成下面的操作。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1、在linux上卸载DB2的一般过程：</span><br><span class="line">a.删除所有数据库。可以使用“控制中心”或drop database命令删除数据库。笔者卸载而未删除数据库，结果是重新安装后无法建立同名数据库。</span><br><span class="line">b.停止DB2管理服务器。</span><br><span class="line">c.停止DB2实例。</span><br><span class="line">d.除去DB2管理服务器。</span><br><span class="line">e.除去DB2实例。</span><br><span class="line">f.除去DB2产品。</span><br><span class="line"></span><br><span class="line">2、停止DB2管理服务器：</span><br><span class="line">必须要停止DB2管理服务器才能在linux上卸载DB2。</span><br><span class="line">a.作为DB2管理服务器所有者登陆。</span><br><span class="line">b.用db2admin stop命令停止DB2管理服务器。</span><br><span class="line"></span><br><span class="line">3、停止DB2实例：</span><br><span class="line">必须要停止DB2实例才能在linux上卸载DB2。</span><br><span class="line">a.作为具有root用户权限的用户登陆。</span><br><span class="line">b.输入/opt/ibm/db2/V9.7/bin/db2ilist命令，获取系统上的所有DB2实例的名称。</span><br><span class="line">c.注销。</span><br><span class="line">d.作为想要停止的实例的所有者登陆。</span><br><span class="line">e.进入该用户的主目录下，运行脚本：. sqllib/db2profile</span><br><span class="line">d.输入db2 force application all命令来停止所有数据库应用程序。</span><br><span class="line">e.输入db2stop命令来停止DB2数据库管理器。</span><br><span class="line">f.输入db2 terminate来确认DB2数据库管理器已停止。</span><br><span class="line">g.对每一个要删除的实例重复以上步骤。</span><br><span class="line"></span><br><span class="line">4、删除DB2管理服务器：</span><br><span class="line">必须删除DB2管理服务器才能卸载DB2。</span><br><span class="line">a.作为DB2管理服务器所有者登陆。</span><br><span class="line">b.进入该用户的主目录下，运行脚本：. das/dasprofile.</span><br><span class="line">c.注销。</span><br><span class="line">d.作为root登陆，通过输入命令/opt/ibm/db2/V9.7/instance/dasdrop除去DB2管理服务器。</span><br><span class="line"></span><br><span class="line">5、删除DB2实例：</span><br><span class="line">一旦删除系统上的实例，该实例下的所有DB2数据库都将不可用。</span><br><span class="line">a.通过输入/opt/ibm/db2/V9.7/instance/db2idrop db2instname删除实例。</span><br><span class="line"></span><br><span class="line">6、卸载DB2产品</span><br><span class="line">以root身份登陆，到DB2版本产品CD-ROM上的根目录或DB2安装文件（通常就是tar解包文件）下找到db2_deinstall命令，</span><br><span class="line">运行db2_deinstall －a命令可以删除所有DB2产品。</span><br><span class="line">可能需要输入DB2安装路径，这里是/opt/ibm/db2/V9.7</span><br><span class="line">然后也可以在LINUX中删除DB2用户，这并非必须，重新安装仍可使用它们。</span><br></pre></td></tr></tbody></table></figure><p>运行时报错<br>-sh-3.1$ ./db2start<br>SQL10007N Message “-1390” could not be retrieved. Reason code: “3”.<br>sudo usermod -s /bin/bash db2inst1</p><p>sudo gedit /home/db2inst1/.profile</p><p>添加以下内容</p><p>export PATH=$PATH:/home/db2inst1/sqllib/adm:/home/db2inst1/bin</p><p>重新尝试以db2inst1用户登录，发现shell已经变了。try!:<br>./unload to extract and ./db2gen.sh</p>]]></content>
      
      
      <categories>
          
          <category> db2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2 windows下9.5安装教程</title>
      <link href="2021/05/11/DB2%20windows%E4%B8%8B9.5%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>2021/05/11/DB2%20windows%E4%B8%8B9.5%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  DB2 windows下9.5安装教程</p><span id="more"></span><h1 id="DB2-windows下9-5安装教程"><a href="#DB2-windows下9-5安装教程" class="headerlink" title="DB2 windows下9.5安装教程"></a>DB2 windows下9.5安装教程</h1><h2 id="1-下载安装包，解压。打开应用程序"><a href="#1-下载安装包，解压。打开应用程序" class="headerlink" title="1.下载安装包，解压。打开应用程序"></a>1.下载安装包，解压。打开应用程序</h2><h2 id="2-如图，再次选择好解压路径，点击Unzip"><a href="#2-如图，再次选择好解压路径，点击Unzip" class="headerlink" title="2.如图，再次选择好解压路径，点击Unzip"></a>2.如图，再次选择好解压路径，点击Unzip</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105506.png" alt="image-20210419105506480"></p><h2 id="3-进入解压好的文件夹，点击setup-exe"><a href="#3-进入解压好的文件夹，点击setup-exe" class="headerlink" title="3.进入解压好的文件夹，点击setup.exe"></a>3.进入解压好的文件夹，点击setup.exe</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105707.png" alt="image-20210419105707942"></p><h2 id="4-进入安装页面，选择安装产品，然后根据你的需要选择版本，这里我选择的是企业版"><a href="#4-进入安装页面，选择安装产品，然后根据你的需要选择版本，这里我选择的是企业版" class="headerlink" title="4.进入安装页面，选择安装产品，然后根据你的需要选择版本，这里我选择的是企业版"></a>4.进入安装页面，选择安装产品，然后根据你的需要选择版本，这里我选择的是企业版</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105823.png" alt="image-20210419105823550"></p><h2 id="5-等待检测，选择下一步"><a href="#5-等待检测，选择下一步" class="headerlink" title="5.等待检测，选择下一步"></a>5.等待检测，选择下一步</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105900.png" alt="image-20210419105900192"></p><h2 id="6-接收许可，下一步"><a href="#6-接收许可，下一步" class="headerlink" title="6.接收许可，下一步"></a>6.接收许可，下一步</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105919.png" alt="image-20210419105919507"></p><h2 id="7-根据需求选择安装类型，这里我选择默认的典型安装。如果不熟悉DB2的功能组件和功能使用，不建议选择定制安装，一般选择典型安装即可。"><a href="#7-根据需求选择安装类型，这里我选择默认的典型安装。如果不熟悉DB2的功能组件和功能使用，不建议选择定制安装，一般选择典型安装即可。" class="headerlink" title="7.根据需求选择安装类型，这里我选择默认的典型安装。如果不熟悉DB2的功能组件和功能使用，不建议选择定制安装，一般选择典型安装即可。"></a>7.根据需求选择安装类型，这里我选择默认的典型安装。如果不熟悉DB2的功能组件和功能使用，不建议选择定制安装，一般选择典型安装即可。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419105947.png" alt="image-20210419105947392"></p><h2 id="8-选择响应文件安装目录，下一步。默认C盘-可以选择其他磁盘安装。"><a href="#8-选择响应文件安装目录，下一步。默认C盘-可以选择其他磁盘安装。" class="headerlink" title="8.选择响应文件安装目录，下一步。默认C盘,可以选择其他磁盘安装。"></a>8.选择响应文件安装目录，下一步。默认C盘,可以选择其他磁盘安装。</h2><p>关于响应文件，查了下资料，<br>保存：在执行手动安装时，您可以让安装程序生成响应文件，其中记录您在安装过程中选择的选项，然后根据需要做出某些较小的修改。如果您要在大量的计算机上安装完全相同的组件，这是相当有用的。<br>编辑：在公共模板基础上修改响应文件。模板响应文件显示您可以指定的所有可能选项，但是这样更加困难，因为您必须是响应文件模板方面的专家。<br>在自动安装脚本中，已经提供了几个响应文件。您可以直接使用它们，做出某些修改，或者用户可以覆盖响应文件。清单 1 显示了 DB2 响应文件的示例。<br>简而言之，是用于批量安装DB2数据库，保存手动安装时的选项，也可以进行编辑，因为他实际上也是文本。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110043.png" alt="image-20210419110043595"></p><h2 id="9-选择数据库安装文件夹，默认C盘，建议安装在非系统盘。"><a href="#9-选择数据库安装文件夹，默认C盘，建议安装在非系统盘。" class="headerlink" title="9.选择数据库安装文件夹，默认C盘，建议安装在非系统盘。"></a>9.选择数据库安装文件夹，默认C盘，建议安装在非系统盘。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110219.png" alt="image-20210419110219821"></p><h2 id="10-设置用户信息。这里说明一下用户，DB2数据库的用户使用的是系统本地的用户。建议摄入你当前使用的本地用户和密码，如果输入一个新的而系统不存在的用户，DB2将为你的系统新建一个用户。"><a href="#10-设置用户信息。这里说明一下用户，DB2数据库的用户使用的是系统本地的用户。建议摄入你当前使用的本地用户和密码，如果输入一个新的而系统不存在的用户，DB2将为你的系统新建一个用户。" class="headerlink" title="10.设置用户信息。这里说明一下用户，DB2数据库的用户使用的是系统本地的用户。建议摄入你当前使用的本地用户和密码，如果输入一个新的而系统不存在的用户，DB2将为你的系统新建一个用户。"></a>10.设置用户信息。这里说明一下用户，DB2数据库的用户使用的是系统本地的用户。建议摄入你当前使用的本地用户和密码，如果输入一个新的而系统不存在的用户，DB2将为你的系统新建一个用户。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110508.png" alt="image-20210419110508007"></p><h2 id="11-配置实例，点击配置，可以查看当前实例的配置，一般不需要更改。默认下一步。"><a href="#11-配置实例，点击配置，可以查看当前实例的配置，一般不需要更改。默认下一步。" class="headerlink" title="11.配置实例，点击配置，可以查看当前实例的配置，一般不需要更改。默认下一步。"></a>11.配置实例，点击配置，可以查看当前实例的配置，一般不需要更改。默认下一步。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110624.png" alt="image-20210419110624559"></p><h2 id="12-勾选“准备DB2工具目录”，点击“下一步”"><a href="#12-勾选“准备DB2工具目录”，点击“下一步”" class="headerlink" title="12. 勾选“准备DB2工具目录”，点击“下一步”"></a>12. 勾选“准备DB2工具目录”，点击“下一步”</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110855.png" alt="image-20210419110855609"></p><h2 id="13-设置通知，不需要设置通知，取消设置，下一步。"><a href="#13-设置通知，不需要设置通知，取消设置，下一步。" class="headerlink" title="13.设置通知，不需要设置通知，取消设置，下一步。"></a>13.设置通知，不需要设置通知，取消设置，下一步。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110924.png" alt="image-20210419110924814"></p><h2 id="14-启用操作系统安全性，默认，下一步。如果取消启用，使用数据库将可能报错。"><a href="#14-启用操作系统安全性，默认，下一步。如果取消启用，使用数据库将可能报错。" class="headerlink" title="14.启用操作系统安全性，默认，下一步。如果取消启用，使用数据库将可能报错。"></a>14.启用操作系统安全性，默认，下一步。如果取消启用，使用数据库将可能报错。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419110949.png" alt="image-20210419110949842"></p><h2 id="15-点击完成，等待完成安装。"><a href="#15-点击完成，等待完成安装。" class="headerlink" title="15.点击完成，等待完成安装。"></a>15.点击完成，等待完成安装。</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419111015.png" alt="image-20210419111015051"></p><h2 id="16-安装完成后，重启系统，才可以正常使用DB2数据库。"><a href="#16-安装完成后，重启系统，才可以正常使用DB2数据库。" class="headerlink" title="16.安装完成后，重启系统，才可以正常使用DB2数据库。"></a>16.安装完成后，重启系统，才可以正常使用DB2数据库。</h2><h2 id="17-重启后，搜索框输入“第一步”，点击打开。这是一个简单的DB2数据库使用帮助。"><a href="#17-重启后，搜索框输入“第一步”，点击打开。这是一个简单的DB2数据库使用帮助。" class="headerlink" title="17.重启后，搜索框输入“第一步”，点击打开。这是一个简单的DB2数据库使用帮助。"></a>17.重启后，搜索框输入“第一步”，点击打开。这是一个简单的DB2数据库使用帮助。</h2><p>你可以根据上面的教程创建SAMPLE 基本数据库 或者选择创建您自己的数据库。如果想了解更多DB2的使用，可以仔细阅读上面的文档。</p><h2 id="18-安装可视化工具DbVisualizer-9-0-7"><a href="#18-安装可视化工具DbVisualizer-9-0-7" class="headerlink" title="18.安装可视化工具DbVisualizer 9.0.7"></a>18.安装可视化工具DbVisualizer 9.0.7</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419112101.png" alt="image-20210419112101172"></p><h2 id="19-一路下一步-同意协议-调整安装位置"><a href="#19-一路下一步-同意协议-调整安装位置" class="headerlink" title="19.一路下一步+同意协议+调整安装位置"></a>19.一路下一步+同意协议+调整安装位置</h2><p>可连接默认数据库</p><p>TOOLSDB</p><h2 id="20-会出现许可过期-这时需要找一个永久的license添加到db2即可"><a href="#20-会出现许可过期-这时需要找一个永久的license添加到db2即可" class="headerlink" title="20.会出现许可过期 这时需要找一个永久的license添加到db2即可"></a>20.会出现许可过期 这时需要找一个永久的license添加到db2即可</h2><p>db2licm -l命令可以查看到db2的license信息。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2licm -l</span><br></pre></td></tr></tbody></table></figure><p>如果license过期：</p><p>可以找一个永久的license添加到db2即可</p><p>把db2ese_c.lic放到目录下，一般都是：\db2\license下<br>然后cd到该目录下，执行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2licm -a db2ese_c.lic </span><br></pre></td></tr></tbody></table></figure><p>重启数据库连接工具，发现已经ok了</p><p>参考:<a href="https://blog.csdn.net/weixin_43835492/article/details/115858923">https://blog.csdn.net/weixin_43835492/article/details/115858923</a></p>]]></content>
      
      
      <categories>
          
          <category> db2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sklearn机器学习包对iris数据集建模并可视化</title>
      <link href="2021/04/25/Sklearn%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8C%85%E5%AF%B9iris%E6%95%B0%E6%8D%AE%E9%9B%86%E5%BB%BA%E6%A8%A1%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>2021/04/25/Sklearn%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8C%85%E5%AF%B9iris%E6%95%B0%E6%8D%AE%E9%9B%86%E5%BB%BA%E6%A8%A1%E5%B9%B6%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  Sklearn机器学习包对iris数据集建模并可视化</p><p>​        2021-04-25 18:05:26</p><span id="more"></span><h2 id="一-决策树分析鸢尾花"><a href="#一-决策树分析鸢尾花" class="headerlink" title="一. 决策树分析鸢尾花"></a>一. 决策树分析鸢尾花</h2><p>Sklearn机器学习包中，决策树实现类是DecisionTreeClassifier，能够执行数据集的多类分类。输入参数为两个数组X[n_samples,n_features]和y[n_samples],X为训练数据，y为训练数据的标记数据。<br>DecisionTreeClassifier构造方法为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sklearn.tree.DecisionTreeClassifier(criterion=<span class="string">'gini'</span>,&nbsp;splitter=<span class="string">'best'</span></span><br><span class="line">    ,max_depth=<span class="literal">None</span>,&nbsp;min_samples_split=<span class="number">2</span>,&nbsp;min_samples_leaf=<span class="number">1</span></span><br><span class="line">    ,max_features=<span class="literal">None</span>,&nbsp;random_state=<span class="literal">None</span>,&nbsp;min_density=<span class="literal">None</span></span><br><span class="line">    ,compute_importances=<span class="literal">None</span>,&nbsp;max_leaf_nodes=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure><p>鸢尾花数据集使用决策树的代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sklearn自带的数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"><span class="comment">#把一部分数据集作为训练，一部分作为预测，这里使用70%的训练，30%的进行预测，其中70%的训练集为0-40、50-90、100-140行，30%的预测集40-50、90-100、140-150行。同时输出准确率、召回率等</span></span><br><span class="line"><span class="comment"># 训练集</span></span><br><span class="line">train_data = np.concatenate((iris.data[<span class="number">0</span>:<span class="number">40</span>, :], iris.data[<span class="number">50</span>:<span class="number">90</span>, :], iris.data[<span class="number">100</span>:<span class="number">140</span>, :]), axis=<span class="number">0</span>)</span><br><span class="line">train_target = np.concatenate((iris.target[<span class="number">0</span>:<span class="number">40</span>], iris.target[<span class="number">50</span>:<span class="number">90</span>], iris.target[<span class="number">100</span>:<span class="number">140</span>]), axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 测试集</span></span><br><span class="line">test_data = np.concatenate((iris.data[<span class="number">40</span>:<span class="number">50</span>, :], iris.data[<span class="number">90</span>:<span class="number">100</span>, :], iris.data[<span class="number">140</span>:<span class="number">150</span>, :]), axis=<span class="number">0</span>)</span><br><span class="line">test_target = np.concatenate((iris.target[<span class="number">40</span>:<span class="number">50</span>], iris.target[<span class="number">90</span>:<span class="number">100</span>], iris.target[<span class="number">140</span>:<span class="number">150</span>]), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">clf = DecisionTreeClassifier()</span><br><span class="line">clf.fit(train_data, train_target)</span><br><span class="line">predict_target = clf.predict(test_data)</span><br><span class="line"><span class="built_in">print</span>(predict_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果与真实结果比对</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(predict_target == test_target))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出准确率 召回率 F值</span></span><br><span class="line"><span class="built_in">print</span>(metrics.classification_report(test_target, predict_target))</span><br><span class="line"><span class="built_in">print</span>(metrics.confusion_matrix(test_target, predict_target))</span><br><span class="line">X = test_data</span><br><span class="line">L1 = [n[<span class="number">0</span>] <span class="keyword">for</span> n <span class="keyword">in</span> X]</span><br><span class="line"><span class="built_in">print</span>(L1)</span><br><span class="line">L2 = [n[<span class="number">1</span>] <span class="keyword">for</span> n <span class="keyword">in</span> X]</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.style <span class="keyword">as</span> style</span><br><span class="line"></span><br><span class="line">style.use(<span class="string">"Solarize_Light2"</span>)</span><br><span class="line"><span class="comment"># plt.scatter中</span></span><br><span class="line"><span class="comment"># c:表示的是颜色，也是一个可选项。默认是蓝色'b',表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等，感觉还没用到过现在不解释了。但是c不可以是一个单独的RGB数字，也不可以是一个RGBA的序列。可以是他们的2维数组（只有一行）。</span></span><br><span class="line"><span class="comment"># marker表示标记符号 默认为o</span></span><br><span class="line">plt.scatter(L1, L2, c=predict_target, marker=<span class="string">'o'</span>)  <span class="comment"># cmap=plt.cm.Paired</span></span><br><span class="line">plt.title(<span class="string">"DecisionTreeClassifier"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2]</span><br><span class="line">30</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line">           0       1.00      1.00      1.00        10</span><br><span class="line">           1       1.00      1.00      1.00        10</span><br><span class="line">           2       1.00      1.00      1.00        10</span><br><span class="line">    accuracy                           1.00        30   准确度</span><br><span class="line">   macro avg       1.00      1.00      1.00        30宏平均</span><br><span class="line">weighted avg       1.00      1.00      1.00        30 加权平均</span><br><span class="line">[[10  0  0]</span><br><span class="line"> [ 0 10  0]</span><br><span class="line"> [ 0  0 10]]</span><br><span class="line">[5.0, 4.5, 4.4, 5.0, 5.1, 4.8, 5.1, 4.6, 5.3, 5.0, 5.5, 6.1, 5.8, 5.0, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9]</span><br><span class="line">[3.5, 2.3, 3.2, 3.5, 3.8, 3.0, 3.8, 3.2, 3.7, 3.3, 2.6, 3.0, 2.6, 2.3, 2.7, 3.0, 2.9, 2.9, 2.5, 2.8, 3.1, 3.1, 2.7, 3.2, 3.3, 3.0, 2.5, 3.0, 3.4, 3.0]</span><br></pre></td></tr></tbody></table></figure><p>绘制出的图形如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210416001841244.png" alt="image-20210416001841244"></p><ul><li>x轴为测试集第一列数据，y轴为第二列数据</li></ul><h2 id="二-Kmeans聚类分析鸢尾花"><a href="#二-Kmeans聚类分析鸢尾花" class="headerlink" title="二. Kmeans聚类分析鸢尾花"></a>二. Kmeans聚类分析鸢尾花</h2><p>KMeans聚类鸢尾花的代码如下，它则不需要类标（属于某一类鸢尾花），而是根据数据之间的相似性，按照“物以类聚，人以群分”进行聚类。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">clf = KMeans()</span><br><span class="line">clf.fit(iris.data, iris.target)</span><br><span class="line"><span class="built_in">print</span>(clf)</span><br><span class="line">predicted = clf.predict(iris.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取花卉两列数据集</span></span><br><span class="line">X = iris.data</span><br><span class="line">L1 = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> X]</span><br><span class="line"><span class="built_in">print</span>(L1)</span><br><span class="line">L2 = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> X]</span><br><span class="line"><span class="built_in">print</span>(L2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。</span></span><br><span class="line"><span class="comment"># cmap:Colormap实体或者是一个colormap的名字，cmap仅仅当c是一个浮点数数组的时候才使用。如果没有申明就是image.cmap</span></span><br><span class="line">plt.scatter(L1, L2, c=predicted, marker=<span class="string">'s'</span>, s=<span class="number">200</span>, cmap=plt.cm.Paired)</span><br><span class="line">plt.title(<span class="string">"Iris"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210416002545067.png" alt="image-20210416002545067"></p>]]></content>
      
      
      <categories>
          
          <category> DeepLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DeepLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex学习</title>
      <link href="2021/04/22/Vuex%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/04/22/Vuex%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  Vuex学习</p><p>2021-04-22 13:07:08</p><span id="more"></span><h1 id="Vuex学习"><a href="#Vuex学习" class="headerlink" title="Vuex学习"></a>Vuex学习</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>单一状态树</p><blockquote><h4 id="js浅拷贝与深拷贝的区别和实现方式"><a href="#js浅拷贝与深拷贝的区别和实现方式" class="headerlink" title="js浅拷贝与深拷贝的区别和实现方式"></a>js浅拷贝与深拷贝的区别和实现方式</h4></blockquote><p><a href="https://www.jianshu.com/p/1c142ec2ca45">源链接</a></p><p>如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。</p><ol><li>如果是基本数据类型，名字和值都会储存在栈内存中</li></ol><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = a; <span class="comment">// 栈内存会开辟一个新的内存空间，此时b和a都是相互独立的</span></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><p>当然，这也算不上深拷贝，因为深拷贝本身只针对较为复杂的object类型数据。</p><ol start="2"><li>如果是引用数据类型，名字存在栈内存中，值存在堆内存中，但是栈内存会提供一个引用的地址指向堆内存中的值</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES</title>
      <link href="2021/04/13/ES%E7%AC%94%E8%AE%B0/"/>
      <url>2021/04/13/ES%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近的elasticsearch笔记</p><p>​        2021-04-20 18:05:26</p><span id="more"></span><h1 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h1><p>个人使用环境为 es7.12</p><h2 id="1-ElasticSearch-核心概念介绍"><a href="#1-ElasticSearch-核心概念介绍" class="headerlink" title="1.ElasticSearch 核心概念介绍"></a>1.ElasticSearch 核心概念介绍</h2><h3 id="4-1-ElasticSearch-十大核心概念"><a href="#4-1-ElasticSearch-十大核心概念" class="headerlink" title="4.1 ElasticSearch 十大核心概念"></a>4.1 ElasticSearch 十大核心概念</h3><h4 id="4-1-1-集群（Cluster）"><a href="#4-1-1-集群（Cluster）" class="headerlink" title="4.1.1 集群（Cluster）"></a>4.1.1 集群（Cluster）</h4><p>一个或者多个安装了 es 节点的服务器组织在一起，就是集群，这些节点共同持有数据，共同提供搜索服务。</p><p>一个集群有一个名字，这个名字是集群的唯一标识，该名字成为 cluster name，默认的集群名称是 elasticsearch，具有相同名称的节点才会组成一个集群。</p><p>可以在 config/elasticsearch.yml 文件中配置集群名称：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: javaboy-es</span><br></pre></td></tr></tbody></table></figure><p>在集群中，节点的状态有三种：绿色、黄色、红色：</p><ul><li>绿色：节点运行状态为健康状态。所有的主分片、副本分片都可以正常工作。</li><li>黄色：表示节点的运行状态为警告状态，所有的主分片目前都可以直接运行，但是至少有一个副本分片是不能正常工作的。</li><li>红色：表示集群无法正常工作。</li></ul><h4 id="4-1-2-节点（Node）"><a href="#4-1-2-节点（Node）" class="headerlink" title="4.1.2 节点（Node）"></a>4.1.2 节点（Node）</h4><p>集群中的一个服务器就是一个节点，节点中会存储数据，同时参与集群的索引以及搜索功能。一个节点想要加入一个集群，只需要配置一下集群名称即可。默认情况下，如果我们启动了多个节点，多个节点还能够互相发现彼此，那么它们会自动组成一个集群，这是 es 默认提供的，但是这种方式并不可靠，有可能会发生脑裂现象。所以在实际使用中，建议一定手动配置一下集群信息。</p><h4 id="4-1-3-索引（Index）"><a href="#4-1-3-索引（Index）" class="headerlink" title="4.1.3 索引（Index）"></a>4.1.3 索引（Index）</h4><p>索引可以从两方面来理解：</p><p><strong>名词</strong></p><p>具有相似特征文档的集合。</p><p><strong>动词</strong></p><p>索引数据以及对数据进行索引操作。</p><h4 id="4-1-4-类型（Type）"><a href="#4-1-4-类型（Type）" class="headerlink" title="4.1.4 类型（Type）"></a>4.1.4 类型（Type）</h4><p>类型是索引上的逻辑分类或者分区。在 es6 之前，一个索引中可以有多个类型，从 es7 开始，一个索引中，只能有一个类型。在 es6.x 中，依然保持了兼容，依然支持单 index 多个 type 结构，但是已经不建议这么使用。</p><h4 id="4-1-5-文档（Document）"><a href="#4-1-5-文档（Document）" class="headerlink" title="4.1.5 文档（Document）"></a>4.1.5 文档（Document）</h4><p>一个可以被索引的数据单元。例如一个用户的文档、一个产品的文档等等。文档都是 JSON 格式的。</p><h4 id="4-1-6-分片（Shards）"><a href="#4-1-6-分片（Shards）" class="headerlink" title="4.1.6 分片（Shards）"></a>4.1.6 分片（Shards）</h4><p>索引都是存储在节点上的，但是受限于节点的空间大小以及数据处理能力，单个节点的处理效果可能不理想，此时我们可以对索引进行分片。当我们创建一个索引的时候，就需要指定分片的数量。每个分片本身也是一个功能完善并且独立的索引。</p><p>默认情况下，一个索引会自动创建 1 个分片，并且为每一个分片创建一个副本。</p><h4 id="4-1-7-副本（Replicas）"><a href="#4-1-7-副本（Replicas）" class="headerlink" title="4.1.7 副本（Replicas）"></a>4.1.7 副本（Replicas）</h4><p>副本也就是备份，是对主分片的一个备份。</p><h4 id="4-1-8-Settings"><a href="#4-1-8-Settings" class="headerlink" title="4.1.8 Settings"></a>4.1.8 Settings</h4><p>集群中对索引的定义信息，例如索引的分片数、副本数等等。</p><h4 id="4-1-9-Mapping"><a href="#4-1-9-Mapping" class="headerlink" title="4.1.9 Mapping"></a>4.1.9 Mapping</h4><p>Mapping 保存了定义索引字段的存储类型、分词方式、是否存储等信息。</p><h4 id="4-1-10-Analyzer"><a href="#4-1-10-Analyzer" class="headerlink" title="4.1.10 Analyzer"></a>4.1.10 Analyzer</h4><p>字段分词方式的定义。</p><h3 id="4-2-ElasticSearch-Vs-关系型数据库"><a href="#4-2-ElasticSearch-Vs-关系型数据库" class="headerlink" title="4.2 ElasticSearch Vs 关系型数据库"></a>4.2 ElasticSearch Vs 关系型数据库</h3><table><thead><tr><th align="left">关系型数据库</th><th align="left">ElasticSearch</th></tr></thead><tbody><tr><td align="left">数据库</td><td align="left">索引</td></tr><tr><td align="left">表</td><td align="left">类型</td></tr><tr><td align="left">行</td><td align="left">文档</td></tr><tr><td align="left">列</td><td align="left">字段</td></tr><tr><td align="left">表结构</td><td align="left">映射（Mapping）</td></tr><tr><td align="left">SQL</td><td align="left">DSL(Domain Specific Language)</td></tr><tr><td align="left">Select * from xxx</td><td align="left">GET http://</td></tr><tr><td align="left">update xxx set xx=xxx</td><td align="left">PUT http://</td></tr><tr><td align="left">Delete xxx</td><td align="left">DELETE http://</td></tr><tr><td align="left">索引</td><td align="left">全文索引</td></tr></tbody></table><h2 id="2-ElasticSearch-分词器"><a href="#2-ElasticSearch-分词器" class="headerlink" title="2.ElasticSearch 分词器"></a>2.ElasticSearch 分词器</h2><h3 id="1-1-内置分词器"><a href="#1-1-内置分词器" class="headerlink" title="1.1 内置分词器"></a>1.1 内置分词器</h3><p>ElasticSearch 核心功能就是数据检索，首先通过索引将文档写入 es。查询分析则主要分为两个步骤：</p><ol><li>词条化：<strong>分词器</strong>将输入的文本转为一个一个的词条流。</li><li>过滤：比如停用词过滤器会从词条中去除不相干的词条（的，嗯，啊，呢）停用词；另外还有同义词过滤器、小写过滤器等。</li></ol><p>ElasticSearch 中内置了多种分词器可以供使用。</p><p>内置分词器：</p><table><thead><tr><th align="left">分词器</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Standard Analyzer</td><td align="left">标准分词器，适用于英语等。</td></tr><tr><td align="left">Simple Analyzer</td><td align="left">简单分词器，基于非字母字符进行分词，单词会被转为小写字母。</td></tr><tr><td align="left">Whitespace Analyzer</td><td align="left">空格分词器。按照空格进行切分。</td></tr><tr><td align="left">Stop Analyzer</td><td align="left">类似于简单分词器，但是增加了停用词的功能。</td></tr><tr><td align="left">Keyword Analyzer</td><td align="left">关键词分词器，输入文本等于输出文本。</td></tr><tr><td align="left">Pattern Analyzer</td><td align="left">利用正则表达式对文本进行切分，支持停用词。</td></tr><tr><td align="left">Language Analyzer</td><td align="left">针对特定语言的分词器。</td></tr><tr><td align="left">Fingerprint Analyzer</td><td align="left">指纹分析仪分词器，通过创建标记进行重复检测。</td></tr></tbody></table><h3 id="1-2-中文分词器"><a href="#1-2-中文分词器" class="headerlink" title="1.2 中文分词器"></a>1.2 中文分词器</h3><p>在 Es 中，使用较多的中文分词器是 elasticsearch-analysis-ik，这个是 es 的一个第三方插件，代码托管在 GitHub 上：</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></li></ul><h4 id="1-2-1-安装"><a href="#1-2-1-安装" class="headerlink" title="1.2.1 安装"></a>1.2.1 安装</h4><p>两种使用方式：</p><p><strong>第一种：</strong></p><ol><li>首先打开分词器官网：<a href="https://github.com/medcl/elasticsearch-analysis-ik%E3%80%82">https://github.com/medcl/elasticsearch-analysis-ik。</a></li><li>在 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a> 页面找到最新的正式版，下载下来。我们这里的下载链接是 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip%E3%80%82">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip。</a></li><li>将下载文件解压。</li><li>在 es/plugins 目录下，新建 ik 目录，并将解压后的所有文件拷贝到 ik 目录下。</li><li>重启 es 服务。</li></ol><p><strong>第二种：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip</span><br></pre></td></tr></tbody></table></figure><h4 id="1-2-2-测试"><a href="#1-2-2-测试" class="headerlink" title="1.2.2 测试"></a>1.2.2 测试</h4><p>es 重启成功后，首先创建一个名为 test 的索引：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210409154614421.png" alt="image-20210409154614421"></p><p>接下来，在该索引中进行分词测试：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210409154701047.png" alt="image-20210409154701047"></p><h4 id="1-2-3-自定义扩展词库"><a href="#1-2-3-自定义扩展词库" class="headerlink" title="1.2.3 自定义扩展词库"></a>1.2.3 自定义扩展词库</h4><h5 id="1-2-3-1-本地自定义"><a href="#1-2-3-1-本地自定义" class="headerlink" title="1.2.3.1 本地自定义"></a>1.2.3.1 本地自定义</h5><p>在 es/plugins/ik/config 目录下，新建 ext.dic 文件（文件名任意），在该文件中可以配置自定义的词库。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201103214857.png" alt="img"></p><p>如果有多个词，换行写入新词即可。</p><p>然后在 es/plugins/ik/config/IKAnalyzer.cfg.xml 中配置扩展词典的位置：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201103215035.png" alt="img"></p><h5 id="1-2-3-2-远程词库"><a href="#1-2-3-2-远程词库" class="headerlink" title="1.2.3.2 远程词库"></a>1.2.3.2 远程词库</h5><p>也可以配置远程词库，远程词库支持热更新（不用重启 es 就可以生效）。</p><p>热更新只需要提供一个接口，接口返回扩展词即可。</p><p>具体使用方式如下，新建一个 Spring Boot 项目，引入 Web 依赖即可。然后在 resources/stastic 目录下新建 ext.dic 文件，写入扩展词：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201103215946.png" alt="img"></p><p>接下来，在 es/plugins/ik/config/IKAnalyzer.cfg.xml 文件中配置远程扩展词接口：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201103220041.png" alt="img"></p><p>配置完成后，重启 es ，即可生效。</p><p>热更新，主要是响应头的 <code>Last-Modified</code> 或者 <code>ETag</code> 字段发生变化，ik 就会自动重新加载远程扩展辞典。</p><h2 id="3-ElasticSearch-索引管理"><a href="#3-ElasticSearch-索引管理" class="headerlink" title="3. ElasticSearch 索引管理"></a>3. ElasticSearch 索引管理</h2><p>启动一个 master 节点和两个 slave 节点进行测试。</p><h3 id="2-1-新建索引"><a href="#2-1-新建索引" class="headerlink" title="2.1 新建索引"></a>2.1 新建索引</h3><h4 id="2-1-1-通过-head-插件新建索引"><a href="#2-1-1-通过-head-插件新建索引" class="headerlink" title="2.1.1 通过 head 插件新建索引"></a>2.1.1 通过 head 插件新建索引</h4><p>在 head 插件中，选择 索引选项卡，然后点击新建索引。新建索引时，需要填入索引名称、分片数以及副本数。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104190359.png" alt="img"></p><p>索引创建成功后，如下图：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104190534.png" alt="img"></p><p>0、1、2、3、4 分别表示索引的分片，粗框表示主分片，细框表示副本（点一下框，通过 primary 属性可以查看是主分片还是副本）。.kibana 索引只有一个分片和一个副本，所以只有 0。</p><h4 id="2-1-2-通过请求创建"><a href="#2-1-2-通过请求创建" class="headerlink" title="2.1.2 通过请求创建"></a>2.1.2 通过请求创建</h4><p>可以通过 postman 发送请求，也可以通过 kibana 发送请求，由于 kibana 有提示，所以这里采用 kibana。</p><p>创建索引请求：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT book</span><br></pre></td></tr></tbody></table></figure><p>创建成功后，可以查看索引信息：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104191119.png" alt="img"></p><p>需要注意两点：</p><ul><li>索引名称不能有大写字母</li></ul><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104191326.png" alt="img"></p><ul><li>索引名是唯一的，不能重复，重复创建会出错</li></ul><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104191248.png" alt="img"></p><h3 id="2-2-更新索引"><a href="#2-2-更新索引" class="headerlink" title="2.2 更新索引"></a>2.2 更新索引</h3><p>索引创建好之后，可以修改其属性。</p><p>例如修改索引的副本数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/_settings</span><br><span class="line">{</span><br><span class="line">  "number_of_replicas": 2</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改成功后，如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104191605.png" alt="img"></p><p>更新分片数也是一样。</p><h3 id="2-3-修改索引的读写权限"><a href="#2-3-修改索引的读写权限" class="headerlink" title="2.3 修改索引的读写权限"></a>2.3 修改索引的读写权限</h3><p>索引创建成功后，可以向索引中写入文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"三国演义"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>写入成功后，可以在 head 插件中查看：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104191935.png" alt="img"></p><p>默认情况下，索引是具备读写权限的，当然这个读写权限可以关闭。</p><p>例如，关闭索引的写权限：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/_settings</span><br><span class="line">{</span><br><span class="line">  "blocks.write": true</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>关闭之后，就无法添加文档了。关闭了写权限之后，如果想要再次打开，方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT book/_settings</span><br><span class="line">{</span><br><span class="line">  "blocks.write": false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他类似的权限有：</p><ul><li>blocks.write</li><li>blocks.read</li><li>blocks.read_only</li></ul><h3 id="2-4-查看索引"><a href="#2-4-查看索引" class="headerlink" title="2.4 查看索引"></a>2.4 查看索引</h3><p>head 插件查看方式如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104192419.png" alt="img"></p><p>请求查看方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book/_settings</span><br></pre></td></tr></tbody></table></figure><p>也可以同时查看多个索引信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book,test/_settings</span><br></pre></td></tr></tbody></table></figure><p>也可以查看所有索引信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET book,test/_settings</span><br></pre></td></tr></tbody></table></figure><h3 id="2-5-删除索引"><a href="#2-5-删除索引" class="headerlink" title="2.5 删除索引"></a>2.5 删除索引</h3><p>head 插件可以删除索引：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104192729.png" alt="img"></p><p>请求删除如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE test</span><br></pre></td></tr></tbody></table></figure><p>删除一个不存在的索引会报错。</p><h3 id="5-6-索引打开-关闭"><a href="#5-6-索引打开-关闭" class="headerlink" title="5.6 索引打开/关闭"></a>5.6 索引打开/关闭</h3><p>关闭索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST book/_close</span><br></pre></td></tr></tbody></table></figure><p>打开索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST book/_open</span><br></pre></td></tr></tbody></table></figure><p>当然，可以同时关闭/打开多个索引，多个索引用 , 隔开，或者直接使用 _all 代表所有索引。</p><h3 id="2-7-复制索引"><a href="#2-7-复制索引" class="headerlink" title="2.7 复制索引"></a>2.7 复制索引</h3><p>索引复制，只会复制数据，不会复制索引配置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line">{</span><br><span class="line">  "source": {"index":"book"},</span><br><span class="line">  "dest": {"index":"book_new"}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>复制的时候，可以添加查询条件。</p><h3 id="2-8-索引别名"><a href="#2-8-索引别名" class="headerlink" title="2.8 索引别名"></a>2.8 索引别名</h3><p>可以为索引创建别名，如果这个别名是唯一的，该别名可以代替索引名称。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">{</span><br><span class="line">  "actions": [</span><br><span class="line">    {</span><br><span class="line">      "add": {</span><br><span class="line">        "index": "book",</span><br><span class="line">        "alias": "book_alias"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加结果如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20201104193751.png" alt="img"></p><p>将 add 改为 remove 就表示移除别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">{</span><br><span class="line">  "actions": [</span><br><span class="line">    {</span><br><span class="line">      "remove": {</span><br><span class="line">        "index": "book",</span><br><span class="line">        "alias": "book_alias"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看某一个索引的别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book/_alias</span><br></pre></td></tr></tbody></table></figure><p>查看某一个别名对应的索引（book_alias 表示一个别名）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /book_alias/_alias</span><br></pre></td></tr></tbody></table></figure><p>可以查看集群上所有可用别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_alias</span><br></pre></td></tr></tbody></table></figure><h2 id="6-ElasticSearch-文档基本操作"><a href="#6-ElasticSearch-文档基本操作" class="headerlink" title="6.ElasticSearch 文档基本操作"></a>6.ElasticSearch 文档基本操作</h2><h3 id="6-1创建文档"><a href="#6-1创建文档" class="headerlink" title="6.1创建文档"></a>6.1创建文档</h3><p>首先新建一个索引 blog</p><p>然后向索引添加一个文档</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"ElasticSearch 文档基本操作",</span><br><span class="line">  "data":"2021-04-09",</span><br><span class="line">  "content":"### 6.1创建文档首先新建一个索引 blog"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>1 表示新建文档的id</p><p>添加成功后响应的json如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "blog",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "1",</span><br><span class="line">  "_version" : 1,</span><br><span class="line">  "result" : "created",</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 2,</span><br><span class="line">    "successful" : 2,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "_seq_no" : 0,</span><br><span class="line">  "_primary_term" : 1</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>_index 表示文档的索引。</li><li>_type 表示文档的类型。</li><li>_id 表示文档的id。</li><li>_version 表示文档的版本(更新文档，版本会自动+1，针对一个文档的更新)。</li><li>result 表示执行结果。</li><li>_shards 表示分片信息。</li><li><code>_seq_no</code>  <code>_primary_term</code> 这两个也是版本控制用的(针对当前index)</li></ul><p>添加成功后可以添加查看的文档：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210409174420672.png" alt="image-20210409174420672"></p><p>添加文档是也可以不指定id，此时系统会默认给出一个id，如果不指定id，则需要使用POST请求，而不能使用PUT请求</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "error" : "Incorrect HTTP method for uri [/blog/_doc?pretty=true] and method [PUT], allowed: [POST]",</span><br><span class="line">  "status" : 405</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"_index": "blog",</span><br><span class="line">"_type": "_doc",</span><br><span class="line">"_id": "5zULtngB3KliN6uQB99S",</span><br><span class="line">"_version": 1,</span><br><span class="line">"_score": 1,</span><br><span class="line">"_source": {</span><br><span class="line">"title": "666",</span><br><span class="line">"data": "2021-04-09",</span><br><span class="line">"content": "### 6.1创建文档首先新建一个索引 blog"</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-2获取文档"><a href="#6-2获取文档" class="headerlink" title="6.2获取文档"></a>6.2获取文档</h3><p>Es 中提供了GET API来查看存储在es中的文档。使用方式如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_doc/5zULtngB3KliN6uQB99S</span><br></pre></td></tr></tbody></table></figure><p>上面的命令表示获取id为 5zULtngB3KliN6uQB99S 的文档。</p><p>如果获取不存在的文档，会返回如下信息</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "blog",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "2",</span><br><span class="line">  "found" : false</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果仅仅只是想探测某个文档是否存在，可以使用head请求：</p><p>不存在的响应</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210409181128130.png" alt="image-20210409181128130"></p><p>存在的响应</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210409181136903.png" alt="image-20210409181136903"></p><p>也可以批量获取文档</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_mget</span><br><span class="line">{</span><br><span class="line">  "ids":["1","5zULtngB3KliN6uQB99S"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>GET 请求携带了请求体？</p><p>某些特定请求，例如JS的HTTP请求库是不允许存在GET请求有请求体的，实际上在RFC7231文档中，并没有规定GET请求的请求体改如何处理，这造成了一定程度的混乱，有的HTTP服务器支持GET请求携带请求体，有的HTTP服务器则不支持。虽然ES工程师倾向于使用GET做查询，但是为了保证兼容性，ES同时也支持使用POST，例如上面的的批量查询案例也可以使用POST请求。</p><h3 id="6-3文档更新"><a href="#6-3文档更新" class="headerlink" title="6.3文档更新"></a>6.3文档更新</h3><p>文档更新一次，version就会自增1。</p><p>可以直接更新整个文档</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/5zULtngB3KliN6uQB99S</span><br><span class="line">{</span><br><span class="line">  "title":"666"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这总方式，更新的文档会覆盖掉原有的文档</p><p>只想更新文档字段，可以通过脚本来实现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">{</span><br><span class="line">  "script": {</span><br><span class="line">    "lang":"painless",</span><br><span class="line">    "source":"ctx._source.title=params.title",</span><br><span class="line">    "params":{</span><br><span class="line">      "title":"666666"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>更新的请求格式：POST{index}/_update/{id}</p><p>在脚本中lang表示脚本语言,painless是es内置的一种脚本语言，source表示具体执行的脚本，ctx是一个上下文对象，通过ctx可以访问到<code>_source</code>、<code>_title</code>等。</p><p>也可以通过同样的方式向文档中添加字段</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_update/1</span><br><span class="line">{</span><br><span class="line">  "script": {</span><br><span class="line">    "lang": "painless",</span><br><span class="line">    "source": "ctx._source.tags=[\"java\",\"php\"]"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>成功后的文档如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "blog",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "1",</span><br><span class="line">  "_version" : 3,</span><br><span class="line">  "_seq_no" : 2,</span><br><span class="line">  "_primary_term" : 1,</span><br><span class="line">  "found" : true,</span><br><span class="line">  "_source" : {</span><br><span class="line">    "title" : "666666",</span><br><span class="line">    "data" : "2021-04-09",</span><br><span class="line">    "content" : "### 6.1创建文档首先新建一个索引 blog",</span><br><span class="line">    "tags" : [</span><br><span class="line">      "java",</span><br><span class="line">      "php"</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="7-ElasticSearch-文档路由"><a href="#7-ElasticSearch-文档路由" class="headerlink" title="7.ElasticSearch 文档路由"></a>7.ElasticSearch 文档路由</h2><p>es 是一个分布式系统，当我们存储一个文档到 es 上之后，这个文档实际上是被存储到 master 节点中的某一个主分片上。</p><p>例如新建一个索引，该索引有两个分片，0个副本，如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210412181413857.png" alt="image-20210412181413857"></p><p>接下来，向该索引中保存一个文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/a</span><br><span class="line">{</span><br><span class="line">  "title":"a"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>文档保存成功后，可以查看该文档被保存到哪个分片中去了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/shards/blog?v</span><br></pre></td></tr></tbody></table></figure><p>查看结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index shard prirep state   docs store ip        node</span><br><span class="line">blog  1     p      STARTED    0  208b 127.0.0.1 master</span><br><span class="line">blog  0     p      STARTED    0  208b 127.0.0.1 slave02</span><br></pre></td></tr></tbody></table></figure><p>从这个结果中，可以看出，文档被保存到分片 0 中。</p><p>那么 es 中到底是按照什么样的规则去分配分片的？</p><p>es 中的路由机制是通过哈希算法，将具有相同哈希值的文档放到一个主分片中，分片位置的计算方式如下：</p><p>shard=hash(routing) % number_of_primary_shards</p><p>routing 可以是一个任意字符串，es 默认是将文档的 id 作为 routing 值，通过哈希函数根据 routing 生成一个数字，然后将该数字和分片数取余，取余的结果就是分片的位置。</p><p>默认的这种路由模式，最大的优势在于负载均衡，这种方式可以保证数据平均分配在不同的分片上。但是他有一个很大的劣势，就是查询时候无法确定文档的位置，此时它会将请求广播到所有的分片上去执行。另一方面，使用默认的路由模式，后期修改分片数量不方便。</p><p>当然开发者也可以自定义 routing 的值，方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/d?routing=javaboy</span><br><span class="line">{</span><br><span class="line"> "title":"d"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果文档在添加时指定了 routing，则查询、删除、更新时也需要指定 routing。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_doc/d?routing=javaboy</span><br></pre></td></tr></tbody></table></figure><p>自定义 routing 有可能会导致负载不均衡，这个还是要结合实际情况选择。</p><p>典型场景：</p><p>对于用户数据，我们可以将 userid 作为 routing，这样就能保证同一个用户的数据保存在同一个分片中，检索时，同样使用 userid 作为 routing，这样就可以精准的从某一个分片中获取数据。</p><h2 id="8-ElasticSearch-并发的处理方式：锁和版本控制"><a href="#8-ElasticSearch-并发的处理方式：锁和版本控制" class="headerlink" title="8.ElasticSearch 并发的处理方式：锁和版本控制"></a>8.ElasticSearch 并发的处理方式：锁和版本控制</h2><p>当我们使用 es 的 API 去进行文档更新时，它首先读取原文档出来，然后对原文档进行更新，更新完成后再重新索引整个文档。不论你执行多少次更新，最终保存在 es 中的是最后一次更新的文档。但是如果有两个线程同时去更新，就有可能出问题。</p><p>要解决问题，就是锁。</p><h3 id="8-1-锁"><a href="#8-1-锁" class="headerlink" title="8.1 锁"></a>8.1 锁</h3><p><strong>悲观锁</strong></p><p>很悲观，每一次去读取数据的时候，都认为别人可能会修改数据，所以屏蔽一切可能破坏数据完整性的操作。关系型数据库中，悲观锁使用较多，例如行锁、表锁等等。</p><p><strong>乐观锁</strong></p><p>很乐观，每次读取数据时，都认为别人不会修改数据，因此也不锁定数据，只有在提交数据时，才会检查数据完整性。这种方式可以省去锁的开销，进而提高吞吐量。</p><p>在 es 中，实际上使用的就是乐观锁。</p><h3 id="8-2-版本控制"><a href="#8-2-版本控制" class="headerlink" title="8.2 版本控制"></a>8.2 版本控制</h3><p><strong>es6.7之前</strong></p><p>在 es6.7 之前，使用 version+version_type 来进行乐观并发控制。根据前面的介绍，文档每被修改一个，version 就会自增一次，es 通过 version 字段来确保所有的操作都有序进行。</p><p>version 分为内部版本控制和外部版本控制。</p><h4 id="8-2-1-内部版本"><a href="#8-2-1-内部版本" class="headerlink" title="8.2.1 内部版本"></a>8.2.1 内部版本</h4><p>es 自己维护的就是内部版本，当创建一个文档时，es 会给文档的版本赋值为 1。</p><p>每当用户修改一次文档，版本号就回自增 1。</p><p>如果使用内部版本，es 要求 version 参数的值必须和 es 文档中 version 的值相当，才能操作成功。</p><h4 id="8-2-2-外部版本"><a href="#8-2-2-外部版本" class="headerlink" title="8.2.2 外部版本"></a>8.2.2 外部版本</h4><p>也可以维护外部版本。</p><p>在添加文档时，就指定版本号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1?version=200&amp;version_type=external</span><br><span class="line">{</span><br><span class="line">  "title":"2222"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以后更新的时候，版本要大于已有的版本号。</p><ul><li>version_type=external 或者 version_type=external_gt 表示以后更新的时候，版本要大于已有的版本号。</li><li>version_type=external_gte 表示以后更新的时候，版本要大于等于已有的版本号。</li></ul><h4 id="8-2-3-最新方案（Es6-7-之后）"><a href="#8-2-3-最新方案（Es6-7-之后）" class="headerlink" title="8.2.3 最新方案（Es6.7 之后）"></a>8.2.3 最新方案（Es6.7 之后）</h4><p>现在使用 <code>if_seq_no</code> 和 <code>if_primary_term</code> 两个参数来做并发控制。</p><p><code>seq_no</code> 不属于某一个文档，它是属于整个索引的（version 则是属于某一个文档的，每个文档的 version 互不影响）。现在更新文档时，使用 <code>seq_no</code> 来做并发。由于 <code>seq_no</code> 是属于整个 index 的，所以任何文档的修改或者新增，<code>seq_no</code> 都会自增。</p><p>现在就可以通过 <code>seq_no</code> 和 <code>primary_term</code> 来做乐观并发控制。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/2?if_seq_no=5&amp;if_primary_term=1</span><br><span class="line">{</span><br><span class="line">  "title":"6666"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="es倒排索引"><a href="#es倒排索引" class="headerlink" title="es倒排索引"></a>es倒排索引</h2><p>倒排索引是 es 中非常重要的索引结构，是从<strong>文档词项到文档 ID</strong> 的一个映射过程。</p><h3 id="8-1-“正排索引”"><a href="#8-1-“正排索引”" class="headerlink" title="8.1 “正排索引”"></a>8.1 “正排索引”</h3><p>我们在关系型数据库中见到的索引，就是“正排索引”。</p><p>关系型数据库中的索引如下，假设我有一个博客表：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413103142558.png" alt="image-20210413103142558"></p><p>我们可以针对这个表建立索引（正排索引）：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413103153966.png" alt="image-20210413103153966"></p><p>当我们通过 id 或者标题去搜索文章时，就可以快速搜到。</p><p>但是如果我们按照文章内容的关键字去搜索，就只能去内容中做字符匹配了。为了提高查询效率，就要考虑使用倒排索引。</p><h3 id="8-2-倒排索引"><a href="#8-2-倒排索引" class="headerlink" title="8.2 倒排索引"></a>8.2 倒排索引</h3><p>倒排索引就是以内容的关键字建立索引，通过索引找到文档 id，再进而找到整个文档。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413103208875.png" alt="image-20210413103208875"></p><p>一般来说，倒排索引分为两个部分：</p><ul><li>单词词典（记录所有的文档词项，以及词项到倒排列表的关联关系）</li><li>倒排列表（记录单词与对应的关系，由一系列倒排索引项组成，倒排索引项指：文档 id、词频（TF）（词项在文档中出现的次数，评分时使用）、位置（Position，词项在文档中分词的位置）、偏移（记录词项开始和结束的位置））</li></ul><p>当我们去索引一个文档时，就回建立倒排索引，搜索时，直接根据倒排索引搜索。</p><h2 id="9-ElasticSearch-动态映射与静态映射"><a href="#9-ElasticSearch-动态映射与静态映射" class="headerlink" title="9.ElasticSearch 动态映射与静态映射"></a>9.ElasticSearch 动态映射与静态映射</h2><p>映射就是 Mapping，它用来定义一个文档以及文档所包含的字段该如何被存储和索引。所以，它其实有点类似于关系型数据库中表的定义。</p><h3 id="9-1-映射分类"><a href="#9-1-映射分类" class="headerlink" title="9.1 映射分类"></a>9.1 映射分类</h3><p><strong>动态映射</strong></p><p>顾名思义，就是自动创建出来的映射。es 根据存入的文档，自动分析出来文档中字段的类型以及存储方式，这种就是动态映射。</p><p>举一个简单例子，新建一个索引，然后查看索引信息：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413114335205.png" alt="image-20210413114335205"></p><p>在创建好的索引信息中，可以看到，mappings 为空，这个 mappings 中保存的就是映射信息。</p><p>现在我们向索引中添加一个文档，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"1111",</span><br><span class="line">  "date":"2020-11-11"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>文档添加成功后，就会自动生成 Mappings：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413132456894.png" alt="image-20210413132456894"></p><p>可以看到，date 字段的类型为 date，title 的类型有两个，text 和 keyword。</p><p>默认情况下，文档中如果新增了字段，mappings 中也会自动新增进来。</p><p>有的时候，如果希望新增字段时，能够抛出异常来提醒开发者，这个可以通过 mappings 中 dynamic 属性来配置。</p><p>dynamic 属性有三种取值：</p><ul><li>true，默认即此。自动添加新字段。</li><li>false，忽略新字段。</li><li>strict，严格模式，发现新字段会抛出异常。</li></ul><p>具体配置方式如下，创建索引时指定 mappings（这其实就是静态映射）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "dynamic":"strict",</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "text"</span><br><span class="line">      },</span><br><span class="line">      "age":{</span><br><span class="line">        "type":"long"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后向 blog 中索引中添加数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"1111",</span><br><span class="line">  "date":"2020-11-11",</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在添加的文档中，多出了一个 date 字段，而该字段没有预定义，所以这个添加操作就回报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "error" : {</span><br><span class="line">    "root_cause" : [</span><br><span class="line">      {</span><br><span class="line">        "type" : "strict_dynamic_mapping_exception",</span><br><span class="line">        "reason" : "mapping set to strict, dynamic introduction of [date] within [_doc] is not allowed"</span><br><span class="line">      }</span><br><span class="line">    ],</span><br><span class="line">    "type" : "strict_dynamic_mapping_exception",</span><br><span class="line">    "reason" : "mapping set to strict, dynamic introduction of [date] within [_doc] is not allowed"</span><br><span class="line">  },</span><br><span class="line">  "status" : 400</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态映射还有一个日期检测的问题。</p><p>例如新建一个索引，然后添加一个含有日期的文档，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "remark":"2020-11-11"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加成功后，remark 字段会被推断是一个日期类型。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413132716160.png" alt="image-20210413132716160"></p><p>此时，remark 字段就无法存储其他类型了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "remark":"javaboy"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时报错如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "error" : {</span><br><span class="line">    "root_cause" : [</span><br><span class="line">      {</span><br><span class="line">        "type" : "mapper_parsing_exception",</span><br><span class="line">        "reason" : "failed to parse field [remark] of type [date] in document with id '1'. Preview of field's value: 'javaboy'"</span><br><span class="line">      }</span><br><span class="line">    ],</span><br><span class="line">    "type" : "mapper_parsing_exception",</span><br><span class="line">    "reason" : "failed to parse field [remark] of type [date] in document with id '1'. Preview of field's value: 'javaboy'",</span><br><span class="line">    "caused_by" : {</span><br><span class="line">      "type" : "illegal_argument_exception",</span><br><span class="line">      "reason" : "failed to parse date field [javaboy] with format [strict_date_optional_time||epoch_millis]",</span><br><span class="line">      "caused_by" : {</span><br><span class="line">        "type" : "date_time_parse_exception",</span><br><span class="line">        "reason" : "Failed to parse with all enclosed parsers"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "status" : 400</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要解决这个问题，可以使用静态映射，即在索引定义时，将 remark 指定为 text 类型。也可以关闭日期检测。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "date_detection": false</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时日期类型就回当成文本来处理。</p><p><strong>静态映射</strong></p><p>略。</p><h3 id="9-2-类型推断"><a href="#9-2-类型推断" class="headerlink" title="9.2 类型推断"></a>9.2 类型推断</h3><p>es 中动态映射类型推断方式如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413133939545.png" alt="image-20210413133939545"></p><h2 id="10-ElasticSearch-四种字段类型详解"><a href="#10-ElasticSearch-四种字段类型详解" class="headerlink" title="10.ElasticSearch 四种字段类型详解"></a>10.ElasticSearch 四种字段类型详解</h2><h3 id="10-1-核心类型"><a href="#10-1-核心类型" class="headerlink" title="10.1 核心类型"></a>10.1 核心类型</h3><h4 id="10-1-1-字符串类型"><a href="#10-1-1-字符串类型" class="headerlink" title="10.1.1 字符串类型"></a>10.1.1 字符串类型</h4><ul><li>string：这是一个已经过期的字符串类型。在 es5 之前，用这个来描述字符串，现在的话，它已经被 text 和 keyword 替代了。</li><li>text：如果一个字段是要被全文检索的，比如说博客内容、新闻内容、产品描述，那么可以使用 text。用了 text 之后，字段内容会被分析，在生成倒排索引之前，字符串会被分词器分成一个个词项。text 类型的字段不用于排序，很少用于聚合。这种字符串也被称为 analyzed 字段。</li><li>keyword：这种类型适用于结构化的字段，例如标签、email 地址、手机号码等等，这种类型的字段可以用作过滤、排序、聚合等。这种字符串也称之为 not-analyzed 字段。</li></ul><h4 id="10-1-2-数字类型"><a href="#10-1-2-数字类型" class="headerlink" title="10.1.2 数字类型"></a>10.1.2 数字类型</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413142752714.png" alt="image-20210413142752714"></p><ul><li>在满足需求的情况下，优先使用范围小的字段。字段长度越短，索引和搜索的效率越高。</li><li>浮点数，优先考虑使用 scaled_float。通过缩放因子（底层将一个浮点数变为整数和一个缩放倍数，用来节省空间）将浮点数缩放，更好的空间利用</li></ul><p>在使用scaled_float时，需要制定缩放因子scaled_float</p><p>scaled_float 举例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "text"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type": "scaled_float",</span><br><span class="line">        "scaling_factor": 100</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="10-1-3-日期类型"><a href="#10-1-3-日期类型" class="headerlink" title="10.1.3 日期类型"></a>10.1.3 日期类型</h4><p>由于 JSON 中没有日期类型，所以 es 中的日期类型形式就比较多样：</p><ul><li>2020-11-11 或者 2020-11-11 11:11:11</li><li>一个从 1970.1.1 零点到现在的一个秒数或者毫秒数。</li></ul><p>es 内部将时间转为 UTC，然后将时间按照 millseconds-since-the-epoch 的长整型来存储。</p><p>自定义日期类型：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "date":{</span><br><span class="line">        "type": "date"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个能够解析出来的时间格式比较多。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/1</span><br><span class="line">{</span><br><span class="line">  "date":"2020-11-11"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT product/_doc/2</span><br><span class="line">{</span><br><span class="line">  "date":"2020-11-11T11:11:11Z"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT product/_doc/3</span><br><span class="line">{</span><br><span class="line">  "date":"1604672099958"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面三个文档中的日期都可以被解析，内部存储的是毫秒计时的长整型数。</p><h4 id="10-1-4-布尔类型（boolean）"><a href="#10-1-4-布尔类型（boolean）" class="headerlink" title="10.1.4 布尔类型（boolean）"></a>10.1.4 布尔类型（boolean）</h4><p>JSON 中的 “true”、“false”、true、false 都可以。</p><h4 id="10-1-5-二进制类型（binary）"><a href="#10-1-5-二进制类型（binary）" class="headerlink" title="10.1.5 二进制类型（binary）"></a>10.1.5 二进制类型（binary）</h4><p>二进制接受的是 base64 编码的字符串，默认不存储，也不可搜索。</p><h4 id="10-1-6-范围类型"><a href="#10-1-6-范围类型" class="headerlink" title="10.1.6 范围类型"></a>10.1.6 范围类型</h4><ul><li>integer_range</li><li>float_range</li><li>long_range</li><li>double_range</li><li>date_range</li><li>ip_range</li></ul><p>定义的时候，指定范围类型即可：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "date":{</span><br><span class="line">        "type": "date"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type":"float_range"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>插入文档的时候，需要指定范围的界限：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "date":{</span><br><span class="line">        "type": "date"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type":"float_range"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>指定范围的时，可以使用 gt、gte、lt、lte。</p><h3 id="10-2-复合类型"><a href="#10-2-复合类型" class="headerlink" title="10.2 复合类型"></a>10.2 复合类型</h3><h4 id="10-2-1-数组类型"><a href="#10-2-1-数组类型" class="headerlink" title="10.2.1 数组类型"></a>10.2.1 数组类型</h4><p>es 中没有专门的数组类型。默认情况下，任何字段都可以有一个或者多个值。需要注意的是，数组中的元素必须是<strong>同一种类型。</strong></p><p>添加数组是，数组中的<strong>第一个元素</strong>决定了整个数组的类型。</p><h4 id="10-2-2-对象类型（object）"><a href="#10-2-2-对象类型（object）" class="headerlink" title="10.2.2 对象类型（object）"></a>10.2.2 对象类型（object）</h4><p>由于 JSON 本身具有层级关系，所以文档包含内部对象。内部对象中，还可以再包含内部对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT product/_doc/2</span><br><span class="line">{</span><br><span class="line">  "date":"2020-11-11T11:11:11Z",</span><br><span class="line">  "ext_info":{</span><br><span class="line">    "address":"China"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="10-2-3-嵌套类型（nested）"><a href="#10-2-3-嵌套类型（nested）" class="headerlink" title="10.2.3 嵌套类型（nested）"></a>10.2.3 嵌套类型（nested）</h4><p>nested 是 object 中的一个特例。</p><p>如果使用 object 类型，假如有如下一个文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "user":[</span><br><span class="line">    {</span><br><span class="line">      "first":"Zhang",</span><br><span class="line">      "last":"san"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "first":"Li",</span><br><span class="line">      "last":"si"</span><br><span class="line">    }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于 Lucene 没有内部对象的概念，所以 es 会将对象层次扁平化，将一个对象转为字段名和值构成的简单列表。即上面的文档，最终存储形式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"user.first":["Zhang","Li"],</span><br><span class="line">"user.last":["san","si"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>扁平化之后，用户名之间的关系没了。这样会导致如果搜索 Zhang si 这个人，会搜索到。</p><p>此时可以 nested 类型来解决问题，nested 对象类型可以保持数组中每个对象的独立性。nested 类型将数组中的每一饿对象作为独立隐藏文档来索引，这样每一个嵌套对象都可以独立被索引。</p><p>{<br>{<br>“user.first”:”Zhang”,<br>“user.last”:”san”<br>},{<br>“user.first”:”Li”,<br>“user.last”:”si”<br>}<br>}</p><p><strong>优点</strong></p><p>文档存储在一起，读取性能高。</p><p><strong>缺点</strong></p><p>更新父或者子文档时需要更新更个文档。</p><h3 id="10-3-地理类型"><a href="#10-3-地理类型" class="headerlink" title="10.3 地理类型"></a>10.3 地理类型</h3><p>使用场景：</p><ul><li>查找某一个范围内的地理位置</li><li>通过地理位置或者相对中心点的距离来聚合文档</li><li>把距离整个到文档的评分中</li><li>通过距离对文档进行排序</li></ul><h4 id="10-3-1-geo-point"><a href="#10-3-1-geo-point" class="headerlink" title="10.3.1 geo_point"></a>10.3.1 geo_point</h4><p>geo_point 就是一个坐标点，定义方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT people</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "location":{</span><br><span class="line">        "type": "geo_point"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建时指定字段类型，存储的时候，有四种方式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//object</span><br><span class="line">PUT people/_doc/1</span><br><span class="line">{</span><br><span class="line">  "location":{</span><br><span class="line">    "lat": 34.27,</span><br><span class="line">    "lon": 108.94</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">//字符串</span><br><span class="line">PUT people/_doc/2</span><br><span class="line">{</span><br><span class="line">  "location":"34.27,108.94"</span><br><span class="line">}</span><br><span class="line">//经纬度的hash值</span><br><span class="line">PUT people/_doc/3</span><br><span class="line">{</span><br><span class="line">  "location":"uzbrgzfxuzup"</span><br><span class="line">}</span><br><span class="line">//数组 经度在前，纬度在后</span><br><span class="line">PUT people/_doc/4</span><br><span class="line">{</span><br><span class="line">  "location":[108.94,34.27]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意，使用数组描述，先经度后纬度。</p><p>地址位置转 geo_hash：<a href="http://www.csxgame.top/#/">http://www.csxgame.top/#/</a></p><h4 id="10-3-2-geo-shape"><a href="#10-3-2-geo-shape" class="headerlink" title="10.3.2 geo_shape"></a>10.3.2 geo_shape</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/image-20210413165810514.png" alt="image-20210413165810514"></p><p>指定 geo_shape 类型：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT people</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "location":{</span><br><span class="line">        "type": "geo_shape"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加文档时需要指定具体的类型：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT people/_doc/1</span><br><span class="line">{</span><br><span class="line">  "location":{</span><br><span class="line">    "type":"point",</span><br><span class="line">    "coordinates": [108.94,34.27]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果是 linestring，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT people/_doc/2</span><br><span class="line">{</span><br><span class="line">  "location":{</span><br><span class="line">    "type":"linestring",</span><br><span class="line">    "coordinates": [[108.94,34.27],[100,33]]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-4-特殊类型"><a href="#10-4-特殊类型" class="headerlink" title="10.4 特殊类型"></a>10.4 特殊类型</h3><h4 id="10-4-1-IP"><a href="#10-4-1-IP" class="headerlink" title="10.4.1 IP"></a>10.4.1 IP</h4><p>存储 IP 地址，类型是 ip：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "address":{</span><br><span class="line">        "type": "ip"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "address":"192.168.91.1"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>搜索文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "address": "192.168.0.0/16"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="10-4-2-token-count"><a href="#10-4-2-token-count" class="headerlink" title="10.4.2 token_count"></a>10.4.2 token_count</h4><p>用于统计字符串分词后的词项个数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "fields": {</span><br><span class="line">          "length":{</span><br><span class="line">            "type":"token_count",</span><br><span class="line">            "analyzer":"standard"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>相当于新增了 title.length 字段用来统计分词后词项的个数。</p><p>添加文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"zhang san"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以通过 token_count 去查询：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "title.length": 2</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11-ElasticSearch-23-种映射参数详解"><a href="#11-ElasticSearch-23-种映射参数详解" class="headerlink" title="11.ElasticSearch 23 种映射参数详解"></a>11.ElasticSearch 23 种映射参数详解</h2><h3 id="11-1-analyzer"><a href="#11-1-analyzer" class="headerlink" title="11.1 analyzer"></a>11.1 analyzer</h3><p>定义文本字段的分词器。默认对索引和查询都是有效的。</p><p>假设不用分词器，我们先来看一下索引的结果，创建一个索引并添加一个文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"定义文本字段的分词器。默认对索引和查询都是有效的。"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看词条向量（term vectors）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_termvectors/1</span><br><span class="line">{</span><br><span class="line">  "fields": ["title"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "blog",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "1",</span><br><span class="line">  "_version" : 1,</span><br><span class="line">  "found" : true,</span><br><span class="line">  "took" : 0,</span><br><span class="line">  "term_vectors" : {</span><br><span class="line">    "title" : {</span><br><span class="line">      "field_statistics" : {</span><br><span class="line">        "sum_doc_freq" : 22,</span><br><span class="line">        "doc_count" : 1,</span><br><span class="line">        "sum_ttf" : 23</span><br><span class="line">      },</span><br><span class="line">      "terms" : {</span><br><span class="line">        "义" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 1,</span><br><span class="line">              "start_offset" : 1,</span><br><span class="line">              "end_offset" : 2</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "分" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 7,</span><br><span class="line">              "start_offset" : 7,</span><br><span class="line">              "end_offset" : 8</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "和" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 15,</span><br><span class="line">              "start_offset" : 16,</span><br><span class="line">              "end_offset" : 17</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "器" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 9,</span><br><span class="line">              "start_offset" : 9,</span><br><span class="line">              "end_offset" : 10</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "字" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 4,</span><br><span class="line">              "start_offset" : 4,</span><br><span class="line">              "end_offset" : 5</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "定" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 0,</span><br><span class="line">              "start_offset" : 0,</span><br><span class="line">              "end_offset" : 1</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "对" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 12,</span><br><span class="line">              "start_offset" : 13,</span><br><span class="line">              "end_offset" : 14</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "引" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 14,</span><br><span class="line">              "start_offset" : 15,</span><br><span class="line">              "end_offset" : 16</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "效" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 21,</span><br><span class="line">              "start_offset" : 22,</span><br><span class="line">              "end_offset" : 23</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "文" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 2,</span><br><span class="line">              "start_offset" : 2,</span><br><span class="line">              "end_offset" : 3</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "是" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 19,</span><br><span class="line">              "start_offset" : 20,</span><br><span class="line">              "end_offset" : 21</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "有" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 20,</span><br><span class="line">              "start_offset" : 21,</span><br><span class="line">              "end_offset" : 22</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "本" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 3,</span><br><span class="line">              "start_offset" : 3,</span><br><span class="line">              "end_offset" : 4</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "查" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 16,</span><br><span class="line">              "start_offset" : 17,</span><br><span class="line">              "end_offset" : 18</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "段" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 5,</span><br><span class="line">              "start_offset" : 5,</span><br><span class="line">              "end_offset" : 6</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "的" : {</span><br><span class="line">          "term_freq" : 2,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 6,</span><br><span class="line">              "start_offset" : 6,</span><br><span class="line">              "end_offset" : 7</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              "position" : 22,</span><br><span class="line">              "start_offset" : 23,</span><br><span class="line">              "end_offset" : 24</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "索" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 13,</span><br><span class="line">              "start_offset" : 14,</span><br><span class="line">              "end_offset" : 15</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "认" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 11,</span><br><span class="line">              "start_offset" : 12,</span><br><span class="line">              "end_offset" : 13</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "词" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 8,</span><br><span class="line">              "start_offset" : 8,</span><br><span class="line">              "end_offset" : 9</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "询" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 17,</span><br><span class="line">              "start_offset" : 18,</span><br><span class="line">              "end_offset" : 19</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "都" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 18,</span><br><span class="line">              "start_offset" : 19,</span><br><span class="line">              "end_offset" : 20</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "默" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 10,</span><br><span class="line">              "start_offset" : 11,</span><br><span class="line">              "end_offset" : 12</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，默认情况下，中文就是一个字一个字的分，这种分词方式没有任何意义。如果这样分词，查询就只能按照一个字一个字来查，像下面这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "title": "定"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>无意义！！！</p><p>所以，我们要根据实际情况，配置合适的分词器。</p><p>给字段设定分词器：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type":"text",</span><br><span class="line">        "analyzer": "ik_smart"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>存储文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"定义文本字段的分词器。默认对索引和查询都是有效的。"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看词条向量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_termvectors/1</span><br><span class="line">{</span><br><span class="line">  "fields": ["title"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "blog",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "1",</span><br><span class="line">  "_version" : 1,</span><br><span class="line">  "found" : true,</span><br><span class="line">  "took" : 1,</span><br><span class="line">  "term_vectors" : {</span><br><span class="line">    "title" : {</span><br><span class="line">      "field_statistics" : {</span><br><span class="line">        "sum_doc_freq" : 12,</span><br><span class="line">        "doc_count" : 1,</span><br><span class="line">        "sum_ttf" : 13</span><br><span class="line">      },</span><br><span class="line">      "terms" : {</span><br><span class="line">        "分词器" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 4,</span><br><span class="line">              "start_offset" : 7,</span><br><span class="line">              "end_offset" : 10</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "和" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 8,</span><br><span class="line">              "start_offset" : 16,</span><br><span class="line">              "end_offset" : 17</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "字段" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 2,</span><br><span class="line">              "start_offset" : 4,</span><br><span class="line">              "end_offset" : 6</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "定义" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 0,</span><br><span class="line">              "start_offset" : 0,</span><br><span class="line">              "end_offset" : 2</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "对" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 6,</span><br><span class="line">              "start_offset" : 13,</span><br><span class="line">              "end_offset" : 14</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "文本" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 1,</span><br><span class="line">              "start_offset" : 2,</span><br><span class="line">              "end_offset" : 4</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "有效" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 11,</span><br><span class="line">              "start_offset" : 21,</span><br><span class="line">              "end_offset" : 23</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "查询" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 9,</span><br><span class="line">              "start_offset" : 17,</span><br><span class="line">              "end_offset" : 19</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "的" : {</span><br><span class="line">          "term_freq" : 2,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 3,</span><br><span class="line">              "start_offset" : 6,</span><br><span class="line">              "end_offset" : 7</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              "position" : 12,</span><br><span class="line">              "start_offset" : 23,</span><br><span class="line">              "end_offset" : 24</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "索引" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 7,</span><br><span class="line">              "start_offset" : 14,</span><br><span class="line">              "end_offset" : 16</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "都是" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 10,</span><br><span class="line">              "start_offset" : 19,</span><br><span class="line">              "end_offset" : 21</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        },</span><br><span class="line">        "默认" : {</span><br><span class="line">          "term_freq" : 1,</span><br><span class="line">          "tokens" : [</span><br><span class="line">            {</span><br><span class="line">              "position" : 5,</span><br><span class="line">              "start_offset" : 11,</span><br><span class="line">              "end_offset" : 13</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后就可以通过词去搜索了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "title": "索引"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-2-search-analyzer"><a href="#11-2-search-analyzer" class="headerlink" title="11.2 search_analyzer"></a>11.2 search_analyzer</h3><p>查询时候的分词器。默认情况下，如果没有配置 search_analyzer，则查询时，首先查看有没有 search_analyzer，有的话，就用 search_analyzer 来进行分词，如果没有，则看有没有 analyzer，如果有，则用 analyzer 来进行分词，否则使用 es 默认的分词器。</p><h3 id="11-3-normalizer"><a href="#11-3-normalizer" class="headerlink" title="11.3 normalizer"></a>11.3 normalizer</h3><p>normalizer 参数用于<strong>解析前（索引或者查询）</strong>的标准化配置。</p><p>比如，在 es 中，对于一些我们不想切分的字符串，我们通常会将其设置为 keyword，搜索时候也是使用整个词进行搜索。如果在索引前没有做好数据清洗，导致大小写不一致，例如 javaboy 和 JAVABOY，此时，我们就可以使用 normalizer 在索引之前以及查询之前进行文档的标准化。</p><p>先来一个反例，创建一个名为 blog 的索引，设置 author 字段类型为 keyword：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "author":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加两个文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "author":"javaboy"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "author":"JAVABOY"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后进行搜索：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "author": "JAVABOY"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>大写关键字可以搜到大写的文档，小写关键字可以搜到小写的文档。</p><p>如果使用了 normalizer，可以在索引和查询时，分别对文档进行预处理。</p><p>normalizer 定义方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "settings": {</span><br><span class="line">    "analysis": {</span><br><span class="line">      "normalizer":{</span><br><span class="line">        "my_normalizer":{</span><br><span class="line">          "type":"custom",</span><br><span class="line">          "filter":["lowercase"]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }, </span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "author":{</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "normalizer":"my_normalizer"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 settings 中定义 normalizer，然后在 mappings 中引用。</p><p>测试方式和前面一致。此时查询的时候，大写关键字也可以查询到小写文档，因为无论是索引还是查询，都会将大写转为小写。</p><h3 id="11-4-boost"><a href="#11-4-boost" class="headerlink" title="11.4 boost"></a>11.4 boost</h3><p>boost 参数可以设置字段的权重。</p><p>默认权重为1</p><p>boost 有两种使用思路，一种就是在定义 mappings 的时候使用，在指定字段类型时使用；另一种就是在查询时使用。</p><p>实际开发中建议使用后者，前者有问题：如果不重新索引文档，权重无法修改。</p><p>只支持 term 查询 (不支持prefix，range，fuzzy查询)</p><p>mapping 中使用 boost（不推荐）：7.12出现提示将在8.0移除</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "content":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "boost": 2</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>另一种方式就是在查询的时候，指定 boost</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "content":{</span><br><span class="line">        "type": "text"</span><br><span class="line">        , "analyzer": "ik_smart"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST blog/_doc</span><br><span class="line">{</span><br><span class="line">  "content":"你好测试的人,你好测试的人,你好测试的人"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "content": {</span><br><span class="line">        "query": "你好",</span><br><span class="line">        "boost": 2</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>为何在建索引时加权重是一个不好的行为</strong>？</p><p>1.如果不重新索引文档，权重无法修改。</p><p>2.在查询时可以调整权重而不需要重新索引</p><p>3.在索引添加权重会占用一个字节的空间，<code>This reduces the resolution of the field length normalization factor which can lead to lower quality relevance calculations.</code>(这一段没看懂)</p><h3 id="11-5-coerce"><a href="#11-5-coerce" class="headerlink" title="11.5 coerce"></a>11.5 coerce</h3><p>coerce 用来清除脏数据，默认为 true。</p><p>比如一个数字 5 ，一般是integer，但是可能是String “5”，也可能是是浮点数 float 5.0, 甚至 “5.0”String</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "number_one":{</span><br><span class="line">        "type": "integer"</span><br><span class="line">      },</span><br><span class="line">      "number_two":{</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "coerce": false</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "number_one":"10"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "number_two":"10"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以通过update mapping api 让coerce 更新已有的字段</p><p>同样可以在建索引时全局禁用coercion并启用部分</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "settings": {</span><br><span class="line">    "index.mapping.coerce": false</span><br><span class="line">  },</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "number_one": {</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "coerce": true</span><br><span class="line">      },</span><br><span class="line">      "number_two": {</span><br><span class="line">        "type": "integer"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{ </span><br><span class="line">"number_one": "10" </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/2</span><br><span class="line">{ </span><br><span class="line">"number_two": "10" </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-6-copy-to"><a href="#11-6-copy-to" class="headerlink" title="11.6 copy_to"></a>11.6 copy_to</h3><p>将多个字段的值复制到一个字段中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "first_name": {</span><br><span class="line">        "type": "text",</span><br><span class="line">        "copy_to": "full_name" </span><br><span class="line">      },</span><br><span class="line">      "last_name": {</span><br><span class="line">        "type": "text",</span><br><span class="line">        "copy_to": "full_name" </span><br><span class="line">      },</span><br><span class="line">      "full_name": {</span><br><span class="line">        "type": "text"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{</span><br><span class="line">  "first_name": "John",</span><br><span class="line">  "last_name": "Smith"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "full_name": { </span><br><span class="line">        "query": "John Smith",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-7-doc-values-和-fielddata"><a href="#11-7-doc-values-和-fielddata" class="headerlink" title="11.7 doc_values 和 fielddata"></a>11.7 doc_values 和 fielddata</h3><p>es 中的搜索主要是用到倒排索引，doc_values 参数是为了加快排序、聚合操作而生的。当建立倒排索引的时候，会额外增加列式存储映射。</p><p>doc_values 默认是开启的，如果确定某个字段不需要排序或者不需要聚合，那么可以关闭 doc_values。</p><p>大部分的字段在索引时都会生成 doc_values，除了 text。text 字段在查询时会生成一个 fielddata 的数据结构，fieldata 在字段首次被聚合、排序的时候生成。</p><table><thead><tr><th>doc_value</th><th>fielddata</th></tr></thead><tbody><tr><td>索引时创建</td><td>使用时动态创建</td></tr><tr><td>磁盘</td><td>内存</td></tr><tr><td>不占用内存</td><td>不占用磁盘</td></tr><tr><td>索引速度稍微低一点</td><td>文档很多时，动态创建慢，占内存</td></tr></tbody></table><p>doc_values 默认开启，fielddata 默认关闭。</p><p>doc_values 演示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "age":100</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">{</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/3</span><br><span class="line">{</span><br><span class="line">  "age":98</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/4</span><br><span class="line">{</span><br><span class="line">  "age":101</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  },</span><br><span class="line">  "sort":[</span><br><span class="line">    {</span><br><span class="line">      "age":{</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于 doc_values 默认时开启的，所以可以直接使用该字段排序，如果想关闭 doc_values ，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "age":{</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "doc_values": false</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "age":100</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">{</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/3</span><br><span class="line">{</span><br><span class="line">  "age":98</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/4</span><br><span class="line">{</span><br><span class="line">  "age":101</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  },</span><br><span class="line">  "sort":[</span><br><span class="line">    {</span><br><span class="line">      "age":{</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-8-dynamic"><a href="#11-8-dynamic" class="headerlink" title="11.8 dynamic"></a>11.8 dynamic</h3><p>当对包含新字段的文档建立索引时，ElasticSearch会将字段动态添加到文档或文档中的内部对象。</p><p>内部对象从其父对象或映射类型继承动态设置。在类型级别禁用了动态映射，因此不会动态的添加新的顶级字段。</p><p>dynamic 可选参数</p><table><thead><tr><th>param</th><th>description</th></tr></thead><tbody><tr><td>true</td><td>默认</td></tr><tr><td>runtime</td><td>新字段作为运行时字段添加到映射中。未建立索引，而是在查询时从_source加载</td></tr><tr><td>false</td><td>新字段会被忽略，不能被索引和搜索，但仍会出现在返回的匹配的_source字段中，不会添加到映射中，必须显式添加新字段</td></tr><tr><td>strict</td><td>如果检测到新字段，会引发异常并拒绝，必须显式添加新字段</td></tr></tbody></table><h3 id="11-9-enabled"><a href="#11-9-enabled" class="headerlink" title="11.9 enabled"></a>11.9 enabled</h3><p>es 默认会索引所有的字段，但是有的字段可能只需要存储，不需要索引。此时可以通过 enabled 字段来控制：</p><p>只能应用于顶级映射定义和对象字段。仍然可以从_source字段中检索JSON，但无法搜索或以其他任何方式存储；</p><p>已经存在的字段和顶级映射无法更新enabled</p><p>可以将非对象字段添加到禁用字段</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "session_data": {</span><br><span class="line">        "type": "object",</span><br><span class="line">        "enabled": false</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/session_1</span><br><span class="line">{</span><br><span class="line">  "session_data": "foo bar" </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>返回的结果为</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "_index" : "my-index-000001",</span><br><span class="line">  "_type" : "_doc",</span><br><span class="line">  "_id" : "session_1",</span><br><span class="line">  "_version" : 1,</span><br><span class="line">  "result" : "created",</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 2,</span><br><span class="line">    "successful" : 2,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "_seq_no" : 0,</span><br><span class="line">  "_primary_term" : 1</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-10-format"><a href="#11-10-format" class="headerlink" title="11.10 format"></a>11.10 format</h3><p>日期格式。format 可以规范日期格式，而且一次可以定义多个 format。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "birthday":{</span><br><span class="line">        "type": "date",</span><br><span class="line">        "format": "yyyy-MM-dd||yyyy-MM-dd HH:mm:ss"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "birthday":"2020-11-11"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">{</span><br><span class="line">  "birthday":"2020-11-11 11:11:11"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>多个日期格式之间，使用 || 符号连接，注意没有空格。</li><li>如果用户没有指定日期的 format，默认的日期格式是 <code>strict_date_optional_time||epoch_mills</code></li></ul><p>另外，所有的日期格式，可以在 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html</a> 网址查看。</p><h3 id="11-11-ignore-above"><a href="#11-11-ignore-above" class="headerlink" title="11.11 ignore_above"></a>11.11 ignore_above</h3><p>igbore_above 用于指定分词和索引的字符串最大长度，超过最大长度的话，该字段将不会被索引，这个字段只适用于 keyword 类型。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "ignore_above": 10</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"javaboy"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"javaboyjavaboyjavaboy"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "title": "javaboyjavaboyjavaboy"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-12-ignore-malformed"><a href="#10-12-ignore-malformed" class="headerlink" title="10.12 ignore_malformed"></a>10.12 ignore_malformed</h3><p>ignore_malformed 可以忽略不规则的数据，该参数默认为 false。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "birthday":{</span><br><span class="line">        "type": "date",</span><br><span class="line">        "format": "yyyy-MM-dd||yyyy-MM-dd HH:mm:ss"</span><br><span class="line">      },</span><br><span class="line">      "age":{</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "ignore_malformed": true</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "birthday":"2020-11-11",</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">{</span><br><span class="line">  "birthday":"2020-11-11 11:11:11",</span><br><span class="line">  "age":"abc"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT users/_doc/2</span><br><span class="line">{</span><br><span class="line">  "birthday":"2020-11-11 11:11:11aaa",</span><br><span class="line">  "age":"abc"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-13-include-in-all"><a href="#10-13-include-in-all" class="headerlink" title="10.13 include_in_all"></a>10.13 include_in_all</h3><p>这个是针对 <code>_all</code> 字段的，但是在 es7 中，该字段已经被废弃了。</p><h3 id="10-14-index"><a href="#10-14-index" class="headerlink" title="10.14 index"></a>10.14 index</h3><p>index 属性指定一个字段是否被索引，该属性为 true 表示字段被索引，false 表示字段不被索引。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "age":{</span><br><span class="line">        "type": "integer",</span><br><span class="line">        "index": false</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "age": 99</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>如果 index 为 false，则不能通过对应的字段搜索。</li></ul><h3 id="10-15-index-options"><a href="#10-15-index-options" class="headerlink" title="10.15 index_options"></a>10.15 index_options</h3><p>index_options 控制索引时哪些信息被存储到倒排索引中（用在 text 字段中），有四种取值：</p><table><thead><tr><th>index_options</th><th>备注</th></tr></thead><tbody><tr><td>docs</td><td>只存储文档编号，默认</td></tr><tr><td>freqs</td><td>在doc基础上，存储词项频率</td></tr><tr><td>positions</td><td>在freqs基础上，存储词项偏移位置</td></tr><tr><td>offsets</td><td>在positions基础上，存储词项开始和结束的字符位置</td></tr></tbody></table><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//这段没怎么懂</span><br><span class="line"></span><br><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "text": {</span><br><span class="line">        "type": "text",</span><br><span class="line">        "index_options": "offsets"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{</span><br><span class="line">  "text": "Quick brown fox"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "text": "brown fox"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "fields": {</span><br><span class="line">      "text": {} </span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="10-16-norms"><a href="#10-16-norms" class="headerlink" title="10.16 norms"></a>10.16 norms</h3><p>norms 对字段评分有用，text 默认开启 norms，如果不是特别需要，不要开启 norms。</p><h3 id="10-17-null-value"><a href="#10-17-null-value" class="headerlink" title="10.17 null_value"></a>10.17 null_value</h3><p>在 es 中，值为 null 的字段不索引也不可以被搜索，null_value 可以让值为 null 的字段显式的可索引、可搜索：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT users</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "keyword",</span><br><span class="line">        "null_value": "javaboy_null"  /*这个里面的value有什么意义呢*/</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT users/_doc/1</span><br><span class="line">{</span><br><span class="line">  "name":null,</span><br><span class="line">  "age":99</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET users/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "javaboy_null"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-18-position-increment-gap"><a href="#10-18-position-increment-gap" class="headerlink" title="10.18 position_increment_gap"></a>10.18 position_increment_gap</h3><p>被解析的 text 字段会将 term 的位置考虑进去，目的是为了支持近似查询和短语查询，当我们去索引一个含有多个值的 text 字段时，会在各个值之间添加一个假想的空间，将值隔开，这样就可以有效避免一些无意义的短语匹配，间隙大小通过 position_increment_gap 来控制，默认是 100。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{</span><br><span class="line">  "names": [ "John Abraham", "Lincoln Smith"]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">      "names": {</span><br><span class="line">        "query": "Abraham Lincoln" </span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">      "names": {</span><br><span class="line">        "query": "Abraham Lincoln",</span><br><span class="line">        "slop": 101 </span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>This phrase query matches our document, even though <code>Abraham</code> and <code>Lincoln</code> are in separate strings, because <code>slop</code> &gt; <code>position_increment_gap</code>.</p><p>两个get请求两种返回</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 3,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 0,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : null,</span><br><span class="line">    "hits" : [ ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 3,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 1,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 0.010358453,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "my-index-000001",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "1",</span><br><span class="line">        "_score" : 0.010358453,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "names" : [</span><br><span class="line">            "John Abraham",</span><br><span class="line">            "Lincoln Smith"</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以在映射中指定<code>position_increment_gap</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "names": {</span><br><span class="line">        "type": "text",</span><br><span class="line">        "position_increment_gap": 0 </span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{</span><br><span class="line">  "names": [ "John Abraham", "Lincoln Smith"]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">      "names": "Abraham Lincoln" </span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-19-properties"><a href="#10-19-properties" class="headerlink" title="10.19 properties"></a>10.19 properties</h3><p>可以在查询，聚合等中使用点表示法来引用内部字段：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "manager.name": "Alice White"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "aggs": {</span><br><span class="line">    "Employees": {</span><br><span class="line">      "nested": {</span><br><span class="line">        "path": "employees"</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "Employee Ages": {</span><br><span class="line">          "histogram": {</span><br><span class="line">            "field": "employees.age",</span><br><span class="line">            "interval": 5</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-20-similarity"><a href="#10-20-similarity" class="headerlink" title="10.20 similarity"></a>10.20 similarity</h3><p>similarity 指定文档的评分模型，默认有三种：</p><table><thead><tr><th>similarity</th><th>备注</th></tr></thead><tbody><tr><td>BM25</td><td>es和lucene默认的评分模型</td></tr><tr><td>classic</td><td>TF/IDF评分</td></tr><tr><td>boolean</td><td>boolean模型评分</td></tr></tbody></table><h3 id="10-21-store"><a href="#10-21-store" class="headerlink" title="10.21 store"></a>10.21 store</h3><p>默认情况下，字段会被索引，也可以搜索，但是不会存储，虽然不会被存储的，但是 <code>_source</code> 中有一个字段的备份。如果想将字段存储下来，可以通过配置 store 来实现。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title": {</span><br><span class="line">        "type": "text",</span><br><span class="line">        "store": true </span><br><span class="line">      },</span><br><span class="line">      "date": {</span><br><span class="line">        "type": "date",</span><br><span class="line">        "store": true </span><br><span class="line">      },</span><br><span class="line">      "content": {</span><br><span class="line">        "type": "text"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":   "Some short title",</span><br><span class="line">  "date":    "2015-01-01",</span><br><span class="line">  "content": "A very long content field..."</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">{</span><br><span class="line">  "stored_fields": [ "title", "date" ] </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="10-22-term-vectors"><a href="#10-22-term-vectors" class="headerlink" title="10.22 term_vectors"></a>10.22 term_vectors</h3><p>term_vectors 是通过分词器产生的信息，包括：</p><ul><li>一组 terms</li><li>每个 term 的位置</li><li>term 的首字符/尾字符与原始字符串原点的偏移量</li></ul><p>term_vectors 取值：</p><table><thead><tr><th>取值</th><th>备注</th></tr></thead><tbody><tr><td>no</td><td>不存储信息，默认</td></tr><tr><td>yes</td><td>term被存储</td></tr><tr><td>with_positions</td><td>在yes的基础上增加位置信息</td></tr><tr><td>with_offset</td><td>在yes的基础上增加偏移信息</td></tr><tr><td>with_positions_offsets</td><td>term，positons，offsets都存储</td></tr><tr><td>with_positions_payloads</td><td></td></tr><tr><td>with_positions_offsets_payloads</td><td></td></tr></tbody></table><ul><li>设置 with_postions_offsets将使字段索引大小翻倍</li></ul><h3 id="11-23-fields"><a href="#11-23-fields" class="headerlink" title="11.23 fields"></a>11.23 fields</h3><p>fields 参数可以让同一字段有多种不同的索引方式。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "fields": {</span><br><span class="line">          "raw":{</span><br><span class="line">            "type":"keyword"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"javaboy"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "title.raw": "javaboy"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="12-映射模板"><a href="#12-映射模板" class="headerlink" title="12.映射模板"></a>12.映射模板</h2><h2 id="13-ElasticSearch-搜索数据导入"><a href="#13-ElasticSearch-搜索数据导入" class="headerlink" title="13.ElasticSearch 搜索数据导入"></a>13.ElasticSearch 搜索数据导入</h2><ol><li>下载脚本<strong>bookdata.json</strong>。<br>链接: <a href="https://pan.baidu.com/s/12Gj5aovYKI5g2X8pPJZtLw">https://pan.baidu.com/s/12Gj5aovYKI5g2X8pPJZtLw</a> 提取码: a5h4 </li><li>创建索引：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT books</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "publish":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "type":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "author":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "info":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type": "double"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>执行如下脚本导入命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST "http://localhost:9200/books/_bulk?pretty" -H "content-type:application/json" --data-binary @bookdata.json</span><br></pre></td></tr></tbody></table></figure><h2 id="14-ElasticSearch-搜索入门"><a href="#14-ElasticSearch-搜索入门" class="headerlink" title="14.ElasticSearch 搜索入门"></a>14.ElasticSearch 搜索入门</h2><p>搜索分为两个过程：</p><ol><li>当向索引中保存文档时，默认情况下，es 会保存两份内容，一份是 <code>_source</code> 中的数据，另一份则是通过分词、排序等一系列过程生成的倒排索引文件，倒排索引中保存了词项和文档之间的对应关系。</li><li>搜索时，当 es 接收到用户的搜索请求之后，就会去倒排索引中查询，通过的倒排索引中维护的倒排记录表找到关键词对应的文档集合，然后对文档进行评分、排序、高亮等处理，处理完成后返回文档。</li></ol><h3 id="14-1-简单搜索"><a href="#14-1-简单搜索" class="headerlink" title="14.1 简单搜索"></a>14.1 简单搜索</h3><p>查询文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 19,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 38,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 4.217799,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "279",</span><br><span class="line">        "_score" : 4.217799,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "计算机应用基础",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "计算机理论、基础知识",</span><br><span class="line">          "author" : "张宇，赖麟",</span><br><span class="line">          "info" : "《计算机应用基础》是国家精品课程“计算机文件基础”的配套教材。全书按照工学结合人才培养模式的要求，以培养能力为目标，基于工作过程组织课程；以典型的工作任务为载体，采用任务驱动的方式来构造知识和技能平台，强调理论和训练一体化，做到“教、学、做”相结合，让学生对知识有整体认识，即按照“先行后知、先学后教”的思想编写。全书内容包括：计算机基础知识、WnwsXP操作系统、McsfOffc2003办公自动化软件、计算机网络基础。《计算机应用基础》的显著特点是以学生为主体，通过实际工作过程中的典型工作任务来训练学生，培养学生解决和处理实际问题的能力，将被动学习转变为主动学习，突出学生能力的培养，更加符合职业技术教育的特点和规律。《计算机应用基础》适合作为普通高等院校和高职高专院校“计算机应用基础”课程的教材，也可作为计算机初学者的入门参考书。",</span><br><span class="line">          "price" : 29</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "298",</span><br><span class="line">        "_score" : 3.8557193,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "高等学校大学计算机基础课程系列教材：大学计算机基础教程",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "大学教材",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "本书作为高等学校非计算机专业计算机基础课程群（1+X）第一门课程的主教材，主要介绍计算机基础知识和应用技能。本书共包含7章：计算机基础知识、操作系统用户界面及使用、办公自动化软件及使用、多媒体技术基础及应用、网络技术基础及应用、网页设计与制作、数据库技术基础及应用。每章都结合通用的软件版本进行讲解，同时为了帮助学生加深对所学知识的理解，还配备了大量习题。作为国家精品课程主讲教材，本书配有丰富的教学资源，包括多媒体教学课件、课程实验系统、上机练习和考试评价系统、教学素材等计算机辅助教学软件，还有功能完善的教学专用网站。本书可作为高等学校学生学习第一门计算机课程的教材，也可作为计算机爱好者的自学读本。",</span><br><span class="line">          "price" : 22</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "789",</span><br><span class="line">        "_score" : 3.58548,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "高等学校文科计算机课程系列教材：计算机平面设计技术（CorelDRAW与Photoshop）（附光盘）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "大学教材",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "《计算机平面设计技术――CDRAW与Ps》是根据教育部高等学校文科类专业计算机课程教学基本要求（美术类）而编写的。《计算机平面设计技术――CDRAW与Ps》系统全面地介绍了平面设计艺术专业最常用、最基本、最普及、最成熟的两个应用软件――CDRAW与Ps，结合实际的设计案例，讲授平面图形的造型方法与技巧、图像的处理方法与技巧、跨程序编辑的方法和意义等知识与技术。教材浓缩了其重要的工具和功能的使用方法，可作为平面设计专业的计算机应用基础课程的教材，也可作为学习计算机平面设计技术的参考。",</span><br><span class="line">          "price" : 28</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "282",</span><br><span class="line">        "_score" : 3.4969957,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "计算机文化基础（Windows XP＋Office2003）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "计算机理论、基础知识",</span><br><span class="line">          "author" : "赵秀英",</span><br><span class="line">          "info" : "《计算机文化基础(WnwsXP+Offc2003",</span><br><span class="line">          "price" : 0</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "783",</span><br><span class="line">        "_score" : 3.3814218,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "计算机科学与技术丛书：现代语音编码技术",</span><br><span class="line">          "publish" : "科学出版社",</span><br><span class="line">          "type" : "电子与通信",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "本书全面、系统地阐述了现代语音编码的原理、技术及应用。　本书分为12章，第一章介绍现代语音编码的基础知识和基本概念，第二章阐述标量量化和矢量量化原理，这两章是语音编码的入门知识；第三章至第七章讨论广泛应用的几种重要的现代语音编码技术原理、系统组成、实用技术及编码标准，是本书的重点；第八章至第十章介绍目前语音编码的最新的一些研究课题及其进展；第十一章、第十二章讨论语音编码的今后发展趋势和方向。主要内容有：语音编码导论、量化原理、时域波形编码技术、频域波形编码技术、变换域波形编码技术、参数编码技术、混合编码技术、极低速率语音编码、宽频带高音质声频编码、第三代移动通信的语音编码、信源-信道联合编码、软件无线电技术在语音编码中的应用。　本书内容丰富、取材新颖、阐述清晰、结构合理、实用性强，包含有最近二十几年来现代语音编码技术的许多新成果和新进展，是一本很好的关于语音编码原理、技术及应用的教科书和参考书。",</span><br><span class="line">          "price" : 31</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "465",</span><br><span class="line">        "_score" : 3.3506408,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "国家精品课程主讲教材・高等学校大学计算机基础课程系列教材：大学计算机基础实践教程",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "大学教材",</span><br><span class="line">          "author" : "詹国华",</span><br><span class="line">          "info" : "《大学计算机基础实践教程》作为高等学校非计算机专业计算机基础课程群（1+X）第一门课程主教材《大学计算机基础教程》的配套实验教材，精心设计了一组综合性、应用性实验，注重实践技能的培养和理论知识的渗透。《大学计算机基础实践教程》共分7章：硬件连接和汉字输入实验、Wnws操作实验、办公软件操作实验、多媒体基础实验、因特网操作实验、网页设计与制作实验、Accss数据库操作实验。作为国家精品课程主讲教材的配套用书，《大学计算机基础实践教程》提供了丰富的教学资源，包括多媒体教学课件、课程实验系统、上机练习和考试评价系统、教学素材等计算机辅助教学软件，还有功能完善的课程教学网站。《大学计算机基础实践教程》可作为高等学校学生学习第一门计算机基础课程的配套教材，也可作为计算机爱好者的自学读本。",</span><br><span class="line">          "price" : 17</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "429",</span><br><span class="line">        "_score" : 3.1717708,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "微型计算机原理与接口技术（第2版）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "计算机组织与体系结构",</span><br><span class="line">          "author" : "尹建华",</span><br><span class="line">          "info" : "《微型计算机原理与接口技术》以In系列微处理器为背景，以16位微处理器8086为核心，追踪In主流系列高性能微型计算机萼术的发展方向，全面讲述微型计算机系统的基本组成、工作原理、硬件接口技术和典型应用，在此基础上介绍80386，80486和Pn等高档微处理器的发展和特点。使学生系统掌握汇编语言程序设计的基本方法和硬件接口技术，建立微型计算机系统的整体概念，并且使之具有微型计算机软件及硬件初步开发、设计的能力。为使于教师授课和学生学习，《微型计算机原理与接口技术》配备了多媒体CAI课件。全书共11章。主要内容包括：微型计算机基础知识、80x86CPU、微型计算机指令系统、汇编语言程序设计、存储器及其与CPU的接口、输入／输出接口及中断技术、总线和总线标准、常用可编程并行数字接口芯片及其应用、串行通信接口及总线标准、模拟接口技术、常用外设和人机交互接口。《微型计算机原理与接口技术》可作为高等学校工科非计算机专业微型计算机原理及应用课程的教材，也可供从事微型计算机硬件和软件设计的工程技术人员参考。",</span><br><span class="line">          "price" : 54</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "70",</span><br><span class="line">        "_score" : 2.9018917,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "计算机基础课程系列教材：数据库技术及应用 SQL Server",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "数据库",</span><br><span class="line">          "author" : "李雁翎",</span><br><span class="line">          "info" : "SQLSv是一种典型的数据库管理系统，是目前深受广大用户欢迎的数据库应用开发平台。它适应网络技术环境，支持客户／服务器模式，能够满足创建各种类型数据库的需求，因此是目前高等学校讲授大型数据库管理系统的首选软件平台。《数据库技术及应用――SQLSv》以培养学生利用数据库技术对数据和信息进行管理、加工和利用的意识与能力为目标，以数据库原理和技术为知识讲授核心，建构教材的体例。《数据库技术及应用――SQLSv》分为上、下两篇。上篇为基础篇，主要介绍与数据库相关的基本概念，数据库设计方法，SQLSv-体系结构，数据库对象管理，T―SQL语言及应用，存储过程和触发器的使用技术。下篇为应用篇，主要介绍安全管理技术，数据备份、恢复及转换技术，ADO数据对象，VB／SQLSv的应用程序开发方法及实例。《数据库技术及应用――SQLSv》体系完整，结构清晰，实例丰富，图文并茂，精编精讲，易读易懂。全书体例创新，由一组系统化的、围绕一个数据库应用系统的相关例子贯穿始终，特色鲜明，具有普遍适用性。《数据库技术及应用――SQLSv》可作为高等学校本、专科学生的教科书，也可作为学习数据库应用技术读者的自学用书。为了方便教师教学和学生自主学习，《数据库技术及应用――SQLSv》配有《数据库技术及应用――习题与实验指导（SQLSv）》和电子教案、例题、实验软件的电子文档以及相关的教学网站，网址为：／／c.cncs.c／c／nx。",</span><br><span class="line">          "price" : 22</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "116",</span><br><span class="line">        "_score" : 2.9018917,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "全国计算机等级考试一级B教程（2010年版）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "计算机考试",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "《全国计算机等级考试一级B教程（2010年版）》由教育部考试中心组织，在全国计算机等级考试委员会指导下由有关专家按照《全国计算机等级考试一级B考试大纲（2007年版）》的要求而编写，内容包括计算机基础知识、WnwsXP操作系统、W2003的使用、Exc2003的使用、因特网的基础知识和简单应用等。由教育部考试中心组织和实施的计算机等级考试，是一种客观、公正、科学的专门测试计算机应用人员的计算机知识与技能的全国范围的等级考试。它面向社会，服务于社会。《全国计算机等级考试一级B教程（2010年版）》除了可以作为计算机等级考试的教材外，还可作为学习计算机基础知识的参考书。",</span><br><span class="line">          "price" : 33</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "138",</span><br><span class="line">        "_score" : 2.821856,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "全国计算机等级考试三级教程：PC技术（2010年版）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "考试认证",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "《全国计算机等级考试三级教程：PC技术(2010年版",</span><br><span class="line">          "price" : 0</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>hits 中就是查询结果，total 是符合查询条件的文档数。</p><p>简单搜索可以简写为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br></pre></td></tr></tbody></table></figure><p>简单搜索默认查询 10 条记录。</p><h3 id="14-2-词项查询"><a href="#14-2-词项查询" class="headerlink" title="14.2 词项查询"></a>14.2 词项查询</h3><p>即 term 查询，就是根据<strong>词</strong>去查询，查询指定字段中包含给定单词的文档，term 查询不被解析，只有搜索的词和文档中的词<strong>精确匹配</strong>，才会返回文档。应用场景如：人名、地名等等。</p><p>查询 name 字段中包含 <strong>十一五</strong> 的文档。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "十一五"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-3-分页"><a href="#14-3-分页" class="headerlink" title="14.3 分页"></a>14.3 分页</h3><p>默认返回前 10 条数据，es 中也可以像关系型数据库一样，给一个分页参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "十一五"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "size": 10,</span><br><span class="line">  "from": 10</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-4-过滤返回字段"><a href="#14-4-过滤返回字段" class="headerlink" title="14.4 过滤返回字段"></a>14.4 过滤返回字段</h3><p>如果返回的字段比较多，又不需要这么多字段，此时可以指定返回的字段：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "十一五"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "size": 10,</span><br><span class="line">  "from": 10,</span><br><span class="line">  "_source": ["name","author"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时，返回的字段就只有 name 和 author 了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 7,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 142,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 1.7939949,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "323",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "徐春祥",</span><br><span class="line">          "name" : "普通高等教育十一五国家级规划教材・医学化学"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "476",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "陈后金，胡健，薛健",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：信号与系统"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "480",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "余家荣",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：复变函数"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "494",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "徐美银",</span><br><span class="line">          "name" : "全国高职高专教育“十一五”规划教材：经济学原理"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "498",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：组合学讲义"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "502",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "卞毓宁",</span><br><span class="line">          "name" : "全国高职高专教育十一五规划教材：统计学概论"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "614",</span><br><span class="line">        "_score" : 1.7416272,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "陈洪亮，张峰，田社平",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：电路基础"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "13",</span><br><span class="line">        "_score" : 1.69223,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "胡立勇，丁艳锋",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：作物栽培学"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "65",</span><br><span class="line">        "_score" : 1.69223,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：有机化学"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "87",</span><br><span class="line">        "_score" : 1.69223,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "author" : "",</span><br><span class="line">          "name" : "普通高等教育“十一五”国家级规划教材：美术设计基础"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="14-5-最小评分"><a href="#14-5-最小评分" class="headerlink" title="14.5 最小评分"></a>14.5 最小评分</h3><p>有的文档得分特别低，说明这个文档和我们查询的关键字相关度很低。我们可以设置一个最低分，只有得分超过最低分的文档才会被返回。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "十一五"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "min_score":1.75,</span><br><span class="line">  "_source": ["name","author"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>得分低于 1.75 的文档将直接被舍弃。</p><h3 id="14-6-高亮"><a href="#14-6-高亮" class="headerlink" title="14.6 高亮"></a>14.6 高亮</h3><p>查询关键字高亮：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "十一五"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "min_score":1.75,</span><br><span class="line">  "_source": ["name","author"],</span><br><span class="line">  "highlight": {</span><br><span class="line">    "fields": {</span><br><span class="line">      "name": {}</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15-ElasticSearch-全文查询"><a href="#15-ElasticSearch-全文查询" class="headerlink" title="15.ElasticSearch 全文查询"></a>15.ElasticSearch 全文查询</h2><h3 id="15-1-match-query"><a href="#15-1-match-query" class="headerlink" title="15.1 match query"></a>15.1 match query</h3><p>match query 会对查询语句进行分词，分词后，如果查询语句中的任何一个词项被匹配，则文档就会被索引到。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "美术计算机"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个查询首先会对 <code>美术计算机</code> 进行分词，分词之后，再去查询，只要文档中包含一个分词结果，就回返回文档。换句话说，<strong>默认词项之间是 OR 的关系</strong>，如果想要修改，也可以改为 AND。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": {</span><br><span class="line">        "query": "美术计算机",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时就会要求文档中必须同时包含 <strong>美术</strong> 和 <strong>计算机</strong> 两个词。</p><h3 id="15-2-match-phrase-query"><a href="#15-2-match-phrase-query" class="headerlink" title="15.2 match_phrase query"></a>15.2 match_phrase query</h3><p>match_phrase query 也会对查询的关键字进行分词，但是它分词后有两个特点：</p><ul><li>分词后的词项顺序必须和文档中词项的顺序一致</li><li>所有的词都必须出现在文档中</li></ul><p>示例如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase": {</span><br><span class="line">        "name": {</span><br><span class="line">          "query": "十一五计算机",</span><br><span class="line">          "slop": 7</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>query 是查询的关键字，会被分词器进行分解，分解之后去倒排索引中进行匹配。</p><p>slop 是指关键字之间的最小距离，但是注意不是关键字之间间隔的字数。文档中的字段被分词器解析之后，解析出来的词项都包含一个 position 字段表示词项的位置，查询短语分词之后 的 position 之间的间隔要满足 slop 的要求。</p><h3 id="15-3-match-phrase-prefix-query"><a href="#15-3-match-phrase-prefix-query" class="headerlink" title="15.3 match_phrase_prefix query"></a>15.3 match_phrase_prefix query</h3><p>这个类似于 match_phrase query，只不过这里多了一个通配符，match_phrase_prefix 支持最后一个词项的前缀匹配，但是由于这种匹配方式效率较低，因此大家作为了解即可。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase_prefix": {</span><br><span class="line">      "name": "计"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个查询过程，会自动进行单词匹配，会自动查找以<strong>计</strong>开始的单词，默认是 50 个，可以自己控制：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_phrase_prefix": {</span><br><span class="line">      "name": {</span><br><span class="line">        "query": "计",</span><br><span class="line">        "max_expansions": 3</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>match_phrase_prefix 是针对分片级别的查询，假设 max_expansions 为 1，可能返回多个文档，但是只有一个词，这是我们预期的结果。有的时候实际返回结果和我们预期结果并不一致，原因在于这个查询是分片级别的，不同的分片确实只返回了一个词，但是结果可能来自不同的分片，所以最终会看到多个词。</p><h3 id="15-4-multi-match-query"><a href="#15-4-multi-match-query" class="headerlink" title="15.4 multi_match query"></a>15.4 multi_match query</h3><p>match 查询的升级版，可以指定多个查询域：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "multi_match": {</span><br><span class="line">      "query": "java",</span><br><span class="line">      "fields": ["name","info"]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这种查询方式还可以指定字段的权重：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "multi_match": {</span><br><span class="line">      "query": "阳光",</span><br><span class="line">      "fields": ["name^4","info"]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个表示关键字出现在 name 中的权重是出现在 info 中权重的 4 倍。</p><h3 id="15-5-query-string-query"><a href="#15-5-query-string-query" class="headerlink" title="15.5 query_string query"></a>15.5 query_string query</h3><p>query_string 是一种紧密结合 Lucene 的查询方式，在一个查询语句中可以用到 Lucene 的一些查询语法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "query_string": {</span><br><span class="line">      "default_field": "name",</span><br><span class="line">      "query": "(十一五) AND (计算机)"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="15-6-simple-query-string"><a href="#15-6-simple-query-string" class="headerlink" title="15.6 simple_query_string"></a>15.6 simple_query_string</h3><p>这个是 query_string 的升级，可以直接使用 +、|、- 代替 AND、OR、NOT 等。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "simple_query_string": {</span><br><span class="line">      "fields": ["name"],</span><br><span class="line">      "query": "(十一五) + (计算机)"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果和 query_string。</p><h2 id="16-ElasticSearch词项查询"><a href="#16-ElasticSearch词项查询" class="headerlink" title="16.ElasticSearch词项查询"></a>16.ElasticSearch词项查询</h2><h3 id="16-1-term-query"><a href="#16-1-term-query" class="headerlink" title="16.1 term query"></a>16.1 term query</h3><p>词项查询。词项查询不会分析查询字符，直接拿查询字符去倒排索引中比对。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": "程序设计"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-2-terms-query"><a href="#16-2-terms-query" class="headerlink" title="16.2 terms query"></a>16.2 terms query</h3><p>词项查询，但是可以给多个关键词。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "terms": {</span><br><span class="line">      "name": ["程序","设计","java"]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-3-range-query"><a href="#16-3-range-query" class="headerlink" title="16.3 range query"></a>16.3 range query</h3><p>范围查询，可以按照日期范围、数字范围等查询。</p><p>range query 中的参数主要有四个：</p><ul><li>gt</li><li>lt</li><li>gte</li><li>lte</li></ul><p>案例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "range": {</span><br><span class="line">      "price": {</span><br><span class="line">        "gte": 10,</span><br><span class="line">        "lt": 20</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "sort": [</span><br><span class="line">    {</span><br><span class="line">      "price": {</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-4-exists-query"><a href="#16-4-exists-query" class="headerlink" title="16.4 exists query"></a>16.4 exists query</h3><p>exists query 会返回指定字段中至少有一个非空值的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "exists": {</span><br><span class="line">      "field": "javaboy"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意，空字符串也是有值。null 是空值。</strong></p><h3 id="16-5-prefix-query"><a href="#16-5-prefix-query" class="headerlink" title="16.5 prefix query"></a>16.5 prefix query</h3><p>前缀查询，效率略低，除非必要，一般不太建议使用。</p><p>给定关键词的前缀去查询：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "prefix": {</span><br><span class="line">      "name": {</span><br><span class="line">        "value": "大学"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-6-wildcard-query"><a href="#16-6-wildcard-query" class="headerlink" title="16.6 wildcard query"></a>16.6 wildcard query</h3><p>wildcard query 即通配符查询。支持单字符和多字符通配符：</p><ul><li>？表示一个任意字符。</li><li><code>*</code> 表示零个或者多个字符。</li></ul><p>查询所有姓张的作者的书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "wildcard": {</span><br><span class="line">      "author": {</span><br><span class="line">        "value": "张*"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询所有姓张并且名字只有两个字的作者的书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "wildcard": {</span><br><span class="line">      "author": {</span><br><span class="line">        "value": "张?"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-7-regexp-query"><a href="#16-7-regexp-query" class="headerlink" title="16.7 regexp query"></a>16.7 regexp query</h3><p>支持正则表达式查询。</p><p>查询所有姓张并且名字只有两个字的作者的书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "regexp": {</span><br><span class="line">      "author": "张."</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-8-fuzzy-query"><a href="#16-8-fuzzy-query" class="headerlink" title="16.8 fuzzy query"></a>16.8 fuzzy query</h3><p>在实际搜索中，有时我们可能会打错字，从而导致搜索不到，在 match query 中，可以通过 fuzziness 属性实现模糊查询。</p><p>fuzzy query 返回与搜索关键字相似的文档。怎么样就算相似？以LevenShtein 编辑距离为准。编辑距离是指将一个字符变为另一个字符所需要更改字符的次数，更改主要包括四种：</p><ul><li>更改字符（javb–〉java）</li><li>删除字符（javva–〉java）</li><li>插入字符（jaa–〉java）</li><li>转置字符（ajva–〉java）</li></ul><p>为了找到相似的词，模糊查询会在指定的编辑距离中创建搜索关键词的所有可能变化或者扩展的集合，然后进行搜索匹配。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "fuzzy": {</span><br><span class="line">      "name": "javba"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="16-9-ids-query"><a href="#16-9-ids-query" class="headerlink" title="16.9 ids query"></a>16.9 ids query</h3><p>根据指定的 id 查询。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "ids":{</span><br><span class="line">      "values":  [1,2,3]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17-ElasticSearch-复合查询"><a href="#17-ElasticSearch-复合查询" class="headerlink" title="17.ElasticSearch 复合查询"></a>17.ElasticSearch 复合查询</h2><h3 id="17-1-constant-score-query"><a href="#17-1-constant-score-query" class="headerlink" title="17.1 constant_score query"></a>17.1 constant_score query</h3><p>当我们不关心检索词项的频率（TF）对搜索结果排序的影响时，可以使用 constant_score 将查询语句或者过滤语句包裹起来。一般来说词项出现次数多会靠前？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "constant_score": {</span><br><span class="line">      "filter": {</span><br><span class="line">        "term": {</span><br><span class="line">          "name": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "boost": 1.5</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="17-2-bool-query"><a href="#17-2-bool-query" class="headerlink" title="17.2 bool query"></a>17.2 bool query</h3><p>bool query 可以将任意多个简单查询组装在一起，有四个关键字可供选择，四个关键字所描述的条件可以有一个或者多个。</p><ul><li>must：文档必须匹配 must 选项下的查询条件。</li><li>should：文档可以匹配 should 下的查询条件，也可以不匹配。</li><li>must_not：文档必须不满足 must_not 选项下的查询条件。</li><li>filter：类似于 must，但是 filter 不评分，只是过滤数据。</li></ul><p>例如查询 name 属性中必须包含 java，同时书价不在 [0,35] 区间内，info 属性可以包含 程序设计 也可以不包含程序 设计：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "java"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "must_not": [</span><br><span class="line">        {</span><br><span class="line">          "range": {</span><br><span class="line">            "price": {</span><br><span class="line">              "gte": 0,</span><br><span class="line">              "lte": 35</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "should": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "info": "程序设计"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里还涉及到一个关键字，<code>minmum_should_match</code> 参数。</p><p><code>minmum_should_match</code> 参数在 es 官网上称作最小匹配度。在之前学习的 <code>multi_match</code> 或者这里的 should 查询中，都可以设置 <code>minmum_should_match</code> 参数。</p><p>假设我们要做一次查询，查询 name 中包含 语言程序设计 关键字的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "语言程序设计"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个查询过程中，首先会进行分词，分词方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET books/_analyze</span><br><span class="line">{</span><br><span class="line">  "text": ["语言程序设计"],</span><br><span class="line">  "analyzer": "ik_max_word"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>分词后的 term 会构造成一个 should 的 bool query，每一个 term 都会变成一个 term query 的子句。换句话说，上面的查询和下面的查询等价：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "should": [</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "语言"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "程序设计"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "程序"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "设计"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这两个查询语句中，都是文档只需要包含词项中的任意一项即可，文档就回被返回，在 match 查询中，可以通过 operator 参数设置文档必须匹配所有词项。</p><p>如果想匹配一部分词项，就涉及到一个参数，就是 <code>minmum_should_match</code>，即最小匹配度。即至少匹配多少个词。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": {</span><br><span class="line">        "query": "语言程序设计",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "should": [</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "语言"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "程序设计"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "程序"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "term": {</span><br><span class="line">            "name": {</span><br><span class="line">              "value": "设计"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "minimum_should_match": "50%"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "from": 0,</span><br><span class="line">  "size": 70</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>50% 表示词项个数的 50%。</p><p>如下两个查询等价（参数 4 是因为查询关键字分词后有 4 项）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": {</span><br><span class="line">        "query": "语言程序设计",</span><br><span class="line">        "minimum_should_match": 4</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": {</span><br><span class="line">        "query": "语言程序设计",</span><br><span class="line">        "operator": "and"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="17-3-dis-max-query"><a href="#17-3-dis-max-query" class="headerlink" title="17.3 dis_max query"></a>17.3 dis_max query</h3><p>假设现在有两本书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "content":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">POST blog/_doc</span><br><span class="line">{</span><br><span class="line">  "title":"如何通过Java代码调用ElasticSearch",</span><br><span class="line">  "content":"松哥力荐，这是一篇很好的解决方案"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">POST blog/_doc</span><br><span class="line">{</span><br><span class="line">  "title":"初识 MongoDB",</span><br><span class="line">  "content":"简单介绍一下 MongoDB，以及如何通过 Java 调用 MongoDB，MongoDB 是一个不错 NoSQL 解决方案"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在假设搜索 <strong>Java解决方案</strong> 关键字，但是不确定关键字是在 title 还是在 content，所以两者都搜索：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "should": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "title": "java解决方案"</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "content": "java解决方案"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>搜索结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 882,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 1.1972204,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "HhK653gBeADYd85qxnL3",</span><br><span class="line">        "_score" : 1.1972204,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "如何通过Java代码调用ElasticSearch",</span><br><span class="line">          "content" : "松哥力荐，这是一篇很好的解决方案"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "HxK753gBeADYd85qCnLy",</span><br><span class="line">        "_score" : 1.1069256,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "初识 MongoDB",</span><br><span class="line">          "content" : "简单介绍一下 MongoDB，以及如何通过 Java 调用 MongoDB，MongoDB 是一个不错 NoSQL 解决方案"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>要理解这个原因，我们需要来看下 should query 中的评分策略：</p><ol><li>首先会执行 should 中的两个查询</li><li>对两个查询结果的评分求和</li><li>对求和结果乘以匹配语句总数</li><li>在对第三步的结果除以所有语句总数</li></ol><p>反映到具体的查询中：</p><p><strong>前者</strong></p><ol><li>title 中 包含 java，假设评分是 1.1</li><li>content 中包含解决方案，假设评分是 1.2</li><li>有得分的 query 数量，这里是 2</li><li>总的 query 数量也是 2</li></ol><p>最终结果：<code>（1.1+1.2）*2/2=2.3</code></p><p><strong>后者</strong></p><ol><li>title 中 不包含查询关键字，没有得分</li><li>content 中包含解决方案和 java，假设评分是 2</li><li>有得分的 query 数量，这里是 1</li><li>总的 query 数量也是 2</li></ol><p>最终结果：<code>2*1/2=1</code></p><p>在这种查询中，title 和 content 相当于是相互竞争的关系，所以我们需要找到一个最佳匹配字段。</p><p>为了解决这一问题，就需要用到 dis_max query（disjunction max query，分离最大化查询）：匹配的文档依然返回，但是只将最佳匹配的评分作为查询的评分。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "dis_max": {</span><br><span class="line">      "queries": [</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "title": "java解决方案"</span><br><span class="line">          }</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "match": {</span><br><span class="line">            "content": "java解决方案"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 14,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 1.1069256,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "HxK753gBeADYd85qCnLy",</span><br><span class="line">        "_score" : 1.1069256,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "初识 MongoDB",</span><br><span class="line">          "content" : "简单介绍一下 MongoDB，以及如何通过 Java 调用 MongoDB，MongoDB 是一个不错 NoSQL 解决方案"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "HhK653gBeADYd85qxnL3",</span><br><span class="line">        "_score" : 0.62177753,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "如何通过Java代码调用ElasticSearch",</span><br><span class="line">          "content" : "松哥力荐，这是一篇很好的解决方案"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 dis_max query 中，还有一个参数 <code>tie_breaker</code>（取值在0～1），在 dis_max query 中，是完全不考虑其他 query 的分数，只是将最佳匹配的字段的评分返回。但是，有的时候，我们又不得不考虑一下其他 query 的分数，此时，可以通过 <code>tie_breaker</code> 来优化 dis_max query。<code>tie_breaker</code> 会将其他 query 的分数，乘以 <code>tie_breaker</code>，然后和分数最高的 query 进行一个综合计算。</p><h3 id="17-4-function-score-query"><a href="#17-4-function-score-query" class="headerlink" title="17.4 function_score query"></a>17.4 function_score query</h3><p>场景：例如想要搜索附近的肯德基，搜索的关键字是肯德基，但是我希望能够将评分较高的肯德基优先展示出来。但是默认的评分策略是没有办法考虑到餐厅评分的，他只是考虑相关性，这个时候可以通过 function_score query 来实现。</p><p>准备两条测试数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT blog</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "title":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "votes":{</span><br><span class="line">        "type": "integer"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"Java集合详解",</span><br><span class="line">  "votes":100</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"Java多线程详解，Java锁详解",</span><br><span class="line">  "votes":10</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在搜索标题中包含 java 关键字的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "title": "java"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 3,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 0.22534126,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "2",</span><br><span class="line">        "_score" : 0.22534126,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "Java多线程详解，Java锁详解",</span><br><span class="line">          "votes" : 10</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "1",</span><br><span class="line">        "_score" : 0.21799318,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "Java集合详解",</span><br><span class="line">          "votes" : 100</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>默认情况下，id 为 2 的记录得分较高，因为他的 title 中包含两个 java。</p><p>如果我们在查询中，希望能够充分考虑 votes 字段，将 votes 较高的文档优先展示，就可以通过 function_score 来实现。</p><p>具体的思路，就是在旧的得分基础上，根据 votes 的数值进行综合运算，重新得出一个新的评分。</p><p>具体有几种不同的计算方式：</p><ul><li>weight</li><li>random_score</li><li>script_score</li><li>field_value_factor</li></ul><p><strong>weight</strong></p><p>weight 可以对评分设置权重，就是在旧的评分基础上乘以 weight，他其实无法解决我们上面所说的问题。具体用法如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "weight": 10</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 11,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 2.2534127,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "2",</span><br><span class="line">        "_score" : 2.2534127,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "Java多线程详解，Java锁详解",</span><br><span class="line">          "votes" : 10</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "blog",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "1",</span><br><span class="line">        "_score" : 2.1799319,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "title" : "Java集合详解",</span><br><span class="line">          "votes" : 100</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，此时的评分，在之前的评分基础上<code>*</code>10</p><p><strong>random_score</strong></p><p><code>random_score</code> 会根据 uid 字段进行 hash 运算，生成分数，使用 <code>random_score</code> 时可以配置一个种子，如果不配置，默认使用当前时间。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "random_score": {}</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>script_score</strong></p><p>自定义评分脚本。假设每个文档的最终得分是旧的分数加上votes。查询方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "script_score": {</span><br><span class="line">            "script": {</span><br><span class="line">              "lang": "painless",</span><br><span class="line">              "source": "_score + doc['votes'].value"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，最终得分是 <code>(oldScore+votes)*oldScore</code>。</p><p><strong>多了<code>，</code> 都会提示错误</strong></p><p>如果不想乘以 oldScore，查询方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "script_score": {</span><br><span class="line">            "script": {</span><br><span class="line">              "lang": "painless",</span><br><span class="line">              "source": "_score + doc['votes'].value"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "boost_mode": "replace"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 <code>boost_mode</code> 参数，可以设置最终的计算方式。该参数还有其他取值：</p><ul><li>multiply：分数相乘</li><li>sum：分数相加</li><li>avg：求平均数</li><li>max：最大分</li><li>min：最小分</li><li>replace：不进行二次计算</li></ul><p><strong>field_value_factor</strong></p><p>这个的功能类似于 <code>script_score</code>，但是不用自己写脚本。</p><p>假设每个文档的最终得分是旧的分数乘以votes。查询方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "field_value_factor": {</span><br><span class="line">            "field": "votes"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>默认的得分就是<code>oldScore*votes</code>。</p><p>还可以利用 es 内置的函数进行一些更复杂的运算：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "field_value_factor": {</span><br><span class="line">            "field": "votes",</span><br><span class="line">            "modifier": "sqrt"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "boost_mode": "replace"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时，最终的得分是（sqrt(votes)）。</p><p>modifier 中可以设置内置函数，其他的内置函数还有：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>none</td><td>默认的，不进行任何计算</td></tr><tr><td>log</td><td>对字段值取对数</td></tr><tr><td>log1p</td><td>字段值+1 然后取对数</td></tr><tr><td>log2p</td><td>字段值+2 然后取对数</td></tr><tr><td>ln</td><td>取字段值的自然对数</td></tr><tr><td>ln1p</td><td>字段值+1 然后取自然对数</td></tr><tr><td>ln2p</td><td>字段值+2 然后取自然对数</td></tr><tr><td>sqrt</td><td>字段值求平方根</td></tr><tr><td>square</td><td>字段值的平方</td></tr><tr><td>reciprocal</td><td>倒数</td></tr></tbody></table><p>另外还有个参数 factor ，影响因子。字段值先乘以影响因子，然后再进行计算。以 sqrt 为例，计算方式为 <code>sqrt(factor*votes)</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "field_value_factor": {</span><br><span class="line">            "field": "votes",</span><br><span class="line">            "modifier": "sqrt",</span><br><span class="line">            "factor": 10</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "boost_mode": "replace"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还有一个参数 <code>max_boost</code>，控制计算结果的范围：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "function_score": {</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "title": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "functions": [</span><br><span class="line">        {</span><br><span class="line">          "field_value_factor": {</span><br><span class="line">            "field": "votes"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "boost_mode": "sum",</span><br><span class="line">      "max_boost": 100</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>max_boost</code> 参数表示 functions 模块中，最终的计算结果上限。如果超过上限，就按照上线计算。</p><h3 id="17-5-boosting-query"><a href="#17-5-boosting-query" class="headerlink" title="17.5 boosting query"></a>17.5 boosting query</h3><p>boosting query 中包含三部分：</p><ul><li>positive：得分不变</li><li>negative：降低得分</li><li>negative_boost：降低的权重</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "boosting": {</span><br><span class="line">      "positive": {</span><br><span class="line">        "match": {</span><br><span class="line">          "name": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "negative": {</span><br><span class="line">        "match": {</span><br><span class="line">          "name": "2008"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "negative_boost": 0.5</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "took" : 15,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : {</span><br><span class="line">    "total" : 1,</span><br><span class="line">    "successful" : 1,</span><br><span class="line">    "skipped" : 0,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  },</span><br><span class="line">  "hits" : {</span><br><span class="line">    "total" : {</span><br><span class="line">      "value" : 2,</span><br><span class="line">      "relation" : "eq"</span><br><span class="line">    },</span><br><span class="line">    "max_score" : 4.5299835,</span><br><span class="line">    "hits" : [</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "549",</span><br><span class="line">        "_score" : 4.5299835,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "全国计算机等级考试笔试＋上机全真模拟：二级Java语言程序设计（最新版）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "考试认证",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "为了更好地服务于考生，引导考生尽快掌握考试大纲中要求的知识点和技能，顺利通过计算机等级考试，根据最新的考试大纲，高等教育出版社组织长期从事计算机等级考试命题研究和培训工作的专家编写了这套“笔试+上机考试全真模拟”，全面模拟考试真题，让考生在做题的同时全面巩固复习考点，提前熟悉考试环境，在短时间内冲刺过关。本书内容包括20套笔试模拟题和20套上机模拟题，还给出了参考答案和解析，尤其适合参加计算机等级考试的考生考前实战演练。",</span><br><span class="line">          "price" : 30</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        "_index" : "books",</span><br><span class="line">        "_type" : "_doc",</span><br><span class="line">        "_id" : "86",</span><br><span class="line">        "_score" : 2.5018067,</span><br><span class="line">        "_source" : {</span><br><span class="line">          "name" : "全国计算机等级考试2级教程：Java语言程序设计（2008年版）",</span><br><span class="line">          "publish" : "高等教育出版社",</span><br><span class="line">          "type" : "计算机考试",</span><br><span class="line">          "author" : "",</span><br><span class="line">          "info" : "由国家教育部考试中心推出的计算机等级考试是一种客观、公正、科学的专门测试计算机应用人员的计算机知识与技能的全国性考试，它面向社会，服务于社会。本书在教育部考试中心组织下、在全国计算机等级考试委员会指导下，由有关专家执笔编写而成。本书按照《全国计算机等级考试二级Java语言程序设计考试大纲（2007年版）》的要求编写，内容包括：Java体系结构、基本数据类型、流程控制语句、类、数组和字符串操作、输入输出及文件操作、图形用户界面编写、线程和串行化技术、A程序设计以及应用开发工具和安装使用等。本书是参加全国计算机等级考试二级Java语言程序设计的考生的良师益友，是教育部考试中心指定教材，也可作为欲学习Java编程的读者的参考书。",</span><br><span class="line">          "price" : 37</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，id 为 86 的文档满足条件，因此它的最终得分在旧的分数上<code>*0.5</code>。</p><h2 id="18-ElasticSearch-嵌套查询"><a href="#18-ElasticSearch-嵌套查询" class="headerlink" title="18.ElasticSearch 嵌套查询"></a>18.ElasticSearch 嵌套查询</h2><p>关系型数据库中有表的关联关系，在 es 中，我们也有类似的需求，例如订单表和商品表，在 es 中，这样的一对多一般来说有两种方式：</p><ul><li>嵌套文档（nested）</li><li>父子文档</li></ul><h3 id="18-1-嵌套文档"><a href="#18-1-嵌套文档" class="headerlink" title="18.1 嵌套文档"></a>18.1 嵌套文档</h3><p>假设：有一个电影文档，每个电影都有演员信息：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">PUT movies</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "actors":{</span><br><span class="line">        "type": "nested"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">PUT movies/_doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"霸王别姬",</span><br><span class="line">  "actors":[</span><br><span class="line">    {</span><br><span class="line">      "name":"张国荣",</span><br><span class="line">      "gender":"男"</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "name":"巩俐",</span><br><span class="line">      "gender":"女"</span><br><span class="line">    }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意 actors 类型要是 nested，具体原因参考 10.2.3 小节。</p><p><strong>缺点</strong></p><p>查看文档数量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/indices?v</span><br></pre></td></tr></tbody></table></figure><p>查看结果如下：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210419181937.png" alt="image-20210419181937314"></p><p>添加了1个文档，显示存了3个</p><p>这是因为 nested 文档在 es 内部其实也是独立的 lucene 文档，只是在我们查询的时候，es 内部帮我们做了 join 处理，所以最终看起来就像一个独立文档一样。因此这种方案性能并不是特别好。</p><h3 id="18-2-嵌套查询"><a href="#18-2-嵌套查询" class="headerlink" title="18.2 嵌套查询"></a>18.2 嵌套查询</h3><p>这个用来查询嵌套文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET movies/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "nested": {</span><br><span class="line">      "path": "actors",</span><br><span class="line">      "query": {</span><br><span class="line">        "bool": {</span><br><span class="line">          "must": [</span><br><span class="line">            {</span><br><span class="line">              "match": {</span><br><span class="line">                "actors.name": "张国荣"</span><br><span class="line">              }</span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">              "match": {</span><br><span class="line">                "actors.gender": "男"</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          ]</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="18-3-父子文档"><a href="#18-3-父子文档" class="headerlink" title="18.3 父子文档"></a>18.3 父子文档</h3><p>相比于嵌套文档，父子文档主要有如下优势：</p><ul><li>更新父文档时，不会重新索引子文档</li><li>创建、修改或者删除子文档时，不会影响父文档或者其他的子文档。</li><li>子文档可以作为搜索结果独立返回。</li></ul><p>例如学生和班级的关系：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT stu_class</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "s_c":{</span><br><span class="line">        "type": "join",</span><br><span class="line">        "relations":{</span><br><span class="line">          "class":"student"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>s_c</code> 表示父子文档关系的名字，可以自定义。join 表示这是一个父子文档。relations 里边，class 这个位置是 parent，student 这个位置是 child。</p><p>接下来，插入两个父文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT stu_class/_doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"一班",</span><br><span class="line">  "s_c":{</span><br><span class="line">    "name":"class"</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">PUT stu_class/_doc/2</span><br><span class="line">{</span><br><span class="line">  "name":"二班",</span><br><span class="line">  "s_c":{</span><br><span class="line">    "name":"class"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再来添加三个子文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT stu_class/_doc/3?routing=1</span><br><span class="line">{</span><br><span class="line">  "name":"zhangsan",</span><br><span class="line">  "s_c":{</span><br><span class="line">    "name":"student",</span><br><span class="line">    "parent":1</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">PUT stu_class/_doc/4?routing=1</span><br><span class="line">{</span><br><span class="line">  "name":"lisi",</span><br><span class="line">  "s_c":{</span><br><span class="line">    "name":"student",</span><br><span class="line">    "parent":1</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">PUT stu_class/_doc/5?routing=2</span><br><span class="line">{</span><br><span class="line">  "name":"wangwu",</span><br><span class="line">  "s_c":{</span><br><span class="line">    "name":"student",</span><br><span class="line">    "parent":2</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>首先大家可以看到，子文档都是独立的文档。特别需要注意的地方是，子文档需要和父文档在同一个分片上，所以 routing 关键字的值为父文档的 id。另外，name 属性表明这是一个子文档。</p><p>父子文档需要注意的地方：</p><ol><li>每个索引只能定义一个 join filed</li><li>父子文档需要在同一个分片上（查询，修改需要routing）</li><li>可以向一个已经存在的 join filed 上新增关系</li></ol><h3 id="18-4-has-child-query"><a href="#18-4-has-child-query" class="headerlink" title="18.4 has_child query"></a>18.4 has_child query</h3><p>通过子文档查询父文档使用 <code>has_child</code> query。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET stu_class/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "has_child": {</span><br><span class="line">      "type": "student",</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "name": "wangwu"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询 wangwu 所属的班级。</p><h3 id="18-5-has-parent-query"><a href="#18-5-has-parent-query" class="headerlink" title="18.5 has_parent query"></a>18.5 has_parent query</h3><p>通过父文档查询子文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET stu_class/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "has_parent": {</span><br><span class="line">      "parent_type": "class",</span><br><span class="line">      "query": {</span><br><span class="line">        "match": {</span><br><span class="line">          "name": "二班"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询二班的学生。但是大家注意，<strong>这种查询没有评分。</strong></p><p>可以使用 parent id 查询子文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET stu_class/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "parent_id":{</span><br><span class="line">      "type":"student",</span><br><span class="line">      "id":1</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 parent id 查询，默认情况下使<strong>用相关性计算分数</strong>。</p><h3 id="18-6-小结"><a href="#18-6-小结" class="headerlink" title="18.6 小结"></a>18.6 小结</h3><p>整体上来说：</p><ol><li>普通子对象实现一对多，会损失子文档的边界，子对象之间的属性关系丢失。</li><li>nested 可以解决第 1 点的问题，但是 nested 有两个缺点：更新主文档的时候要全部更新，不支持子文档属于多个主文档。<ol><li>父子文档解决 1、2 点的问题，但是它主要适用于<strong>写多读少</strong>的场景。</li></ol></li></ol><h2 id="19-ElasticSearch-地理位置查询"><a href="#19-ElasticSearch-地理位置查询" class="headerlink" title="19.ElasticSearch 地理位置查询"></a>19.ElasticSearch 地理位置查询</h2><h3 id="19-1-数据准备"><a href="#19-1-数据准备" class="headerlink" title="19.1 数据准备"></a>19.1 数据准备</h3><p>创建一个索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT geo</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "location":{</span><br><span class="line">        "type": "geo_point"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>准备一个 geo.json 文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">{"index":{"_index":"geo","_id":1}}</span><br><span class="line">{"name":"西安","location":"34.288991865037524,108.9404296875"}</span><br><span class="line">{"index":{"_index":"geo","_id":2}}</span><br><span class="line">{"name":"北京","location":"39.926588421909436,116.43310546875"}</span><br><span class="line">{"index":{"_index":"geo","_id":3}}</span><br><span class="line">{"name":"上海","location":"31.240985378021307,121.53076171875"}</span><br><span class="line">{"index":{"_index":"geo","_id":4}}</span><br><span class="line">{"name":"天津","location":"39.13006024213511,117.20214843749999"}</span><br><span class="line">{"index":{"_index":"geo","_id":5}}</span><br><span class="line">{"name":"杭州","location":"30.259067203213018,120.21240234375001"}</span><br><span class="line">{"index":{"_index":"geo","_id":6}}</span><br><span class="line">{"name":"武汉","location":"30.581179257386985,114.3017578125"}</span><br><span class="line">{"index":{"_index":"geo","_id":7}}</span><br><span class="line">{"name":"合肥","location":"31.840232667909365,117.20214843749999"}</span><br><span class="line">{"index":{"_index":"geo","_id":8}}</span><br><span class="line">{"name":"重庆","location":"29.592565403314087,106.5673828125"}</span><br></pre></td></tr></tbody></table></figure><p>最后，执行如下命令，批量导入 geo.json 数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST "http://localhost:9200/geo/_bulk?pretty" -H "content-type:application/json" --data-binary @geo.json</span><br></pre></td></tr></tbody></table></figure><p>可能用到的工具网站：</p><p><a href="http://geojson.io/#map=6/32.741/116.521">http://geojson.io/#map=6/32.741/116.521</a></p><h3 id="19-2-geo-distance-query"><a href="#19-2-geo-distance-query" class="headerlink" title="19.2 geo_distance query"></a>19.2 geo_distance query</h3><p>给出一个中心点，查询距离该中心点指定范围内的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET geo/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match_all": {}</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        {</span><br><span class="line">          "geo_distance": {</span><br><span class="line">            "distance": "600km",</span><br><span class="line">            "location": {</span><br><span class="line">              "lat": 34.288991865037524,</span><br><span class="line">              "lon": 108.9404296875</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以(34.288991865037524,108.9404296875) 为圆心，以 600KM 为半径，这个范围内的数据。</p><h3 id="19-3-geo-bounding-box-query"><a href="#19-3-geo-bounding-box-query" class="headerlink" title="19.3 geo_bounding_box query"></a>19.3 geo_bounding_box query</h3><p>在某一个矩形内的点，通过两个点锁定一个矩形：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET geo/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match_all": {}</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        {</span><br><span class="line">          "geo_bounding_box": {</span><br><span class="line">            "location": {</span><br><span class="line">              "top_left": {</span><br><span class="line">                "lat": 32.0639555946604,</span><br><span class="line">                "lon": 118.78967285156249</span><br><span class="line">              },</span><br><span class="line">              "bottom_right": {</span><br><span class="line">                "lat": 29.98824461550903,</span><br><span class="line">                "lon": 122.20642089843749</span><br><span class="line">              }</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以南京经纬度作为矩形的左上角，以舟山经纬度作为矩形的右下角，构造出来的矩形中，包含上海和杭州两个城市。</p><h3 id="19-4-geo-polygon-query"><a href="#19-4-geo-polygon-query" class="headerlink" title="19.4 geo_polygon query"></a>19.4 geo_polygon query</h3><p>在某一个多边形范围内的查询。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET geo/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match_all": {}</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        {</span><br><span class="line">          "geo_polygon": {</span><br><span class="line">            "location": {</span><br><span class="line">              "points": [</span><br><span class="line">                {</span><br><span class="line">                  "lat": 31.793755581217674,</span><br><span class="line">                  "lon": 113.8238525390625</span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                  "lat": 30.007273923504556,</span><br><span class="line">                  "lon":114.224853515625</span><br><span class="line">                },</span><br><span class="line">                {</span><br><span class="line">                  "lat": 30.007273923504556,</span><br><span class="line">                  "lon":114.8345947265625</span><br><span class="line">                }</span><br><span class="line">              ]</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>给定多个点，由多个点组成的多边形中的数据。    </p><p>es7.12出现提示 #! Deprecated field [geo_polygon] used, replaced by [[geo_shape] query where polygons are defined in geojson or wkt]</p><h3 id="19-5-geo-shape-query"><a href="#19-5-geo-shape-query" class="headerlink" title="19.5 geo_shape query"></a>19.5 geo_shape query</h3><p><code>geo_shape</code> 用来查询图形，针对 <code>geo_shape</code>，两个图形之间的关系有：相交、包含、不相交。</p><p>新建索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT geo_shape</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "location":{</span><br><span class="line">        "type": "geo_shape"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后添加一条线：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT geo_shape/_doc/1</span><br><span class="line">{</span><br><span class="line">  "name":"西安-郑州",</span><br><span class="line">  "location":{</span><br><span class="line">    "type":"linestring",</span><br><span class="line">    "coordinates":[</span><br><span class="line">      [108.9404296875,34.279914398549934],</span><br><span class="line">      [113.66455078125,34.768691457552706]</span><br><span class="line">      ]</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来查询某一个图形中是否包含该线：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET geo_shape/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "must": [</span><br><span class="line">        {</span><br><span class="line">          "match_all": {}</span><br><span class="line">        }</span><br><span class="line">      ],</span><br><span class="line">      "filter": [</span><br><span class="line">        {</span><br><span class="line">          "geo_shape": {</span><br><span class="line">            "location": {</span><br><span class="line">              "shape": {</span><br><span class="line">                "type": "envelope",</span><br><span class="line">                "coordinates": [</span><br><span class="line">                  [</span><br><span class="line">            106.5234375,</span><br><span class="line">            36.80928470205937</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            115.33447265625,</span><br><span class="line">            32.24997445586331</span><br><span class="line">          ]</span><br><span class="line">                ]</span><br><span class="line">              },</span><br><span class="line">              "relation": "within"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>relation 属性表示两个图形的关系：</p><ul><li>within 包含</li><li>intersects 相交</li><li>disjoint 不相交</li></ul><h2 id="20-ElasticSearch-特殊查询"><a href="#20-ElasticSearch-特殊查询" class="headerlink" title="20.ElasticSearch 特殊查询"></a>20.ElasticSearch 特殊查询</h2><h3 id="20-1-more-like-this-query"><a href="#20-1-more-like-this-query" class="headerlink" title="20.1 more_like_this query"></a>20.1 more_like_this query</h3><p><code>more_like_this</code> query 可以实现基于内容的推荐，给定一篇文章，可以查询出和该文章相似的内容。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "more_like_this": {</span><br><span class="line">      "fields": [</span><br><span class="line">        "info"</span><br><span class="line">      ],</span><br><span class="line">      "like": "大学战略",</span><br><span class="line">      "min_term_freq": 1,</span><br><span class="line">      "max_query_terms": 12</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>fields：要匹配的字段，可以有多个</li><li>like：要匹配的文本</li><li>min_term_freq：词项的最低频率，默认是 2。<strong>特别注意，这个是指词项在要匹配的文本中的频率，而不是 es 文档中的频率</strong></li><li>max_query_terms：query 中包含的最大词项数目</li><li>min_doc_freq：最小的文档频率，搜索的词，至少在多少个文档中出现，少于指定数目，该词会被忽略</li><li>max_doc_freq：最大文档频率</li><li>analyzer：分词器，默认使用字段的分词器</li><li>stop_words：停用词列表</li><li>minmum_should_match</li></ul><h3 id="20-2-script-query"><a href="#20-2-script-query" class="headerlink" title="20.2 script query"></a>20.2 script query</h3><p>脚本查询，例如查询所有价格大于 200 的图书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "bool": {</span><br><span class="line">      "filter": [</span><br><span class="line">        {</span><br><span class="line">          "script": {</span><br><span class="line">            "script": {</span><br><span class="line">              "lang": "painless",</span><br><span class="line">              "source": "if(doc['price'].size()!=0){doc['price'].value &gt; 200}"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="20-3-percolate-query"><a href="#20-3-percolate-query" class="headerlink" title="20.3 percolate query"></a>20.3 percolate query</h3><p>percolate query 译作渗透查询或者反向查询。</p><ul><li>正常操作：根据查询语句找到对应的文档 query-&gt;document</li><li>percolate query：根据文档，返回与之匹配的查询语句，document-&gt;query</li></ul><p>应用场景：</p><ul><li>价格监控</li><li>库存报警</li><li>股票警告</li><li>…</li></ul><p>例如阈值告警，假设指定字段值大于阈值，报警提示。</p><p>percolate mapping 定义：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT log</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "threshold":{</span><br><span class="line">        "type": "long"</span><br><span class="line">      },</span><br><span class="line">      "count":{</span><br><span class="line">        "type": "long"</span><br><span class="line">      },</span><br><span class="line">      "query":{</span><br><span class="line">        "type":"percolator"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>percolator 类型相当于 keyword、long 以及 integer 等。</p><p>插入文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT log/_doc/1</span><br><span class="line">{</span><br><span class="line">  "threshold":10,</span><br><span class="line">  "query":{</span><br><span class="line">    "bool":{</span><br><span class="line">      "must":{</span><br><span class="line">        "range":{</span><br><span class="line">          "count":{</span><br><span class="line">            "gt":10</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后查询：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET log/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "percolate": {</span><br><span class="line">      "field": "query",</span><br><span class="line">      "documents": [</span><br><span class="line">        {</span><br><span class="line">          "count":3</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "count":6</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "count":90</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "count":12</span><br><span class="line">        },</span><br><span class="line">        {</span><br><span class="line">          "count":15</span><br><span class="line">        }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查询结果中会列出不满足条件的文档。</p><p>查询结果中的 <code>_percolator_document_slot</code> 字段表示文档的 position，从 0 开始计。</p><h2 id="21-ElasticSearch-搜索高亮与排序"><a href="#21-ElasticSearch-搜索高亮与排序" class="headerlink" title="21.ElasticSearch 搜索高亮与排序"></a>21.ElasticSearch 搜索高亮与排序</h2><h3 id="21-1-搜索高亮"><a href="#21-1-搜索高亮" class="headerlink" title="21.1 搜索高亮"></a>21.1 搜索高亮</h3><p>普通高亮，默认会自动添加 em 标签：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "大学"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "fields": {</span><br><span class="line">      "name": {}</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>正常来说，我们见到的高亮可能是红色、黄色之类的。</p><p>可以自定义高亮标签：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "大学"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "fields": {</span><br><span class="line">      "name": {</span><br><span class="line">        "pre_tags": ["&lt;strong&gt;"],</span><br><span class="line">        "post_tags": ["&lt;/strong&gt;"]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>有的时候，虽然我们是在 name 字段中搜索的，但是我们希望 info 字段中，相关的关键字也能高亮：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match": {</span><br><span class="line">      "name": "大学"</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "highlight": {</span><br><span class="line">    "require_field_match": "false", </span><br><span class="line">    "fields": {</span><br><span class="line">      "name": {</span><br><span class="line">        "pre_tags": ["&lt;strong&gt;"],</span><br><span class="line">        "post_tags": ["&lt;/strong&gt;"]</span><br><span class="line">      },</span><br><span class="line">      "info": {</span><br><span class="line">        "pre_tags": ["&lt;strong&gt;"],</span><br><span class="line">        "post_tags": ["&lt;/strong&gt;"]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>require_field_match</strong></p><p>By default, only fields that contains a query match are highlighted. Set <code>require_field_match</code> to <code>false</code> to highlight all fields. Defaults to <code>true</code>.</p><h3 id="21-2-排序"><a href="#21-2-排序" class="headerlink" title="21.2 排序"></a>21.2 排序</h3><p>排序很简单，默认是按照查询文档的相关度来排序的，即（<code>_score</code> 字段）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": {</span><br><span class="line">        "value": "java"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>等价于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "term": {</span><br><span class="line">      "name": {</span><br><span class="line">        "value": "java"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  "sort": [</span><br><span class="line">    {</span><br><span class="line">      "_score": {</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>match_all 查询只是返回所有文档，不评分，默认按照添加顺序返回，可以通过 <code>_doc</code> 字段对其进行排序：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  },</span><br><span class="line">  "sort": [</span><br><span class="line">    {</span><br><span class="line">      "_doc": {</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  "size": 20</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>es 同时也支持多字段排序。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "query": {</span><br><span class="line">    "match_all": {}</span><br><span class="line">  },</span><br><span class="line">  "sort": [</span><br><span class="line">    {</span><br><span class="line">      "price": {</span><br><span class="line">        "order": "asc"</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">      "_doc": {</span><br><span class="line">        "order": "desc"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  ],</span><br><span class="line">  "size": 20</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="22-ElasticSearch-指标聚合"><a href="#22-ElasticSearch-指标聚合" class="headerlink" title="22.ElasticSearch 指标聚合"></a>22.ElasticSearch 指标聚合</h2><h3 id="22-1-Max-Aggregation"><a href="#22-1-Max-Aggregation" class="headerlink" title="22.1 Max Aggregation"></a>22.1 Max Aggregation</h3><p>统计最大值。例如查询价格最高的书：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "max_price": {</span><br><span class="line">      "max": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "max_price": {</span><br><span class="line">      "max": {</span><br><span class="line">        "field": "price",</span><br><span class="line">        "missing": 1000</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果某个文档中缺少 price 字段，则设置该字段的值为 1000。</p><p>也可以通过脚本来查询最大值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "max_price": {</span><br><span class="line">      "max": {</span><br><span class="line">        "script": {</span><br><span class="line">          "source": "if(doc['price'].size()!=0){doc.price.value}"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用脚本时，可以先通过 <code>doc['price'].size()!=0</code> 去判断文档是否有对应的属性。</p><h3 id="22-2-Min-Aggregation"><a href="#22-2-Min-Aggregation" class="headerlink" title="22.2 Min Aggregation"></a>22.2 Min Aggregation</h3><p>统计最小值，用法和 Max Aggregation 基本一致：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "min_price": {</span><br><span class="line">      "min": {</span><br><span class="line">        "field": "price",</span><br><span class="line">        "missing": 1000</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>脚本：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "min_price": {</span><br><span class="line">      "min": {</span><br><span class="line">        "script": {</span><br><span class="line">          "source": "if(doc['price'].size()!=0){doc.price.value}"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-3-Avg-Aggregation"><a href="#22-3-Avg-Aggregation" class="headerlink" title="22.3 Avg Aggregation"></a>22.3 Avg Aggregation</h3><p>统计平均值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "avg_price": {</span><br><span class="line">      "avg": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "avg_price": {</span><br><span class="line">      "avg": {</span><br><span class="line">        "script": {</span><br><span class="line">          "source": "if(doc['price'].size()!=0){doc.price.value}"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-4-Sum-Aggregation"><a href="#22-4-Sum-Aggregation" class="headerlink" title="22.4 Sum Aggregation"></a>22.4 Sum Aggregation</h3><p>求和：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "sum_price": {</span><br><span class="line">      "sum": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "sum_price": {</span><br><span class="line">      "sum": {</span><br><span class="line">        "script": {</span><br><span class="line">          "source": "if(doc['price'].size()!=0){doc.price.value}"</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-5-Cardinality-Aggregation"><a href="#22-5-Cardinality-Aggregation" class="headerlink" title="22.5 Cardinality Aggregation"></a>22.5 Cardinality Aggregation</h3><p>cardinality aggregation 用于基数统计。类似于 SQL 中的 distinct count(0)：</p><p>text 类型是分析型类型，默认是不允许进行聚合操作的，如果相对 text 类型进行聚合操作，需要设置其 fielddata 属性为 true，这种方式虽然可以使 text 类型进行聚合操作，但是无法满足精准聚合，如果需要精准聚合，可以设置字段的子域为 keyword。</p><p><strong>方式一：</strong></p><p>重新定义 books 索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT books</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "publish":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word",</span><br><span class="line">        "fielddata": true</span><br><span class="line">      },</span><br><span class="line">      "type":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "author":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "info":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type": "double"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>定义完成后，重新插入数据（参考之前的视频）。</p><p>接下来就可以查询出版社的总数量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "publish_count": {</span><br><span class="line">      "cardinality": {</span><br><span class="line">        "field": "publish"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这种聚合方式可能会不准确。可以将 publish 设置为 keyword 类型或者设置子域为 keyword。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PUT books</span><br><span class="line">{</span><br><span class="line">  "mappings": {</span><br><span class="line">    "properties": {</span><br><span class="line">      "name":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "publish":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "type":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "author":{</span><br><span class="line">        "type": "keyword"</span><br><span class="line">      },</span><br><span class="line">      "info":{</span><br><span class="line">        "type": "text",</span><br><span class="line">        "analyzer": "ik_max_word"</span><br><span class="line">      },</span><br><span class="line">      "price":{</span><br><span class="line">        "type": "double"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对比查询结果可知，使用 fileddata 的方式，查询结果不准确。</p><h3 id="22-6-Stats-Aggregation"><a href="#22-6-Stats-Aggregation" class="headerlink" title="22.6 Stats Aggregation"></a>22.6 Stats Aggregation</h3><p>基本统计，一次性返回 count、max、min、avg、sum：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "stats_query": {</span><br><span class="line">      "stats": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-7-Extends-Stats-Aggregation"><a href="#22-7-Extends-Stats-Aggregation" class="headerlink" title="22.7 Extends Stats Aggregation"></a>22.7 Extends Stats Aggregation</h3><p>高级统计，比 stats 多出来：平方和、方差、标准差、平均值加减两个标准差的区间：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "es": {</span><br><span class="line">      "extended_stats": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-8-Percentiles-Aggregation"><a href="#22-8-Percentiles-Aggregation" class="headerlink" title="22.8 Percentiles Aggregation"></a>22.8 Percentiles Aggregation</h3><p>百分位统计。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "p": {</span><br><span class="line">      "percentiles": {</span><br><span class="line">        "field": "price",</span><br><span class="line">        "percents": [</span><br><span class="line">          1,</span><br><span class="line">          5,</span><br><span class="line">          10,</span><br><span class="line">          15,</span><br><span class="line">          25,</span><br><span class="line">          50,</span><br><span class="line">          75,</span><br><span class="line">          95,</span><br><span class="line">          99</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="22-9-Value-Count-Aggregation"><a href="#22-9-Value-Count-Aggregation" class="headerlink" title="22.9 Value Count Aggregation"></a>22.9 Value Count Aggregation</h3><p>可以按照字段统计文档数量（包含指定字段的文档数量）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "count": {</span><br><span class="line">      "value_count": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="23-ElasticSearch-桶聚合（bucket）"><a href="#23-ElasticSearch-桶聚合（bucket）" class="headerlink" title="23.ElasticSearch 桶聚合（bucket）"></a>23.ElasticSearch 桶聚合（bucket）</h2><h3 id="23-1-Terms-Aggregation"><a href="#23-1-Terms-Aggregation" class="headerlink" title="23.1 Terms Aggregation"></a>23.1 Terms Aggregation</h3><p>Terms Aggregation 用于分组聚合，例如，统计各个出版社出版的图书总数量:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 20</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 terms 分桶的基础上，还可以对每个桶进行指标聚合。</p><p>统计不同出版社所出版的图书的平均价格：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 20</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "avg_price": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-2-Filter-Aggregation"><a href="#23-2-Filter-Aggregation" class="headerlink" title="23.2 Filter Aggregation"></a>23.2 Filter Aggregation</h3><p>过滤器聚合。可以将符合过滤器中条件的文档分到一个桶中，然后可以求其平均值。</p><p>例如查询书名中包含 java 的图书的平均价格：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "filter": {</span><br><span class="line">        "term": {</span><br><span class="line">          "name": "java"</span><br><span class="line">        }</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "avg_price": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-3-Filters-Aggregation"><a href="#23-3-Filters-Aggregation" class="headerlink" title="23.3 Filters Aggregation"></a>23.3 Filters Aggregation</h3><p>多过滤器聚合。过滤条件可以有多个。</p><p>例如查询书名中包含 java 或者 office 的图书的平均价格：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "filters": {</span><br><span class="line">        "filters": [</span><br><span class="line">          {</span><br><span class="line">            "term":{</span><br><span class="line">              "name":"java"</span><br><span class="line">            }</span><br><span class="line">          },{</span><br><span class="line">            "term":{</span><br><span class="line">              "name":"office"</span><br><span class="line">            }</span><br><span class="line">          }</span><br><span class="line">          ]</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "avg_price": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-4-Range-Aggregation"><a href="#23-4-Range-Aggregation" class="headerlink" title="23.4 Range Aggregation"></a>23.4 Range Aggregation</h3><p>按照范围聚合，在某一个范围内的文档数统计。</p><p>例如统计图书价格在 0-50、50-100、100-150、150以上的图书数量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "range": {</span><br><span class="line">        "field": "price",</span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "to": 50</span><br><span class="line">          },{</span><br><span class="line">            "from": 50,</span><br><span class="line">            "to": 100</span><br><span class="line">          },{</span><br><span class="line">            "from": 100,</span><br><span class="line">            "to": 150</span><br><span class="line">          },{</span><br><span class="line">            "from": 150</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-5-Date-Range-Aggregation"><a href="#23-5-Date-Range-Aggregation" class="headerlink" title="23.5 Date Range Aggregation"></a>23.5 Date Range Aggregation</h3><p>Range Aggregation 也可以用来统计日期，但是也可以使用 Date Range Aggregation，后者的优势在于可以使用日期表达式。</p><p>造数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT blog/_doc/1</span><br><span class="line">{</span><br><span class="line">  "title":"java",</span><br><span class="line">  "date":"2018-12-30"</span><br><span class="line">}</span><br><span class="line">PUT blog/_doc/2</span><br><span class="line">{</span><br><span class="line">  "title":"java",</span><br><span class="line">  "date":"2020-12-30"</span><br><span class="line">}</span><br><span class="line">PUT blog/_doc/3</span><br><span class="line">{</span><br><span class="line">  "title":"java",</span><br><span class="line">  "date":"2022-10-30"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>统计一年前到一年后的博客数量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "date_range": {</span><br><span class="line">        "field": "date",</span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "from": "now-12M/M",</span><br><span class="line">            "to": "now+1y/y"</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>12M/M 表示 12 个月。</li><li>1y/y 表示 1年。</li><li>d 表示天</li></ul><h3 id="23-6-Date-Histogram-Aggregation"><a href="#23-6-Date-Histogram-Aggregation" class="headerlink" title="23.6 Date Histogram Aggregation"></a>23.6 Date Histogram Aggregation</h3><p>时间直方图聚合。</p><p>例如统计各个月份的博客数量</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "date_histogram": {</span><br><span class="line">        "field": "date",</span><br><span class="line">        "calendar_interval": "month"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-7-Missing-Aggregation"><a href="#23-7-Missing-Aggregation" class="headerlink" title="23.7 Missing Aggregation"></a>23.7 Missing Aggregation</h3><p>空值聚合。</p><p>统计所有没有 price 字段的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "missing": {</span><br><span class="line">        "field": "price"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-8-Children-Aggregation"><a href="#23-8-Children-Aggregation" class="headerlink" title="23.8 Children Aggregation"></a>23.8 Children Aggregation</h3><p>可以根据父子文档关系进行分桶。</p><p>查询子类型为 student 的文档数量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET stu_class/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "children": {</span><br><span class="line">        "type": "student"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-9-Geo-Distance-Aggregation"><a href="#23-9-Geo-Distance-Aggregation" class="headerlink" title="23.9 Geo Distance Aggregation"></a>23.9 Geo Distance Aggregation</h3><p>对地理位置数据做统计。</p><p>例如查询(34.288991865037524,108.9404296875)坐标方圆 600KM 和 超过 600KM 的城市数量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET geo/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "geo_distance": {</span><br><span class="line">        "field": "location",</span><br><span class="line">        "origin": "34.288991865037524,108.9404296875",</span><br><span class="line">        "unit": "km", </span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "to": 600</span><br><span class="line">          },{</span><br><span class="line">            "from": 600</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="23-10-IP-Range-Aggregation"><a href="#23-10-IP-Range-Aggregation" class="headerlink" title="23.10 IP Range Aggregation"></a>23.10 IP Range Aggregation</h3><p>IP 地址范围查询。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET blog/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "NAME": {</span><br><span class="line">      "ip_range": {</span><br><span class="line">        "field": "ip",</span><br><span class="line">        "ranges": [</span><br><span class="line">          {</span><br><span class="line">            "from": "127.0.0.5",</span><br><span class="line">            "to": "127.0.0.11"</span><br><span class="line">          }</span><br><span class="line">        ]</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="24-ElasticSearch-管道聚合-类似于linux的-管道符"><a href="#24-ElasticSearch-管道聚合-类似于linux的-管道符" class="headerlink" title="24.ElasticSearch 管道聚合 类似于linux的 | 管道符"></a>24.ElasticSearch 管道聚合 类似于linux的 | 管道符</h2><p>管道聚合相当于在之前聚合的基础上，再次聚合。</p><h3 id="24-1-Avg-Bucket-Aggregation"><a href="#24-1-Avg-Bucket-Aggregation" class="headerlink" title="24.1 Avg Bucket Aggregation"></a>24.1 Avg Bucket Aggregation</h3><p>计算聚合平均值。例如，统计每个出版社所出版图书的平均值，然后再统计所有出版社的平均值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "avg_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-2-Max-Bucket-Aggregation"><a href="#24-2-Max-Bucket-Aggregation" class="headerlink" title="24.2 Max Bucket Aggregation"></a>24.2 Max Bucket Aggregation</h3><p>统计每个出版社所出版图书的平均值，然后再统计平均值中的最大值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "max_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-3-Min-Bucket-Aggregation"><a href="#24-3-Min-Bucket-Aggregation" class="headerlink" title="24.3 Min Bucket Aggregation"></a>24.3 Min Bucket Aggregation</h3><p>统计每个出版社所出版图书的平均值，然后再统计平均值中的最小值：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "min_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-4-Sum-Bucket-Aggregation"><a href="#24-4-Sum-Bucket-Aggregation" class="headerlink" title="24.4 Sum Bucket Aggregation"></a>24.4 Sum Bucket Aggregation</h3><p>统计每个出版社所出版图书的平均值，然后再统计平均值之和：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "sum_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-5-Stats-Bucket-Aggregation"><a href="#24-5-Stats-Bucket-Aggregation" class="headerlink" title="24.5 Stats Bucket Aggregation"></a>24.5 Stats Bucket Aggregation</h3><p>统计每个出版社所出版图书的平均值，然后再统计平均值的各种数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "stats_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-6-Extended-Stats-Bucket-Aggregation"><a href="#24-6-Extended-Stats-Bucket-Aggregation" class="headerlink" title="24.6 Extended Stats Bucket Aggregation"></a>24.6 Extended Stats Bucket Aggregation</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "extended_stats_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="24-7-Percentiles-Bucket-Aggregation"><a href="#24-7-Percentiles-Bucket-Aggregation" class="headerlink" title="24.7 Percentiles Bucket Aggregation"></a>24.7 Percentiles Bucket Aggregation</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET books/_search</span><br><span class="line">{</span><br><span class="line">  "aggs": {</span><br><span class="line">    "book_count": {</span><br><span class="line">      "terms": {</span><br><span class="line">        "field": "publish",</span><br><span class="line">        "size": 3</span><br><span class="line">      },</span><br><span class="line">      "aggs": {</span><br><span class="line">        "book_avg": {</span><br><span class="line">          "avg": {</span><br><span class="line">            "field": "price"</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    "avg_book":{</span><br><span class="line">      "percentiles_bucket": {</span><br><span class="line">        "buckets_path": "book_count&gt;book_avg"</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="25-ElasticSearch-Java-Api-概览"><a href="#25-ElasticSearch-Java-Api-概览" class="headerlink" title="25.ElasticSearch Java Api 概览"></a>25.ElasticSearch Java Api 概览</h2><p>Java操作Es的方案:</p><h3 id="1-直接使用Http请求"><a href="#1-直接使用Http请求" class="headerlink" title="1.直接使用Http请求"></a>1.直接使用Http请求</h3><p>以 HttpUrlConnection 为例，请求方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HttpRequestTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        URL url = new URL("http://localhost:9200/books/_search?pretty=true");</span><br><span class="line">        HttpURLConnection con = (HttpURLConnection) url.openConnection();</span><br><span class="line">        if (con.getResponseCode() == 200) {</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));</span><br><span class="line">            String str = null;</span><br><span class="line">            while ((str = br.readLine()) != null) {</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>弊端：需要自己组装请求参数，自己去解析响应的json</p><h3 id="2-Java-Low-Level-REST-Client"><a href="#2-Java-Low-Level-REST-Client" class="headerlink" title="2.Java Low Level REST Client"></a>2.Java Low Level REST Client</h3><p>从字面上来理解，这个叫做低级客户端。</p><p>它允许通过 Http 与一个 Elasticsearch 集群通信。将请求的 JSON 参数拼接和响应的 JSON 字符串解析留给用户自己处理。低级客户端最大的优势在于兼容所有的 ElasticSearch 的版本（因为它的 API 并没有封装 JSON 操作，所有的 JSON 操作还是由开发者自己完成），同时低级客户端要求 JDK 为 1.7 及以上。</p><p>低级客户端主要包括如下一些功能：</p><ul><li>最小的依赖</li><li>跨所有可用节点的负载均衡</li><li>节点故障和特定响应代码时的故障转移</li><li>连接失败重试（是否重试失败的节点取决于它失败的连续次数；失败次数越多，客户端在再次尝试同一节点之前等待的时间越长）</li><li>持久连接</li><li>跟踪请求和响应的日志记录</li><li>可选自动发现集群节点</li></ul><p>Java Low Level REST Client 的操作其实比较简单，松哥后面会录制一个视频和大家分享相关操作。</p><h3 id="3-Java-High-Level-REST-Client"><a href="#3-Java-High-Level-REST-Client" class="headerlink" title="3.Java High Level REST Client"></a>3.Java High Level REST Client</h3><p>从字面上来理解，这个叫做高级客户端，也是目前使用最多的一种客户端。它其实有点像之前的 TransportClient。</p><p>这个所谓的高级客户端它的内部其实还是基于低级客户端，只不过针对 ElasticSearch 它提供了更多的 API，将请求参数和响应参数都封装成了相应的 API，开发者只需要调用相关的方法就可以拼接参数或者解析响应结果。</p><p>Java High Level REST Client 中的每个 API 都可以同步或异步调用，同步方法返回一个响应对象，而异步方法的名称则以 Async 为后缀结尾，异步请求一般需要一个监听器参数，用来处理响应结果。</p><p>相对于低级客户端，高级客户端的兼容性就要差很多（因为 JSON 的拼接和解析它已经帮我们做好了）。高级客户端需要 JDK1.8 及以上版本并且依赖版本需要与 ElasticSearch 版本相同（主版本号需要一致，次版本号不必相同）。</p><p>举个简单例子：</p><p>7.0 客户端能够与任何 7.x ElasticSearch 节点进行通信，而 7.1 客户端肯定能够与 7.1，7.2 和任何后来的 7.x 版本进行通信，但与旧版本的 ElasticSearch 节点通信时可能会存在不兼容的问题。</p><h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h3><p>ElasticSearch 的 Java 客户端</p><ul><li><p>TransportClient</p></li><li><p>Jest</p></li><li><p>Spring Data Elasticsearch</p></li><li><p>Java Low Level REST Client</p></li><li><p>Java High Level REST Client</p></li></ul><p><strong>TransportClient</strong></p><p>官方已经不再推荐使用 TransportClient，并且表示会在 ElasticSearch8.0 中完全移除相关支持。</p><p><strong>Jest</strong></p><p>Jest 提供了更流畅的 API 和更容易使用的接口，并且它的版本是遵循 ElasticSearch 的主版本号的，这样可以确保客户端和服务端之间的兼容性。</p><p>早期的 ElasticSearch 官方客户端对 RESTful 支持不够完美， Jest 在一定程度上弥补了官方客户端的不足，但是随着近两年官方客户端对 RESTful 功能的增强，Jest 早已成了明日黄花，最近的一次更新也停留在 2018 年 4 月，所以 Jest 小伙伴们也不必花时间去学了，知道曾经有过这么一个东西就行了。</p><p><strong>Spring Data Elasticsearch</strong></p><p>Spring Data 是 Spring 的一个子项目。用于简化数据库访问，支持NoSQL 和关系数据存储。其主要目标是使数据库的访问变得方便快捷。Spring Data 具有如下特点：</p><p>Spring Data 项目支持 NoSQL 存储：</p><ul><li>MongoDB （文档数据库）</li><li>Neo4j（图形数据库）</li><li>Redis（键/值存储）</li><li>Hbase（列族数据库）</li><li>ElasticSearch</li></ul><p>Spring Data 项目所支持的关系数据存储技术：</p><ul><li>JDBC</li><li>JPA</li></ul><h2 id="26-ElasticSearch普通HTTP请求"><a href="#26-ElasticSearch普通HTTP请求" class="headerlink" title="26.ElasticSearch普通HTTP请求"></a>26.ElasticSearch普通HTTP请求</h2><p>以 HttpUrlConnection 为例，请求方式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HttpRequestTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        URL url = new URL("http://localhost:9200/books/_search?pretty=true");</span><br><span class="line">        HttpURLConnection con = (HttpURLConnection) url.openConnection();</span><br><span class="line">        if (con.getResponseCode() == 200) {</span><br><span class="line">            BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));</span><br><span class="line">            String str = null;</span><br><span class="line">            while ((str = br.readLine()) != null) {</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>弊端：需要自己组装请求参数，自己去解析响应的json</p><h2 id="27-ElasticSearch-Java-Low-Level-REST-Client"><a href="#27-ElasticSearch-Java-Low-Level-REST-Client" class="headerlink" title="27.ElasticSearch Java Low Level REST Client"></a>27.ElasticSearch Java Low Level REST Client</h2><p>首先创建一个普通的 Maven 工程，添加如下依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;7.10.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></tbody></table></figure><p>然后添加如下代码，发起一个简单的查询请求：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowLevelTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//1.构建一个 RestClient 对象</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9202</span>, <span class="string">"http"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.如果需要在请求头中设置认证信息等，可以通过 builder 来设置</span></span><br><span class="line"><span class="comment">//        builder.setDefaultHeaders(new Header[]{new BasicHeader("key","value")});</span></span><br><span class="line">        RestClient restClient = builder.build();</span><br><span class="line">        <span class="comment">//3.构建请求</span></span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/books/_search"</span>);</span><br><span class="line">        <span class="comment">//添加请求参数</span></span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//4.发起请求，发起请求有两种方式，可以同步，可以异步</span></span><br><span class="line">        <span class="comment">//这种请求发起方式，会阻塞后面的代码</span></span><br><span class="line">        Response response = restClient.performRequest(request);</span><br><span class="line">        <span class="comment">//5.解析 response，获取响应结果</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(response.getEntity().getContent()));</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        }</span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//最后记得关闭 RestClient</span></span><br><span class="line">        restClient.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个查询请求，是一个同步请求，在请求的过程中，后面的代码会被阻塞，如果不希望后面的代码被阻塞，可以使用异步请求。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowLevelTest2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//1.构建一个 RestClient 对象</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9202</span>, <span class="string">"http"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.如果需要在请求头中设置认证信息等，可以通过 builder 来设置</span></span><br><span class="line"><span class="comment">//        builder.setDefaultHeaders(new Header[]{new BasicHeader("key","value")});</span></span><br><span class="line">        RestClient restClient = builder.build();</span><br><span class="line">        <span class="comment">//3.构建请求</span></span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/books/_search"</span>);</span><br><span class="line">        <span class="comment">//添加请求参数</span></span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//4.发起请求，发起请求有两种方式，可以同步，可以异步</span></span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">        restClient.performRequestAsync(request, <span class="keyword">new</span> ResponseListener() {</span><br><span class="line">            <span class="comment">//请求成功的回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Response response)</span> </span>{</span><br><span class="line">                <span class="comment">//5.解析 response，获取响应结果</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(response.getEntity().getContent()));</span><br><span class="line">                    String str = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                        System.out.println(str);</span><br><span class="line">                    }</span><br><span class="line">                    br.close();</span><br><span class="line">                    <span class="comment">//最后记得关闭 RestClient</span></span><br><span class="line">                    restClient.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//请求失败的回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>开发者在请求时，也可以携带 JSON 参数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowLevelTest3</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//1.构建一个 RestClient 对象</span></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>),</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9202</span>, <span class="string">"http"</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//2.如果需要在请求头中设置认证信息等，可以通过 builder 来设置</span></span><br><span class="line"><span class="comment">//        builder.setDefaultHeaders(new Header[]{new BasicHeader("key","value")});</span></span><br><span class="line">        RestClient restClient = builder.build();</span><br><span class="line">        <span class="comment">//3.构建请求</span></span><br><span class="line">        Request request = <span class="keyword">new</span> Request(<span class="string">"GET"</span>, <span class="string">"/books/_search"</span>);</span><br><span class="line">        <span class="comment">//添加请求参数</span></span><br><span class="line">        request.addParameter(<span class="string">"pretty"</span>,<span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">//添加请求体</span></span><br><span class="line">        request.setEntity(<span class="keyword">new</span> NStringEntity(<span class="string">"{\"query\": {\"term\": {\"name\": {\"value\": \"java\"}}}}"</span>, ContentType.APPLICATION_JSON));</span><br><span class="line">        <span class="comment">//4.发起请求，发起请求有两种方式，可以同步，可以异步</span></span><br><span class="line">        <span class="comment">//异步请求</span></span><br><span class="line">        restClient.performRequestAsync(request, <span class="keyword">new</span> ResponseListener() {</span><br><span class="line">            <span class="comment">//请求成功的回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Response response)</span> </span>{</span><br><span class="line">                <span class="comment">//5.解析 response，获取响应结果</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(response.getEntity().getContent()));</span><br><span class="line">                    String str = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">                        System.out.println(str);</span><br><span class="line">                    }</span><br><span class="line">                    br.close();</span><br><span class="line">                    <span class="comment">//最后记得关闭 RestClient</span></span><br><span class="line">                    restClient.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//请求失败的回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="28-Java-High-Level-REST-Client"><a href="#28-Java-High-Level-REST-Client" class="headerlink" title="28.Java High Level REST Client"></a>28.Java High Level REST Client</h2><h3 id="28-1-索引管理"><a href="#28-1-索引管理" class="headerlink" title="28.1 索引管理"></a>28.1 索引管理</h3><h4 id="28-1-1-创建索引"><a href="#28-1-1-创建索引" class="headerlink" title="28.1.1 创建索引"></a>28.1.1 创建索引</h4><p>首先创建一个普通的 Maven 项目，然后引入 high level rest client 依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;7.10.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></tbody></table></figure><p>需要注意，依赖的版本和 Es 的版本要对应。</p><p>创建一个索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //配置 settings，分片、副本等信息</span><br><span class="line">        blog1.settings(Settings.builder().put("index.number_of_shards", 3).put("index.number_of_replicas", 2));</span><br><span class="line">        //配置字段类型，字段类型可以通过 JSON 字符串、Map 以及 XContentBuilder 三种方式来构建</span><br><span class="line">        //json 字符串的方式</span><br><span class="line">        blog1.mapping("{\"properties\": {\"title\": {\"type\": \"text\"}}}", XContentType.JSON);</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>mapping 的配置，还有另外两种方式：</p><p>第一种，通过 map 构建 mapping：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //配置 settings，分片、副本等信息</span><br><span class="line">        blog1.settings(Settings.builder().put("index.number_of_shards", 3).put("index.number_of_replicas", 2));</span><br><span class="line">        //配置字段类型，字段类型可以通过 JSON 字符串、Map 以及 XContentBuilder 三种方式来构建</span><br><span class="line">        //json 字符串的方式</span><br><span class="line">//        blog1.mapping("{\"properties\": {\"title\": {\"type\": \"text\"}}}", XContentType.JSON);</span><br><span class="line">        //map 的方式</span><br><span class="line">        Map&lt;String, String&gt; title = new HashMap&lt;&gt;();</span><br><span class="line">        title.put("type", "text");</span><br><span class="line">        Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span><br><span class="line">        properties.put("title", title);</span><br><span class="line">        Map&lt;String, Object&gt; mappings = new HashMap&lt;&gt;();</span><br><span class="line">        mappings.put("properties", properties);</span><br><span class="line">        blog1.mapping(mappings);</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种，通过 XContentBuilder 构建 mapping：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //配置 settings，分片、副本等信息</span><br><span class="line">        blog1.settings(Settings.builder().put("index.number_of_shards", 3).put("index.number_of_replicas", 2));</span><br><span class="line">        //配置字段类型，字段类型可以通过 JSON 字符串、Map 以及 XContentBuilder 三种方式来构建</span><br><span class="line">        //json 字符串的方式</span><br><span class="line">//        blog1.mapping("{\"properties\": {\"title\": {\"type\": \"text\"}}}", XContentType.JSON);</span><br><span class="line">        //map 的方式</span><br><span class="line">//        Map&lt;String, String&gt; title = new HashMap&lt;&gt;();</span><br><span class="line">//        title.put("type", "text");</span><br><span class="line">//        Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span><br><span class="line">//        properties.put("title", title);</span><br><span class="line">//        Map&lt;String, Object&gt; mappings = new HashMap&lt;&gt;();</span><br><span class="line">//        mappings.put("properties", properties);</span><br><span class="line">//        blog1.mapping(mappings);</span><br><span class="line">        //XContentBuilder 方式</span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">        builder.startObject();</span><br><span class="line">        builder.startObject("properties");</span><br><span class="line">        builder.startObject("title");</span><br><span class="line">        builder.field("type", "text");</span><br><span class="line">        builder.endObject();</span><br><span class="line">        builder.endObject();</span><br><span class="line">        builder.endObject();</span><br><span class="line">        blog1.mapping(builder);</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>还可以给索引配置别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //配置 settings，分片、副本等信息</span><br><span class="line">        blog1.settings(Settings.builder().put("index.number_of_shards", 3).put("index.number_of_replicas", 2));</span><br><span class="line">        //配置字段类型，字段类型可以通过 JSON 字符串、Map 以及 XContentBuilder 三种方式来构建</span><br><span class="line">        //json 字符串的方式</span><br><span class="line">//        blog1.mapping("{\"properties\": {\"title\": {\"type\": \"text\"}}}", XContentType.JSON);</span><br><span class="line">        //map 的方式</span><br><span class="line">//        Map&lt;String, String&gt; title = new HashMap&lt;&gt;();</span><br><span class="line">//        title.put("type", "text");</span><br><span class="line">//        Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span><br><span class="line">//        properties.put("title", title);</span><br><span class="line">//        Map&lt;String, Object&gt; mappings = new HashMap&lt;&gt;();</span><br><span class="line">//        mappings.put("properties", properties);</span><br><span class="line">//        blog1.mapping(mappings);</span><br><span class="line">        //XContentBuilder 方式</span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder();</span><br><span class="line">        builder.startObject();</span><br><span class="line">        builder.startObject("properties");</span><br><span class="line">        builder.startObject("title");</span><br><span class="line">        builder.field("type", "text");</span><br><span class="line">        builder.endObject();</span><br><span class="line">        builder.endObject();</span><br><span class="line">        builder.endObject();</span><br><span class="line">        blog1.mapping(builder);</span><br><span class="line">        //配置别名</span><br><span class="line">        blog1.alias(new Alias("blog_alias"));</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果觉得调 API 太麻烦，也可以直接上 JSON：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest2 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //直接同构 JSON 配置索引</span><br><span class="line">            blog1.source("{\"settings\": {\"number_of_shards\": 3,\"number_of_replicas\": 2},\"mappings\": {\"properties\": {\"title\": {\"type\": \"keyword\"}}},\"aliases\": {\"blog_alias_javaboy\": {}}}", XContentType.JSON);</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>另外还有一些其他的可选配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest2 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //直接同构 JSON 配置索引</span><br><span class="line">        blog1.source("{\"settings\": {\"number_of_shards\": 3,\"number_of_replicas\": 2},\"mappings\": {\"properties\": {\"title\": {\"type\": \"keyword\"}}},\"aliases\": {\"blog_alias_javaboy\": {}}}", XContentType.JSON);</span><br><span class="line">        //请求超时时间，连接所有节点的超时时间</span><br><span class="line">        blog1.setTimeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        //连接 master 节点的超时时间</span><br><span class="line">        blog1.setMasterTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>前面所有的请求都是同步的，会阻塞的，也可以异步：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest2 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //删除已经存在的索引</span><br><span class="line">        DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("blog");</span><br><span class="line">        client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //创建一个索引</span><br><span class="line">        CreateIndexRequest blog1 = new CreateIndexRequest("blog");</span><br><span class="line">        //直接同构 JSON 配置索引</span><br><span class="line">        blog1.source("{\"settings\": {\"number_of_shards\": 3,\"number_of_replicas\": 2},\"mappings\": {\"properties\": {\"title\": {\"type\": \"keyword\"}}},\"aliases\": {\"blog_alias_javaboy\": {}}}", XContentType.JSON);</span><br><span class="line">        //请求超时时间，连接所有节点的超时时间</span><br><span class="line">        blog1.setTimeout(TimeValue.timeValueMinutes(2));</span><br><span class="line">        //连接 master 节点的超时时间</span><br><span class="line">        blog1.setMasterTimeout(TimeValue.timeValueMinutes(1));</span><br><span class="line">        //执行请求，创建索引</span><br><span class="line">//        client.indices().create(blog1, RequestOptions.DEFAULT);</span><br><span class="line">        //异步创建索引</span><br><span class="line">        client.indices().createAsync(blog1, RequestOptions.DEFAULT, new ActionListener&lt;CreateIndexResponse&gt;() {</span><br><span class="line">            //请求成功</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(CreateIndexResponse createIndexResponse) {</span><br><span class="line">                //关闭 client</span><br><span class="line">                try {</span><br><span class="line">                    client.close();</span><br><span class="line">                } catch (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            //请求失败</span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Exception e) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        //关闭 client</span><br><span class="line">//        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-2-查询索引是否存在"><a href="#28-1-2-查询索引是否存在" class="headerlink" title="28.1.2 查询索引是否存在"></a>28.1.2 查询索引是否存在</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest3 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetIndexRequest blog = new GetIndexRequest("blog2");</span><br><span class="line">        boolean exists = client.indices().exists(blog, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("exists = " + exists);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-3-关闭-打开索引"><a href="#28-1-3-关闭-打开索引" class="headerlink" title="28.1.3 关闭/打开索引"></a>28.1.3 关闭/打开索引</h4><p>关闭：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest4 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        CloseIndexRequest blog = new CloseIndexRequest("blog");</span><br><span class="line">        CloseIndexResponse close = client.indices().close(blog, RequestOptions.DEFAULT);</span><br><span class="line">        List&lt;CloseIndexResponse.IndexResult&gt; indices = close.getIndices();</span><br><span class="line">        for (CloseIndexResponse.IndexResult index : indices) {</span><br><span class="line">            System.out.println("index.getIndex() = " + index.getIndex());</span><br><span class="line">        }</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>触发warning[“the default value for the ?wait_for_active_shards parameter will change from ‘0’ to ‘index-setting’ in version 8; specify ‘?wait_for_active_shards=index-setting’ to adopt the future default behaviour, or ‘?wait_for_active_shards=0’ to preserve today’s behaviour”]</p><p>打开：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest4 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        OpenIndexRequest blog = new OpenIndexRequest("blog");</span><br><span class="line">        client.indices().open(blog, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-4-索引修改"><a href="#28-1-4-索引修改" class="headerlink" title="28.1.4 索引修改"></a>28.1.4 索引修改</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest5 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateSettingsRequest request = new UpdateSettingsRequest("blog");</span><br><span class="line">        request.settings(Settings.builder().put("index.blocks.write", true).build());</span><br><span class="line">        client.indices().putSettings(request, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-5-克隆索引"><a href="#28-1-5-克隆索引" class="headerlink" title="28.1.5 克隆索引"></a>28.1.5 克隆索引</h4><p>被克隆的索引需要是只读索引，可以通过 28.1.4 小节中的方式设置索引为只读。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest6 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        ResizeRequest request = new ResizeRequest("blog2", "blog");</span><br><span class="line">        client.indices().clone(request, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-6-查看索引"><a href="#28-1-6-查看索引" class="headerlink" title="28.1.6 查看索引"></a>28.1.6 查看索引</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest7 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetSettingsRequest request = new GetSettingsRequest().indices("blog");</span><br><span class="line">        //设置需要互殴去的具体的参数，不设置则返回所有参数</span><br><span class="line">        request.names("index.blocks.write");</span><br><span class="line">        GetSettingsResponse response = client.indices().getSettings(request, RequestOptions.DEFAULT);</span><br><span class="line">        ImmutableOpenMap&lt;String, Settings&gt; indexToSettings = response.getIndexToSettings();</span><br><span class="line">        System.out.println(indexToSettings);</span><br><span class="line">        String s = response.getSetting("blog", "index.number_of_replicas");</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-7-Refresh-amp-Flush"><a href="#28-1-7-Refresh-amp-Flush" class="headerlink" title="28.1.7 Refresh &amp; Flush"></a>28.1.7 Refresh &amp; Flush</h4><p>Es 底层依赖 Lucene，而 Lucene 中有 reopen 和 commit 两种操作，还有一个特殊的概念叫做 segment。</p><p>Es 中，基本的存储单元是 shard，对应到 Lucene 上，就是一个索引，Lucene 中的索引由 segment 组成，每个 segment 相当于 es 中的倒排索引。每个 es 文档创建时，都会写入到一个新的 segment 中，删除文档时，只是从属于它的 segment 处标记为删除，并没有从磁盘中删除。</p><p>Lucene 中：</p><p>reopen 可以让数据搜索到，但是不保证数据被持久化到磁盘中。</p><p>commit 可以让数据持久化。</p><p>Es 中：</p><p>默认是每秒 refresh 一次（Es 中文档被索引之后，首先添加到内存缓冲区，refresh 操作将内存缓冲区中的数据拷贝到新创建的 segment 中，这里是在内存中操作的）。</p><p>flush 将内存中的数据持久化到磁盘中。一般来说，flush 的时间间隔比较久，默认 30 分钟。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest8 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        RefreshRequest request = new RefreshRequest("blog");</span><br><span class="line">        client.indices().refresh(request, RequestOptions.DEFAULT);</span><br><span class="line">        FlushRequest flushRequest = new FlushRequest("blog");</span><br><span class="line">        client.indices().flush(flushRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="28-1-9-索引别名"><a href="#28-1-9-索引别名" class="headerlink" title="28.1.9 索引别名"></a>28.1.9 索引别名</h4><p>索引的别名类似于 MySQL 中的视图。</p><h5 id="28-1-9-1-添加别名"><a href="#28-1-9-1-添加别名" class="headerlink" title="28.1.9.1 添加别名"></a>28.1.9.1 添加别名</h5><p>添加一个普通的别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        IndicesAliasesRequest indicesAliasesRequest = new IndicesAliasesRequest();</span><br><span class="line">        IndicesAliasesRequest.AliasActions aliasAction = new IndicesAliasesRequest.AliasActions(IndicesAliasesRequest.AliasActions.Type.ADD);</span><br><span class="line">        aliasAction.index("books").alias("books_alias");</span><br><span class="line">        indicesAliasesRequest.addAliasAction(aliasAction);</span><br><span class="line">        client.indices().updateAliases(indicesAliasesRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>添加一个带 filter 的别名：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        IndicesAliasesRequest indicesAliasesRequest = new IndicesAliasesRequest();</span><br><span class="line">        IndicesAliasesRequest.AliasActions aliasAction = new IndicesAliasesRequest.AliasActions(IndicesAliasesRequest.AliasActions.Type.ADD);</span><br><span class="line">        aliasAction.index("books").alias("books_alias2").filter("{\"term\": {\"name\": \"java\"}}");</span><br><span class="line">        indicesAliasesRequest.addAliasAction(aliasAction);</span><br><span class="line">        client.indices().updateAliases(indicesAliasesRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在，books 索引将存在两个别名，其中，books_alias2 自动过滤 name 中含有 java 的文档。</p><h5 id="28-1-9-2-删除别名"><a href="#28-1-9-2-删除别名" class="headerlink" title="28.1.9.2 删除别名"></a>28.1.9.2 删除别名</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        IndicesAliasesRequest indicesAliasesRequest = new IndicesAliasesRequest();</span><br><span class="line">        IndicesAliasesRequest.AliasActions aliasAction = new IndicesAliasesRequest.AliasActions(IndicesAliasesRequest.AliasActions.Type.REMOVE);</span><br><span class="line">        aliasAction.index("books").alias("books_alias");</span><br><span class="line">        indicesAliasesRequest.addAliasAction(aliasAction);</span><br><span class="line">        client.indices().updateAliases(indicesAliasesRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种移除方式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        DeleteAliasRequest deleteAliasRequest = new DeleteAliasRequest("books", "books_alias2");</span><br><span class="line">        client.indices().deleteAlias(deleteAliasRequest, RequestOptions.DEFAULT);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="28-1-9-3-判断别名是否存在"><a href="#28-1-9-3-判断别名是否存在" class="headerlink" title="28.1.9.3 判断别名是否存在"></a>28.1.9.3 判断别名是否存在</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetAliasesRequest books_alias = new GetAliasesRequest("books_alias");</span><br><span class="line">        //指定查看某一个索引的别名，不指定，则会搜索所有的别名</span><br><span class="line">        books_alias.indices("books");</span><br><span class="line">        boolean b = client.indices().existsAlias(books_alias, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="28-1-9-4-获取别名"><a href="#28-1-9-4-获取别名" class="headerlink" title="28.1.9.4 获取别名"></a>28.1.9.4 获取别名</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class HighLevelTest9 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetAliasesRequest books_alias = new GetAliasesRequest("books_alias");</span><br><span class="line">        //指定查看某一个索引的别名，不指定，则会搜索所有的别名</span><br><span class="line">        books_alias.indices("books");</span><br><span class="line">        GetAliasesResponse response = client.indices().getAlias(books_alias, RequestOptions.DEFAULT);</span><br><span class="line">        Map&lt;String, Set&lt;AliasMetadata&gt;&gt; aliases = response.getAliases();</span><br><span class="line">        System.out.println("aliases = " + aliases);</span><br><span class="line">        //关闭 client</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="29-1-添加文档"><a href="#29-1-添加文档" class="headerlink" title="29.1 添加文档"></a>29.1 添加文档</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class DocTest01 {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        //构建一个 IndexRequest 请求，参数就是索引名称</span><br><span class="line">        IndexRequest request = new IndexRequest("book");</span><br><span class="line">        //给请求配置一个 id，这个就是文档 id。如果指定了 id，相当于 put book/_doc/id ，也可以不指定 id，相当于 post book/_doc</span><br><span class="line">//        request.id("1");</span><br><span class="line">        //构建索引文本，有三种方式：JSON 字符串、Map 对象、XContentBuilder</span><br><span class="line">        request.source("{\"name\": \"三国演义\",\"author\": \"罗贯中\"}", XContentType.JSON);</span><br><span class="line">        //执行请求，有同步和异步两种方式</span><br><span class="line">        //同步</span><br><span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">        //获取文档id</span><br><span class="line">        String id = indexResponse.getId();</span><br><span class="line">        System.out.println("id = " + id);</span><br><span class="line">        //获取索引名称</span><br><span class="line">        String index = indexResponse.getIndex();</span><br><span class="line">        System.out.println("index = " + index);</span><br><span class="line">        //判断文档是否添加成功</span><br><span class="line">        if (indexResponse.getResult() == DocWriteResponse.Result.CREATED) {</span><br><span class="line">            System.out.println("文档添加成功");</span><br><span class="line">        }</span><br><span class="line">        //判断文档是否更新成功（如果 id 已经存在）</span><br><span class="line">        if (indexResponse.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("文档更新成功");</span><br><span class="line">        }</span><br><span class="line">        ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span><br><span class="line">        //判断分片操作是否都成功</span><br><span class="line">        if (shardInfo.getTotal() != shardInfo.getSuccessful()) {</span><br><span class="line">            System.out.println("有存在问题的分片");</span><br><span class="line">        }</span><br><span class="line">        //有存在失败的分片</span><br><span class="line">        if (shardInfo.getFailed() &gt; 0) {</span><br><span class="line">            //打印错误信息</span><br><span class="line">            for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) {</span><br><span class="line">                System.out.println("failure.reason() = " + failure.reason());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        //异步</span><br><span class="line">//        client.indexAsync(request, RequestOptions.DEFAULT, new ActionListener&lt;IndexResponse&gt;() {</span><br><span class="line">//            @Override</span><br><span class="line">//            public void onResponse(IndexResponse indexResponse) {</span><br><span class="line">//</span><br><span class="line">//            }</span><br><span class="line">//</span><br><span class="line">//            @Override</span><br><span class="line">//            public void onFailure(Exception e) {</span><br><span class="line">//</span><br><span class="line">//            }</span><br><span class="line">//        });</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>演示分片存在问题的情况。由于我只有三个节点，但是在创建索引时，设置需要三个副本，此时的节点就不够用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT book</span><br><span class="line">{</span><br><span class="line">  "settings": {</span><br><span class="line">    "number_of_replicas": 3,</span><br><span class="line">    "number_of_shards": 3  </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>创建完成后，再次执行上面的添加代码，此时就会打印出 <code>有存在问题的分片</code>。</p><p>构建索引信息，有三种方式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//构建索引文本，有三种方式：JSON 字符串、Map 对象、XContentBuilder</span><br><span class="line">//request.source("{\"name\": \"三国演义\",\"author\": \"罗贯中\"}", XContentType.JSON);</span><br><span class="line">//Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">//map.put("name", "水浒传");</span><br><span class="line">//map.put("author", "施耐庵");</span><br><span class="line">//request.source(map).id("99");</span><br><span class="line">XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();</span><br><span class="line">jsonBuilder.startObject();</span><br><span class="line">jsonBuilder.field("name", "西游记");</span><br><span class="line">jsonBuilder.field("author", "吴承恩");</span><br><span class="line">jsonBuilder.endObject();</span><br><span class="line">request.source(jsonBuilder);</span><br></pre></td></tr></tbody></table></figure><p>默认情况下，如果 request 中包含有 id 属性，则相当于 <code>PUT book/_doc/1</code> 这样的请求，如果 request 中不包含 id 属性，则相当于 <code>POST book/_doc</code>，此时 id 会自动生成。对于前者，如果 id 已经存在，则会执行一个更新操作。也就是 es 的具体操作，会自动调整。</p><p>当然，也可以直接指定操作。例如，指定为添加文档的操作：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//构建一个 IndexRequest 请求，参数就是索引名称</span><br><span class="line">IndexRequest request = new IndexRequest("book");</span><br><span class="line">XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();</span><br><span class="line">jsonBuilder.startObject();</span><br><span class="line">jsonBuilder.field("name", "西游记");</span><br><span class="line">jsonBuilder.field("author", "吴承恩");</span><br><span class="line">jsonBuilder.endObject();</span><br><span class="line">request.source(jsonBuilder).id("99");</span><br><span class="line">//这是一个添加操作，不要自动调整为更新操作</span><br><span class="line">request.opType(DocWriteRequest.OpType.CREATE);</span><br><span class="line">//执行请求，有同步和异步两种方式</span><br><span class="line">//同步</span><br><span class="line">IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span><br></pre></td></tr></tbody></table></figure><h3 id="29-2-获取文档"><a href="#29-2-获取文档" class="headerlink" title="29.2 获取文档"></a>29.2 获取文档</h3><p>根据 id 获取文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class GetDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetRequest request = new GetRequest("book", "98");</span><br><span class="line">        GetResponse response = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        if (response.isExists()) {</span><br><span class="line">            //如果文档存在</span><br><span class="line">            long version = response.getVersion();</span><br><span class="line">            System.out.println("version = " + version);</span><br><span class="line">            String sourceAsString = response.getSourceAsString();</span><br><span class="line">            System.out.println("sourceAsString = " + sourceAsString);</span><br><span class="line">        }else{</span><br><span class="line">            System.out.println("文档不存在");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="29-3-判断文档是否存在"><a href="#29-3-判断文档是否存在" class="headerlink" title="29.3 判断文档是否存在"></a>29.3 判断文档是否存在</h3><p>判断文档是否存在和获取文档的 API 是一致的。只不过在判断文档是否存在时，不需要获取 source。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ExistsDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        GetRequest request = new GetRequest("book", "99");</span><br><span class="line">        request.fetchSourceContext(new FetchSourceContext(false));</span><br><span class="line">        boolean exists = client.exists(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("exists = " + exists);</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="29-4-删除文档"><a href="#29-4-删除文档" class="headerlink" title="29.4 删除文档"></a>29.4 删除文档</h3><p>删除 id 为 99 的文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class DeleteDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        DeleteRequest request = new DeleteRequest("book", "99");</span><br><span class="line">        DeleteResponse response = client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        ReplicationResponse.ShardInfo shardInfo = response.getShardInfo();</span><br><span class="line">        if (shardInfo.getTotal() != shardInfo.getSuccessful()) {</span><br><span class="line">            System.out.println("有分片存在问题");</span><br><span class="line">        }</span><br><span class="line">        if (shardInfo.getFailed() &gt; 0) {</span><br><span class="line">            for (ReplicationResponse.ShardInfo.Failure failure : shardInfo.getFailures()) {</span><br><span class="line">                System.out.println("failure.reason() = " + failure.reason());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>删除文档的响应和添加文档成功的响应类似，可以对照着理解。</p><h3 id="29-4-更新文档"><a href="#29-4-更新文档" class="headerlink" title="29.4 更新文档"></a>29.4 更新文档</h3><p>通过脚本更新：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class UpdateDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateRequest request = new UpdateRequest("book", "1");</span><br><span class="line">        //通过脚本更新</span><br><span class="line">        Map&lt;String, Object&gt; params = Collections.singletonMap("name", "三国演义666");</span><br><span class="line">        Script inline = new Script(ScriptType.INLINE, "painless", "ctx._source.name=params.name", params);</span><br><span class="line">        request.script(inline);</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        if (response.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("更新成功!");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 JSON 更新：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class UpdateDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateRequest request = new UpdateRequest("book", "1");</span><br><span class="line">        request.doc("{\"name\": \"三国演义\"}", XContentType.JSON);</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        if (response.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("更新成功!");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然，这个 JSON 字符串也可以通过 Map 或者 XContentBuilder 来构建：</p><p>Map:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class UpdateDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateRequest request = new UpdateRequest("book", "1");</span><br><span class="line">        Map&lt;String, Object&gt; docMap = new HashMap&lt;&gt;();</span><br><span class="line">        docMap.put("name", "三国演义888");</span><br><span class="line">        request.doc(docMap);</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        if (response.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("更新成功!");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>XContentBuilder:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class UpdateDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateRequest request = new UpdateRequest("book", "1");</span><br><span class="line">        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();</span><br><span class="line">        jsonBuilder.startObject();</span><br><span class="line">        jsonBuilder.field("name", "三国演义666");</span><br><span class="line">        jsonBuilder.endObject();</span><br><span class="line">        request.doc(jsonBuilder);</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        if (response.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("更新成功!");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也可以通过 upsert 方法实现文档不存在时就添加文档：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class UpdateDoc {</span><br><span class="line">    public static void main(String[] args) throws IOException {</span><br><span class="line">        RestHighLevelClient client = new RestHighLevelClient(RestClient.builder(</span><br><span class="line">                new HttpHost("localhost", 9200, "http"),</span><br><span class="line">                new HttpHost("localhost", 9201, "http"),</span><br><span class="line">                new HttpHost("localhost", 9202, "http")</span><br><span class="line">        ));</span><br><span class="line">        UpdateRequest request = new UpdateRequest("book", "99");</span><br><span class="line">        XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();</span><br><span class="line">        jsonBuilder.startObject();</span><br><span class="line">        jsonBuilder.field("name", "三国演义666");</span><br><span class="line">        jsonBuilder.endObject();</span><br><span class="line">        request.doc(jsonBuilder);</span><br><span class="line">        request.upsert("{\"name\": \"红楼梦\",\"author\": \"曹雪芹\"}", XContentType.JSON);</span><br><span class="line">        UpdateResponse response = client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">        System.out.println("response.getId() = " + response.getId());</span><br><span class="line">        System.out.println("response.getIndex() = " + response.getIndex());</span><br><span class="line">        System.out.println("response.getVersion() = " + response.getVersion());</span><br><span class="line">        if (response.getResult() == DocWriteResponse.Result.UPDATED) {</span><br><span class="line">            System.out.println("更新成功!");</span><br><span class="line">        } else if (response.getResult() == DocWriteResponse.Result.CREATED) {</span><br><span class="line">            System.out.println("文档添加成功");</span><br><span class="line">        }</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> es </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux韩顺平2021笔记</title>
      <link href="2021/04/09/linux%E9%9F%A9%E9%A1%BA%E5%B9%B32021/"/>
      <url>2021/04/09/linux%E9%9F%A9%E9%A1%BA%E5%B9%B32021/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  最近的linux学习笔记</p><span id="more"></span><h1 id="linux韩顺平2021"><a href="#linux韩顺平2021" class="headerlink" title="linux韩顺平2021"></a>linux韩顺平2021</h1><h2 id="p1-课程内容"><a href="#p1-课程内容" class="headerlink" title="p1 课程内容"></a>p1 课程内容</h2><h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><p>Linux入门</p><p>vm和linux的安装</p><p>Linux目录结构</p><h3 id="实际操作篇"><a href="#实际操作篇" class="headerlink" title="实际操作篇"></a>实际操作篇</h3><p>远程登陆（Xshell XFtp）</p><p>实用指令</p><p>进程管理</p><p>用户管理</p><p>Vi和Vim管理</p><p>定时任务调度</p><p>RPM和YUM</p><p>开机，重启和用户登陆注销</p><p>磁盘分区，挂载</p><p>网络配置</p><h3 id="2021高级篇"><a href="#2021高级篇" class="headerlink" title="2021高级篇"></a>2021高级篇</h3><p>日志管理</p><p>Linux内核源码&amp;内核升级</p><p>定制自己的Linux</p><p>Linux备份和恢复</p><p>Linux可视化管理webmin和bt运维工具</p><p>Linux入侵检测&amp;权限划分&amp;系统优化</p><p>Linux面试题（腾讯，百度，美团，滴滴 ）</p><h2 id="p2-应用领域"><a href="#p2-应用领域" class="headerlink" title="p2 应用领域"></a>p2 应用领域</h2><h2 id="p3-概述"><a href="#p3-概述" class="headerlink" title="p3 概述"></a>p3 概述</h2><h2 id="p4-Linux和Unix"><a href="#p4-Linux和Unix" class="headerlink" title="p4 Linux和Unix"></a>p4 Linux和Unix</h2><h2 id="p5-vmware15-5安装"><a href="#p5-vmware15-5安装" class="headerlink" title="p5 vmware15.5安装"></a>p5 vmware15.5安装</h2><p>下载链接：<a href="https://www.nocmd.com/windows/740.html">https://www.nocmd.com/windows/740.html</a></p><h2 id="p6-centOS7-6安装"><a href="#p6-centOS7-6安装" class="headerlink" title="p6 centOS7.6安装"></a>p6 centOS7.6安装</h2><p>下载链接：<a href="http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso">http://mirrors.163.com/centos/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso</a></p><p>linux分区：3个区</p><p>boot 引导分区 1g</p><p>swap 交换分区 和内存大小一致2g 可以临时充当内存</p><p>根分区 17g</p><h2 id="p7-网络连接的三种方式"><a href="#p7-网络连接的三种方式" class="headerlink" title="p7 网络连接的三种方式"></a>p7 网络连接的三种方式</h2><p><strong>桥接模式</strong></p><p>会直接占用网段，会造成256个不够用</p><p>虚拟系统可以和外部系统通讯，但是容易造成IP冲突</p><p><strong>NAT模式</strong></p><p>网络地址转换模式</p><p>虚拟系统可以和外部系统通讯，而且不造成IP冲突</p><p><strong>主机模式</strong></p><p>不和外部通讯</p><p>svn checkout <a href="https://192.168.0.144:8443/svn/ntbyrck/">https://192.168.0.144:8443/svn/ntbyrck/</a> –username=0027xxp –password=0027xxp  D:\byrc</p><h2 id="p8-虚拟机克隆"><a href="#p8-虚拟机克隆" class="headerlink" title="p8 虚拟机克隆"></a>p8 虚拟机克隆</h2><p>用于快速构建集群</p><p>方式一 直接拷贝一份安装好的虚拟机文件</p><p>方式二 使用vmware的克隆操作（需要先关闭linux系统）</p><p>​    克隆方法</p><p>​        1.创建链接克隆（这只是引用）</p><p>​        2.创建完整克隆（这个是拷贝）</p><h2 id="p9-虚拟机快照"><a href="#p9-虚拟机快照" class="headerlink" title="p9 虚拟机快照"></a>p9 虚拟机快照</h2><p>在进行一些不确定的操作时，用于恢复原先的某个状态，也叫快照管理</p><p>快照会占用一定空间</p><h2 id="p10-虚拟机迁移和删除"><a href="#p10-虚拟机迁移和删除" class="headerlink" title="p10 虚拟机迁移和删除"></a>p10 虚拟机迁移和删除</h2><h2 id="p11-vmtools"><a href="#p11-vmtools" class="headerlink" title="p11 vmtools"></a>p11 vmtools</h2><p>安装后，在windows下更容易管理vm虚拟机，可以设置windows和centos的共享文件夹</p><p>1.进入centOS</p><p>2.点击vm菜单的-&gt;install vmware tools</p><p>3.centos会出现一个vm安装包，xx.tar.gz</p><p>4.拷贝到/opt</p><p>5.使用解压命令tar,得到一个安装文件</p><p>cd /opt</p><p>tar -zxvf</p><p>./ 进行安装</p><p>可能会出现一些问题</p><p><a href="https://www.cnblogs.com/feiquan/p/9326870.html">参考链接</a></p><p>6.进入该vm解压的目录，/opt目录下</p><p>7.安装./vmware-install.pl</p><p>8.全部使用默认设置即可安装成功</p><p>9.注意：安装vmtools需要有gcc</p><p>主机的共享文件夹需要在vmware中设置</p><p>共享文件夹位置在/mnt/hgfs/</p><h2 id="p12-第4章-linux目录结构"><a href="#p12-第4章-linux目录结构" class="headerlink" title="p12 第4章 linux目录结构"></a>p12 第4章 linux目录结构</h2><p>linux采用层级树状结构，最上层根目录/</p><p>/root root用户的目录</p><p>/home 每创建一个用户都会出现一个用户的主目录</p><p>/bin 常用指令 环境设置 之类的文件 Binary</p><p>/sbin s代表Super user的意思</p><p>/etc 系统管理所需要的配置文件和子目录  比如安装了mysql数据库 my.conf </p><p>/boot 系统启动相关 核心文件，包括一些连接文件以及镜像文件</p><p>/dev 设备管理器 linux会把所有的硬件映射成一个文件管理 一切皆文件</p><p>/media 自动识别设备挂载到这个目录下</p><p>/lib 系统开机所需要的最基本的动态连接共享库，作用类似Windows里的DDL文件。几乎所有的应用程序都需要用到这些共享库</p><p>/lost+found 一般是空的，当系统非法关机后，这里就存放了一些文件</p><p>/usr 用户很多应用程序和文件都放在这个目录下，类似windows下的program files 目录</p><p>/proc 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p><p>/srv service缩写，存放一些服务启动之后需要提取的数据</p><p>/sys linux2.6内核很大的一个变化 。安装了新出现的文件系统 sysfs</p><p>/tmp 存放临时文件</p><p>/mnt 为了让用户临时挂载别的文件系统，我们可以把外部存储挂载在/mnt/上，然后进入该目录就可以查看里面的内容了。d:/myshare</p><p>/opt 这是主机额外安装软件（约定俗成）所摆放的目录。如安装Oracle数据库就可摆放在该目录下</p><p>挂载：例如将myshare文件夹挂载在/mnt/hgfs目录下</p><p>/usr/local 额外安装软件所安装的目录，一般通过编译源码的方式安装的程序</p><p>/var 这个目录存放着不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p><p>/selinux[security-enhanced linux]</p><p>SELinux是一种安全子系统，它能控制程序只能访问特定文件；三种工作模式，可以自行设置，需要启用</p><h2 id="p13-第5章-远程登录到Linux服务器"><a href="#p13-第5章-远程登录到Linux服务器" class="headerlink" title="p13 第5章 远程登录到Linux服务器"></a>p13 第5章 远程登录到Linux服务器</h2><h2 id="p14-远程登录"><a href="#p14-远程登录" class="headerlink" title="p14 远程登录"></a>p14 远程登录</h2><p>xshell6</p><h2 id="p15-远程文件传输"><a href="#p15-远程文件传输" class="headerlink" title="p15 远程文件传输"></a>p15 远程文件传输</h2><p>xftp6</p><h2 id="p16-vi和vim编辑器"><a href="#p16-vi和vim编辑器" class="headerlink" title="p16 vi和vim编辑器"></a>p16 vi和vim编辑器</h2><h3 id="常用三种模式"><a href="#常用三种模式" class="headerlink" title="常用三种模式"></a>常用三种模式</h3><p>正常模式</p><p>插入模式 iIoOaArR</p><p>命令行模式 输入”esc” + “:” 或 “/“ 再输入:wq “wq”代表写入并退出</p><h2 id="p17-vi和vim快捷键"><a href="#p17-vi和vim快捷键" class="headerlink" title="p17 vi和vim快捷键"></a>p17 vi和vim快捷键</h2><p>命令行模式输入 </p><p>:wq(保存退出)</p><p>:q(退出)</p><p>:q!(强制退出，不保存)</p><p>拷贝当前行 yy    拷贝当前行向下五行 5yy     粘贴 p</p><p>删除当前行 dd    删除当前行向下五行 5dd </p><p>查找 / + 所需的字段 n键用来切换</p><p>:setnu 显示行号 :setnonu 关闭显示行号</p><p>文档最末行 G   最首行  gg     这些快捷键在一般模式下使用即可</p><p>指定行数 输入行号 + shift +g</p><p>撤销操作 一般模式下 按 u</p><h2 id="p18-vi-vim-内容整理"><a href="#p18-vi-vim-内容整理" class="headerlink" title="p18 vi vim 内容整理"></a>p18 vi vim 内容整理</h2><h2 id="p19-第七章-开机、重启和用户注销"><a href="#p19-第七章-开机、重启和用户注销" class="headerlink" title="p19 第七章 开机、重启和用户注销"></a>p19 第七章 开机、重启和用户注销</h2><p>shutdown -h now    立刻进行关机</p><p>shutdown -h 1    “hello,1分钟后会关机了”</p><p>shutdown -r now 现在重新启动计算机</p><p>halt    关机，作用和上面一样</p><p>reboot    现在重启</p><p>sync    内存同步到磁盘</p><p>不论重启还是关闭系统，首先要运行sync指令，同步内存至磁盘</p><p>目前的shutdown/reboot/halt命令均已经在关机前进行了sync    建议还是先运行sync命令</p><h2 id="p20-登录注销"><a href="#p20-登录注销" class="headerlink" title="p20 登录注销"></a>p20 登录注销</h2><p>su - 用户名 为切换用户</p><p>logout在图形级界面运行级别是无效的 在运行级别3下有效</p><h2 id="p21-用户管理"><a href="#p21-用户管理" class="headerlink" title="p21 用户管理"></a>p21 用户管理</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>useradd 用户名</p><p>1.创建用户成功后，会自动创建和用户名同名的home目录</p><p>2.也可以通过useradd -d 指定目录 新的用户名，给新创建的用户指定家目录</p><p>指定/修改密码</p><p>passwd 用户名（不写用户名会给当前登录的用户更改密码）</p><p>显示当前用户 pwd</p><p>删除用户但是不删除家目录</p><p>userdel  用户名</p><p>删除用户以及家目录</p><p>userdel -r 用户名    操作慎重 这样删除会把用户家目录所有内容删除</p><p>一般情况下建议保留家目录</p><h2 id="p22-查询用户信息指令"><a href="#p22-查询用户信息指令" class="headerlink" title="p22 查询用户信息指令"></a>p22 查询用户信息指令</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>id 用户名</p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>su - 切换用户名</p><p>权限高的用户切换到权限低的不需要输入密码，反之需要</p><p>返回到原来的用户 exit/logout</p><h3 id="查看当前用户-登录用户"><a href="#查看当前用户-登录用户" class="headerlink" title="查看当前用户/登录用户"></a>查看当前用户/登录用户</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><p>whoami/Who am I</p><h2 id="p23-用户组"><a href="#p23-用户组" class="headerlink" title="p23 用户组"></a>p23 用户组</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>类似于角色，系统可对有共性的多个用户进行统一的管理</p><h3 id="新增组"><a href="#新增组" class="headerlink" title="新增组"></a>新增组</h3><p>指令：groupadd 组名</p><h3 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h3><p>groupdel 组名</p><h3 id="增加用户时直接加上组"><a href="#增加用户时直接加上组" class="headerlink" title="增加用户时直接加上组"></a>增加用户时直接加上组</h3><p>useradd -g 用户组 用户名</p><h3 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h3><p>usermod -g 用户组 用户名</p><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><h4 id="etc-password-文件"><a href="#etc-password-文件" class="headerlink" title="/etc/password 文件"></a>/etc/password 文件</h4><p>用户的配置文件</p><p>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录shell</p><h4 id="etc-shadow-文件"><a href="#etc-shadow-文件" class="headerlink" title="/etc/shadow 文件"></a>/etc/shadow 文件</h4><p>口令配置文件</p><p>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间标志</p><p>/etc/group 文件</p><p>组配置文件</p><p>组名:口令:组标志号:组内用户列表</p><h2 id="p24-用户管理总结"><a href="#p24-用户管理总结" class="headerlink" title="p24 用户管理总结"></a>p24 用户管理总结</h2><h2 id="p25-第九章-实用指令"><a href="#p25-第九章-实用指令" class="headerlink" title="p25 第九章 实用指令"></a>p25 第九章 实用指令</h2><h3 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h3><p>基本介绍</p><p>0：关机</p><p>1：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务</p><p>3：多用户状态有网络服务</p><p>4：系统未使用保留给用户</p><p>5：图形界面</p><p>6：系统重启</p><p>常用运行级别为3和5，也可以指定默认运行级别</p><p>init[0123456]</p><p>在centos7之前,/etc/inittab文件中指定</p><p>简化为</p><p>multi-user.target:analogous to runlevel 3</p><p>graphical.target:analagous to runlevel 5</p><p>当前运行级别 systemctl get-default</p><p>systemctl set-default TARGET.target</p><h2 id="p26-如何找回root密码"><a href="#p26-如何找回root密码" class="headerlink" title="p26 如何找回root密码"></a>p26 如何找回root密码</h2><p><a href="https://blog.51cto.com/10802692/2398040?source=dra">参考链接</a></p><h2 id="p27-帮助指令"><a href="#p27-帮助指令" class="headerlink" title="p27 帮助指令"></a>p27 帮助指令</h2><p>man 命令或配置文件</p><p>Linux下,隐藏文件以.开头    选项可以组合使用</p><p>help 命令</p><h2 id="p28-文件目录类"><a href="#p28-文件目录类" class="headerlink" title="p28 文件目录类"></a>p28 文件目录类</h2><h3 id="pwd-指令"><a href="#pwd-指令" class="headerlink" title="pwd 指令"></a>pwd 指令</h3><p>显示当前工作目录绝对路径</p><h3 id="ls-指令"><a href="#ls-指令" class="headerlink" title="ls 指令"></a>ls 指令</h3><p>ls 目录或文件</p><p>常用选项</p><p>-a 所有</p><p>-l 列表</p><p>应用实例</p><p>查看当前目录所有内容信息</p><h3 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h3><p>cd ~ 或者cd  :回到自己的家目录</p><p>cd.. 回到当前目录的上一级目录</p><h2 id="p28-文件目录类（2）"><a href="#p28-文件目录类（2）" class="headerlink" title="p28 文件目录类（2）"></a>p28 文件目录类（2）</h2><h3 id="mkdir指令"><a href="#mkdir指令" class="headerlink" title="mkdir指令"></a>mkdir指令</h3><p>创建目录 mkdir 要创建的目录</p><p>常见选项 </p><p>-p：创建多级目录 </p><p>案例一：创建一个目录 /home/dog</p><p>mkdir /home/dog</p><p>案例二：创建一个多级目录 /home/animal/tiger</p><p>mkdir -p /home/animal/tiger</p><h3 id="rmdir指令"><a href="#rmdir指令" class="headerlink" title="rmdir指令"></a>rmdir指令</h3><p>删除空目录</p><p>rmdir 要删除的空目录</p><p>案例：删除一个目录 /home/dog</p><p>细节注意：删除的是空目录，有内容则无法删除</p><p>如果要删除非空目录，需要使用 rm-rf 要删除的目录</p><p>例：rm -rf /home/animal</p><h3 id="touch-指令"><a href="#touch-指令" class="headerlink" title="touch 指令"></a>touch 指令</h3><p>创建空文件</p><p>touch 文件名称</p><p>案例：创建一个空文件 hello.txt</p><h2 id="p30-文件目录指令（3）"><a href="#p30-文件目录指令（3）" class="headerlink" title="p30 文件目录指令（3）"></a>p30 文件目录指令（3）</h2><h3 id="cp指令"><a href="#cp指令" class="headerlink" title="cp指令"></a>cp指令</h3><p>拷贝文件到指定目录</p><p>cp [选项] source dest</p><p>常用选项</p><p>-r：递归复制整个文件夹</p><p>cp hello.txt /home/bbb</p><p>cp -r /home/bbb /opt/</p><p>\cp 表示强制覆盖不提示</p><h3 id="rm指令"><a href="#rm指令" class="headerlink" title="rm指令"></a>rm指令</h3><p>移除文件或目录</p><p>rm [选项] 要删除的文件或目录</p><p>常用选项：</p><p>-r：递归删除整个文件夹</p><p>-f：强制删除不提示</p><p>案例一：将/home/hello.txt 删除，rm /home/hello.txt</p><p>案例二：递归删除整个文件夹 /home/bbb，rm -rf /home/bbb</p><h2 id="p31-文件目录指令（4）"><a href="#p31-文件目录指令（4）" class="headerlink" title="p31 文件目录指令（4）"></a>p31 文件目录指令（4）</h2><h3 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h3><p>mv移动文件与目录或重命名</p><p>基本语法</p><p>mv oldNameFile newNameFile （功能描述：重命名）</p><p>mv /temp/movefile /targetFolder (功能描述：移动文件)</p><p>实例</p><p>案例一：将/home/cat.txt 文件 重新命名为pig.txt</p><p>案例二：将/home/pig.txt 文件 移动到/root目录下</p><p>案例三：移动整个目录</p><h3 id="cat指令"><a href="#cat指令" class="headerlink" title="cat指令"></a>cat指令</h3><p>cat 查看文件内容</p><p>基本用法</p><p>​    cat [选项] 要查看的文件</p><p>常用选项</p><p>​    -n：显示行号</p><p>cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令| more</p><p>管道指的是 将前面得到的结果交给后面的指令来完成</p><h3 id="more-指令"><a href="#more-指令" class="headerlink" title="more 指令"></a>more 指令</h3><p>基于vi编辑器的文本过滤器，全屏幕按页显示文本文件内容。more指令中内置了若干快捷键</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103555.png" alt="image-20201225135544255"></p><p>基本语法：</p><p>more 要查看的文件</p><h3 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a>less指令</h3><p>分屏查看文件内容，功能与more类似，但比more更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于大型文件具有更高的效率。</p><p>基本语法</p><p>less 要查看的文件</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102101.png" alt="image-20201225140138011"></p><p>应用实例</p><p>案例: 采用less 查看一个大文件文件 /opt/杂文.txt</p><p>less /opt/杂文.txt</p><h3 id="echo-指令"><a href="#echo-指令" class="headerlink" title="echo 指令"></a>echo 指令</h3><p>echo 输出内容到控制台</p><p>基本语法</p><p>echo [选项] [输出内容]</p><p>应用实例</p><p>案例: 使用echo 指令输出环境变量, 比如输出    $PATH     $HOSTNAME,     echo $HOSTNAME</p><p>案例: 使用echo 指令输出hello,world!</p><h3 id="head-指令"><a href="#head-指令" class="headerlink" title="head 指令"></a>head 指令</h3><p>head 用于显示文件的开头部分内容，默认情况下head 指令显示文件的前10 行内容</p><p>基本语法</p><p>head 文件(功能描述：查看文件头10 行内容)</p><p>head -n 5 文件(功能描述：查看文件头5 行内容，5 可以是任意行数)</p><p>应用实例</p><p>案例: 查看/etc/profile 的前面5 行代码</p><p>head -n 5 /etc/profile</p><h3 id="tail-指令"><a href="#tail-指令" class="headerlink" title="tail 指令"></a>tail 指令</h3><p>tail 用于输出文件中尾部的内容，默认情况下tail 指令显示文件的前10 行内容。</p><p>基本语法</p><ol><li><p>tail 文件（功能描述：查看文件尾10 行内容）</p></li><li><p>tail -n 5 文件（功能描述：查看文件尾5 行内容，5 可以是任意行数）</p></li><li><p>tail -f 文件（功能描述：实时追踪该文档的所有更新）</p></li></ol><p>应用实例</p><p>案例1: 查看/etc/profile 最后5 行的代码</p><p>tail -n 5 /etc/profile</p><p>案例2: 实时监控mydate.txt , 看看到文件有变化时，是否看到， 实时的追加hello,world</p><p>tail -f /home/mydate.txt</p><h3 id="gt-指令和-gt-gt-指令"><a href="#gt-指令和-gt-gt-指令" class="headerlink" title="> 指令和>> 指令"></a>&gt; 指令和&gt;&gt; 指令</h3><p>  &gt; 输出重定向（覆盖）和&gt;&gt; 追加</p><p>基本语法</p><ol><li><p>ls -l &gt;文件（功能描述：列表的内容写入文件a.txt 中（覆盖写））</p></li><li><p>ls -al &gt;&gt;文件（功能描述：列表的内容追加到文件aa.txt 的末尾）</p></li><li><p>cat 文件1 &gt; 文件2 （功能描述：将文件1 的内容覆盖到文件2）</p></li><li><p>echo “内容”&gt;&gt; 文件(追加)</p></li></ol><p>应用实例</p><p>案例1: 将/home 目录下的文件列表写入到/home/info.txt 中, 覆盖写入</p><p>ls -l /home &gt; /home/info.txt [如果info.txt 没有，则会创建]</p><p>案例2: 将当前日历信息追加到/home/mycal 文件中</p><p>指令为： cal &gt;&gt; /home/mycal</p><h3 id="ln-指令"><a href="#ln-指令" class="headerlink" title="ln 指令"></a>ln 指令</h3><p>link</p><p>软链接也称为符号链接，类似于windows 里的快捷方式，主要存放了链接其他文件的路径</p><p>基本语法</p><p>ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</p><p>应用实例</p><p>案例1: 在/home 目录下创建一个软连接myroot，连接到/root 目录</p><h3 id="history-指令"><a href="#history-指令" class="headerlink" title="history 指令"></a>history 指令</h3><p>查看已经执行过历史命令,也可以执行历史指令</p><p>基本语法</p><p>history （功能描述：查看已经执行过历史命令）</p><p>应用实例</p><p>案例1: 显示所有的历史命令</p><p>history</p><p>案例2: 显示最近使用过的10 个指令。</p><p>history 10</p><p>案例3：执行历史编号为5 的指令</p><p>!5</p><h2 id="p34-时间日期类"><a href="#p34-时间日期类" class="headerlink" title="p34 时间日期类"></a>p34 时间日期类</h2><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><h3 id="date-指令-显示当前日期"><a href="#date-指令-显示当前日期" class="headerlink" title="date 指令-显示当前日期"></a>date 指令-显示当前日期</h3><p>基本语法</p><ol><li>date （功能描述：显示当前时间）</li><li>date +%Y （功能描述：显示当前年份）</li><li>date +%m（功能描述：显示当前月份）</li><li>date +%d （功能描述：显示当前是哪一天）</li><li>date “+%Y-%m-%d %H:%M:%S”（功能描述：显示年月日时分秒）</li></ol><p>应用实例<br>案例1: 显示当前时间信息<br>date<br>案例2: 显示当前时间年月日<br>date “+%Y-%m-%d”</p><p>案例3: 显示当前时间年月日时分秒<br>date “+%Y-%m-%d %H:%M:%S”</p><h3 id="date-指令-设置日期"><a href="#date-指令-设置日期" class="headerlink" title="date 指令-设置日期"></a>date 指令-设置日期</h3><p>基本语法<br>date -s 字符串时间</p><p>应用实例<br>案例1: 设置系统当前时间， 比如设置成2020-11-03 20:02:10<br>date -s “2020-11-03 20:02:10”</p><h3 id="cal-指令"><a href="#cal-指令" class="headerlink" title="cal 指令"></a>cal 指令</h3><p>查看日历指令cal</p><p>基本语法<br>cal [选项] （功能描述：不加选项，显示本月日历）</p><p>应用实例<br>案例1: 显示当前日历cal<br>案例2: 显示2020 年日历: cal 2020</p><h2 id="p35-查找指令（1）"><a href="#p35-查找指令（1）" class="headerlink" title="p35 查找指令（1）"></a>p35 查找指令（1）</h2><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h4><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</p><p>基本语法<br>find [搜索范围] [选项]</p><p>选项说明</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102121.png" alt="image-20201226141155703"></p><p>应用实例<br>案例1: 按文件名：根据名称查找/home 目录下的hello.txt 文件<br>find /home -name hello.txt<br>案例2：按拥有者：查找/opt 目录下，用户名称为nobody 的文件<br>find /opt -user nobody<br>案例3：查找整个linux 系统下大于200M 的文件（+n 大于-n 小于n 等于, 单位有k,M,G）<br>find / -size +200M</p><p>ls -lh h表示大小用k，m之类表示</p><h3 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate 指令"></a>locate 指令</h3><p>locate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate 时刻</p><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><p>locate 搜索文件</p><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><p>由于locate 指令基于数据库进行查询，所以第一次运行前，必须使用updatedb 指令创建locate 数据库。</p><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><p>案例1: 请使用locate 指令快速定位hello.txt 文件所在目录<br>which 指令，可以查看某个指令在哪个目录下，比如ls 指令在哪个目录<br>which ls</p><h2 id="p36-查找指令（2）"><a href="#p36-查找指令（2）" class="headerlink" title="p36 查找指令（2）"></a>p36 查找指令（2）</h2><h3 id="grep-指令和管道符号"><a href="#grep-指令和管道符号" class="headerlink" title="grep 指令和管道符号 |"></a>grep 指令和管道符号 |</h3><p>grep 过滤查找， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理。</p><h4 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h4><p>grep [选项] 查找内容源文件</p><h4 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102129.png" alt="image-20201229162422560"></p><h4 id="应用实例-1"><a href="#应用实例-1" class="headerlink" title="应用实例"></a>应用实例</h4><p>案例1: 请在hello.txt 文件中，查找”yes” 所在行，并且显示行号<br>写法1: cat /home/hello.txt | grep “yes”<br>写法2: grep -n “yes” /home/hello.txt</p><h2 id="p37-压缩和解压类"><a href="#p37-压缩和解压类" class="headerlink" title="p37 压缩和解压类"></a>p37 压缩和解压类</h2><h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip/gunzip 指令"></a>gzip/gunzip 指令</h3><p>gzip 用于压缩文件， gunzip 用于解压的</p><h4 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h4><p>gzip 文件（功能描述：压缩文件，只能将文件压缩为*.gz 文件）<br>gunzip 文件.gz （功能描述：解压缩文件命令）</p><h4 id="应用实例-2"><a href="#应用实例-2" class="headerlink" title="应用实例"></a>应用实例</h4><p>案例1: gzip 压缩， 将/home 下的hello.txt 文件进行压缩<br>gzip /home/hello.txt<br>案例2: gunzip 压缩， 将/home 下的hello.txt.gz 文件进行解压缩<br>gunzip /home/hello.txt.gz</p><h3 id="zip-unzip-指令"><a href="#zip-unzip-指令" class="headerlink" title="zip/unzip 指令"></a>zip/unzip 指令</h3><p>zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的</p><h4 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h4><p>zip [选项] XXX.zip 将要压缩的内容（功能描述：压缩文件和目录的命令）<br>unzip [选项] XXX.zip （功能描述：解压缩文件）</p><h4 id="zip-常用选项"><a href="#zip-常用选项" class="headerlink" title="zip 常用选项"></a>zip 常用选项</h4><p>-r：递归压缩，即压缩目录</p><h4 id="unzip-的常用选项"><a href="#unzip-的常用选项" class="headerlink" title="unzip 的常用选项"></a>unzip 的常用选项</h4><p>-d&lt;目录&gt; ：指定解压后文件的存放目录</p><h2 id="p38-压缩和解压类（2）"><a href="#p38-压缩和解压类（2）" class="headerlink" title="p38 压缩和解压类（2）"></a>p38 压缩和解压类（2）</h2><h3 id="tar-指令"><a href="#tar-指令" class="headerlink" title="tar 指令"></a>tar 指令</h3><p>tar 指令是打包指令，最后打包后的文件是.tar.gz 的文件。</p><h4 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a>基本语法</h4><p>tar [选项] XXX.tar.gz 打包的内容(功能描述：打包目录，压缩后的文件格式.tar.gz)</p><h4 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102133.png" alt="image-20201230105920233"></p><h4 id="应用实例-3"><a href="#应用实例-3" class="headerlink" title="应用实例"></a>应用实例</h4><p>案例1: 压缩多个文件，将/home/pig.txt 和/home/cat.txt 压缩成pc.tar.gz<br>tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt<br>案例2: 将/home 的文件夹压缩成myhome.tar.gz<br>tar -zcvf myhome.tar.gz /home/<br>案例3: 将pc.tar.gz 解压到当前目录<br>tar -zxvf pc.tar.gz<br>案例4: 将myhome.tar.gz 解压到/opt/tmp2 目录下(1) mkdir /opt/tmp2 (2) tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</p><h2 id="p39-实用指令小结"><a href="#p39-实用指令小结" class="headerlink" title="p39 实用指令小结"></a>p39 实用指令小结</h2><h2 id="p40-第十章-Linux组的介绍"><a href="#p40-第十章-Linux组的介绍" class="headerlink" title="p40 第十章 Linux组的介绍"></a>p40 第十章 Linux组的介绍</h2><h3 id="Linux-组基本介绍"><a href="#Linux-组基本介绍" class="headerlink" title="Linux 组基本介绍"></a>Linux 组基本介绍</h3><p>在linux 中的每个用户必须属于一个组，不能独立于组外。在linux 中每个文件<br>有所有者、所在组、其它组的概念。</p><ol><li>所有者</li><li>所在组</li><li>其它组</li><li>改变用户所在的组</li></ol><h2 id="p41-所有者"><a href="#p41-所有者" class="headerlink" title="p41 所有者"></a>p41 所有者</h2><h3 id="文件-目录所有者"><a href="#文件-目录所有者" class="headerlink" title="文件/目录所有者"></a>文件/目录所有者</h3><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。</p><h4 id="查看文件的所有者"><a href="#查看文件的所有者" class="headerlink" title="查看文件的所有者"></a>查看文件的所有者</h4><p>指令：ls –ahl<br>应用实例</p><h4 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h4><p>（change owner）</p><p>指令：chown 用户名 文件名<br>应用案例<br>要求：使用root 创建一个文件apple.txt ，然后将其所有者修改成tom<br>chown tom apple.txt</p><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><p>groupadd 组名</p><h4 id="应用实例-4"><a href="#应用实例-4" class="headerlink" title="应用实例"></a>应用实例</h4><p>创建一个组, ,monster<br>groupadd monster</p><p>创建一个用户fox ，并放入到monster 组中<br>useradd -g monster fox</p><h2 id="p42-所在组"><a href="#p42-所在组" class="headerlink" title="p42 所在组"></a>p42 所在组</h2><h3 id="文件-目录所在组"><a href="#文件-目录所在组" class="headerlink" title="文件/目录所在组"></a>文件/目录所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组(默认)。</p><h4 id="查看文件-目录所在组"><a href="#查看文件-目录所在组" class="headerlink" title="查看文件/目录所在组"></a>查看文件/目录所在组</h4><h5 id="基本指令-1"><a href="#基本指令-1" class="headerlink" title="基本指令"></a>基本指令</h5><p>ls –ahl<br>应用实例, 使用fox 来创建一个文件，看看该文件属于哪个组?</p><p>-rw-r–r–. 1 fox monster 0 12月 30 15:08 ok.txt</p><h4 id="修改文件-目录所在的组"><a href="#修改文件-目录所在的组" class="headerlink" title="修改文件/目录所在的组"></a>修改文件/目录所在的组</h4><h5 id="基本指令-2"><a href="#基本指令-2" class="headerlink" title="基本指令"></a>基本指令</h5><p>chgrp 组名文件名</p><h5 id="应用实例-5"><a href="#应用实例-5" class="headerlink" title="应用实例"></a>应用实例</h5><p>使用root 用户创建文件orange.txt ,看看当前这个文件属于哪个组，然后将这个文件所在组，修改到fruit 组。</p><ol><li><p>groupadd fruit</p></li><li><p>touch orange.txt</p></li><li><p>看看当前这个文件属于哪个组-&gt; root 组</p></li><li><p>chgrp fruit orange.txt</p></li></ol><h2 id="p43-修改所在组"><a href="#p43-修改所在组" class="headerlink" title="p43 修改所在组"></a>p43 修改所在组</h2><h3 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a>其它组</h3><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root 的管理权限可以改变某个用户所在的组。</p><h4 id="改变用户所在组-1"><a href="#改变用户所在组-1" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h4><p>usermod –g 新组名用户名<br>usermod –d 目录名用户名改变该用户登陆的初始目录。特别说明：用户需要有进入到新目录的权限。</p><h4 id="应用实例-6"><a href="#应用实例-6" class="headerlink" title="应用实例"></a>应用实例</h4><p>将zwj 这个用户从原来所在组，修改到wudang 组<br>usermod -g wudang zwj</p><h2 id="p44-rwx权限"><a href="#p44-rwx权限" class="headerlink" title="p44 rwx权限"></a>p44 rwx权限</h2><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><p>ls -l 中显示的内容如下：<br>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p><p>0-9 位说明<br>第0 位确定文件类型(d, - , l , c , b)<br>-代表是一个普通文件<br>l 是链接，相当于windows 的快捷方式 link<br>d 是目录，相当于windows 的文件夹<br>c 是字符设备文件，鼠标，键盘<br>b 是块设备，比如硬盘<br>第1-3 位确定所有者（该文件的所有者）拥有该文件的权限。—User<br>第4-6 位确定所属组（同用户组的）拥有该文件的权限，—Group<br>第7-9 位确定其他用户拥有该文件的权限—Other</p><h3 id="rwx-权限详解，难点"><a href="#rwx-权限详解，难点" class="headerlink" title="rwx 权限详解，难点"></a>rwx 权限详解，难点</h3><h4 id="rwx-作用到文件"><a href="#rwx-作用到文件" class="headerlink" title="rwx 作用到文件"></a>rwx 作用到文件</h4><ol><li>[ r ]代表可读(read): 可以读取,查看</li><li>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权<br>限，才能删除该文件.</li><li>[ x ]代表可执行(execute):可以被执行</li></ol><h4 id="rwx-作用到目录"><a href="#rwx-作用到目录" class="headerlink" title="rwx 作用到目录"></a>rwx 作用到目录</h4><ol><li>[ r ]代表可读(read): 可以读取，ls 查看目录内容</li><li>[ w ]代表可写(write): 可以修改, 对目录内创建+删除+重命名目录</li><li>[ x ]代表可执行(execute):可以进入该目录</li></ol><h2 id="p45-权限说明案例"><a href="#p45-权限说明案例" class="headerlink" title="p45 权限说明案例"></a>p45 权限说明案例</h2><h3 id="ls-l-中显示的内容如下："><a href="#ls-l-中显示的内容如下：" class="headerlink" title="ls -l 中显示的内容如下："></a>ls -l 中显示的内容如下：</h3><p>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p><h4 id="10-个字符确定不同用户能对文件干什么"><a href="#10-个字符确定不同用户能对文件干什么" class="headerlink" title="10 个字符确定不同用户能对文件干什么"></a>10 个字符确定不同用户能对文件干什么</h4><p>第一个字符代表文件类型： - l d c b<br>其余字符每3 个一组(rwx) 读(r) 写(w) 执行(x)<br>第一组rwx : 文件拥有者的权限是读、写和执行<br>第二组rw- : 与文件拥有者同一组的用户的权限是读、写但不能执行<br>第三组r– : 不与文件拥有者同组的其他用户的权限是读不能写和执行</p><p>可用数字表示为: r=4,w=2,x=1 因此rwx=4+2+1=7 , 数字可以进行组合</p><p>其它说明<br>1 文件：硬连接数或目录：子目录数<br>root 用户<br>root 组<br>1213 文件大小(字节)，如果是文件夹，显示4096 字节<br>Feb 2 09:39 最后修改日期<br>abc 文件名</p><h2 id="p46-修改权限"><a href="#p46-修改权限" class="headerlink" title="p46 修改权限"></a>p46 修改权限</h2><h3 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h3><h4 id="基本说明："><a href="#基本说明：" class="headerlink" title="基本说明："></a>基本说明：</h4><p>通过chmod 指令，可以修改文件或者目录的权限。</p><h4 id="第一种方式：-、-、-变更权限"><a href="#第一种方式：-、-、-变更权限" class="headerlink" title="第一种方式：+ 、-、= 变更权限"></a>第一种方式：+ 、-、= 变更权限</h4><p>u:所有者g:所有组o:其他人a:所有人(u、g、o 的总和)</p><ol><li>chmod u=rwx,g=rx,o=x 文件/目录名</li><li>chmod o+w 文件/目录名</li><li>chmod a-x 文件/目录名</li></ol><h5 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h5><ol><li>给abc 文件的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。<br>chmod u=rwx,g=rx,o=rx abc</li><li>给abc 文件的所有者除去执行的权限，增加组写的权限<br>chmod u-x,g+w abc</li><li>给abc 文件的所有用户添加读的权限<br>chmod a+r abc</li></ol><h4 id="第二种方式：通过数字变更权限"><a href="#第二种方式：通过数字变更权限" class="headerlink" title="第二种方式：通过数字变更权限"></a>第二种方式：通过数字变更权限</h4><p>r=4 w=2 x=1 rwx=4+2+1=7<br>chmod u=rwx,g=rx,o=x 文件目录名<br>相当于chmod 751 文件/目录名</p><h5 id="案例演示-1"><a href="#案例演示-1" class="headerlink" title="案例演示"></a>案例演示</h5><p>要求：将/home/abc.txt 文件的权限修改成rwxr-xr-x, 使用给数字的方式实现：</p><p>chmod 755 /home/abc.txt</p><h2 id="p47-修改所在组和所有者"><a href="#p47-修改所在组和所有者" class="headerlink" title="p47 修改所在组和所有者"></a>p47 修改所在组和所有者</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>chown newowner 文件/目录改变所有者<br>chown newowner:newgroup 文件/目录改变所有者和所在组</p><p>-R 如果是目录则使其下所有子文件或目录递归生效</p><h4 id="案例演示-2"><a href="#案例演示-2" class="headerlink" title="案例演示"></a>案例演示</h4><ol><li><p>请将/home/abc.txt 文件的所有者修改成tom<br>chown tom /home/abc.txt</p></li><li><p>请将/home/test 目录下所有的文件和目录的所有者都修改成tom<br>chown -R tom /home/test</p></li></ol><h4 id="修改文件-目录所在组-chgrp"><a href="#修改文件-目录所在组-chgrp" class="headerlink" title="修改文件/目录所在组-chgrp"></a>修改文件/目录所在组-chgrp</h4><h5 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h5><p>chgrp newgroup 文件/目录【改变所在组】</p><h5 id="案例演示-3"><a href="#案例演示-3" class="headerlink" title="案例演示"></a>案例演示</h5><p>请将/home/abc .txt 文件的所在组修改成shaolin (少林)<br>groupadd shaolin<br>chgrp shaolin /home/abc.txt<br>请将/home/test 目录下所有的文件和目录的所在组都修改成shaolin(少林)<br>chgrp -R shaolin /home/test</p><h2 id="p48-最佳实践-警察和土匪游戏"><a href="#p48-最佳实践-警察和土匪游戏" class="headerlink" title="p48 最佳实践-警察和土匪游戏"></a>p48 最佳实践-警察和土匪游戏</h2><p>police ， bandit<br>jack, jerry: 警察<br>xh, xq: 土匪</p><ol><li>创建组groupadd police ; groupadd bandit</li><li>创建用户<br>useradd -g police jack ; useradd -g police jerry<br>useradd -g bandit xh; useradd -g bandit xq</li><li>jack 创建一个文件，自己可以读r 写w，本组人可以读，其它组没人任何权限<br>首先jack 登录； vim jack.txt ; chmod 640 jack.txt</li><li>jack 修改该文件，让其它组人可以读, 本组人可以读写<br>chmod o=r,g=r jack.txt</li><li>xh 投靠警察，看看是否可以读写.<br>usermod -g police xh</li><li>测试，看看xh 是否可以读写，xq 是否可以, 小结论，就是如果要对目录内的文件进行操作，需要要有对该目录的<br>相应权限</li></ol><h2 id="p49文件权限管理-课堂练习1"><a href="#p49文件权限管理-课堂练习1" class="headerlink" title="p49文件权限管理[课堂练习1]"></a>p49文件权限管理[课堂练习1]</h2><ol><li><p>建立两个组（神仙(sx),妖怪(yg)）</p></li><li><p>建立四个用户(唐僧,悟空，八戒，沙僧)</p></li><li><p>设置密码</p></li><li><p>把悟空，八戒放入妖怪唐僧沙僧在神仙</p></li><li><p>用悟空建立一个文件（monkey.java 该文件要输出i am monkey）</p></li><li><p>给八戒一个可以r w 的权限</p></li><li><p>八戒修改monkey.java 加入一句话( i am pig)</p></li><li><p>唐僧沙僧对该文件没有权限</p></li><li><p>把沙僧放入妖怪组</p></li><li><p>让沙僧修改该文件monkey, 加入一句话(“我是沙僧，我是妖怪!”);</p></li><li><p>对文件夹rwx 的细节讨论和测试!!!<br>x: 表示可以进入到该目录, 比如cd<br>r: 表示可以ls , 将目录的内容显示<br>w: 表示可以在该目录，删除或者创建文件</p></li><li><p>示意图</p></li></ol><img src="linux韩顺平2021.assets/image-20210115140531445.png" alt="image-20210115140531445" style="zoom:150%;"><p>课堂练习2，完成如下操作</p><ol><li>用root 登录，建立用户mycentos,自己设定密码</li><li>用mycentos 登录，在主目录下建立目录test/t11/t1</li><li>在t1 中建立一个文本文件aa,用vi 编辑其内容为ls –al</li><li>改变aa 的权限为可执行文件[可以将当前日期追加到一个文件],运行该文件./aa</li><li>删除新建立的目录test/t11/t1</li><li>删除用户mycentos 及其主目录中的内容</li><li>将linux 设置成进入到图形界面的</li><li>重新启动linux 或关机</li></ol><h2 id="p50-第10章总结"><a href="#p50-第10章总结" class="headerlink" title="p50 第10章总结"></a>p50 第10章总结</h2><h2 id="p51-第11章-定时任务调度"><a href="#p51-第11章-定时任务调度" class="headerlink" title="p51 第11章 定时任务调度"></a>p51 第11章 定时任务调度</h2><h3 id="crond-任务调度"><a href="#crond-任务调度" class="headerlink" title="crond 任务调度"></a>crond 任务调度</h3><p>crontab 进行 定时任务的设置</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>任务调度：是指系统在某个时间执行的特定的命令或程序。<br>任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等<br>个别用户工作：个别用户可能希望执行某些程序，比如对mysql 数据库的备份。<br>示意图</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102137.png" alt="image-20210120170042021"></p><h2 id="p52-crontab"><a href="#p52-crontab" class="headerlink" title="p52 crontab"></a>p52 crontab</h2><h3 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a>基本语法</h3><p>crontab [选项]</p><h3 id="常用选项-1"><a href="#常用选项-1" class="headerlink" title="常用选项"></a>常用选项</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102141.png" alt="image-20210120170118097"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>设置任务调度文件：/etc/crontab<br>设置个人任务调度。执行crontab –e 命令。<br>接着输入任务到调度文件<br>如：*/1 * * * * ls –l /etc/ &gt; /tmp/to.txt<br>意思说每小时的每分钟执行ls –l /etc/ &gt; /tmp/to.txt 命令</p><h4 id="参数细节说明"><a href="#参数细节说明" class="headerlink" title="参数细节说明"></a>参数细节说明</h4><p>cron表达式</p><p>5 个占位符的说明</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102146.png" alt="image-20210120170150025"></p><h2 id="p53-crond-时间规则"><a href="#p53-crond-时间规则" class="headerlink" title="p53 crond 时间规则"></a>p53 crond 时间规则</h2><h3 id="特殊时间执行案例"><a href="#特殊时间执行案例" class="headerlink" title="特殊时间执行案例"></a>特殊时间执行案例</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102152.png" alt="image-20210121115047050"></p><p>每天的凌晨4点，每10分钟的时间段为 4-5点之内</p><h2 id="p54-crond应用实例"><a href="#p54-crond应用实例" class="headerlink" title="p54 crond应用实例"></a>p54 crond应用实例</h2><p>案例1：每隔1 分钟，就将当前的日期信息，追加到/tmp/mydate 文件中</p><p>*/1 * * * * date &gt;&gt; /tmp/mydate</p><p>案例2：每隔1 分钟， 将当前日期和日历都追加到/home/mycal 文件中<br>步骤:</p><p>(1) vim /home/my.sh 写入内容date &gt;&gt; /home/mycal 和cal &gt;&gt; /home/mycal<br>(2) 给my.sh 增加执行权限，chmod u+x /home/my.sh<br>(3) crontab -e 增加*/1 * * * * /home/my.sh</p><h3 id="crond-相关指令"><a href="#crond-相关指令" class="headerlink" title="crond 相关指令"></a>crond 相关指令</h3><p>conrtab –r：终止任务调度。其实就是删除crondtab -e 中的任务<br>crontab –l：列出当前有那些任务调度<br>service crond restart [重启任务调度]</p><h2 id="p55-at定时任务"><a href="#p55-at定时任务" class="headerlink" title="p55 at定时任务"></a>p55 at定时任务</h2><h3 id="基本介绍-2"><a href="#基本介绍-2" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li>at 命令是一次性定时计划任务，at 的守护进程atd 会以后台模式运行，检查作业队列来运行。</li><li>默认情况下，atd 守护进程每60 秒检查作业队列（任务队列），有作业时，会检查作业运行时间，如果时间与当前时间匹配，则<br>运行此作业。</li><li>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</li><li>在使用at 命令的时候，一定要保证atd 进程的启动, 可以使用相关指令来查看<br>ps -ef | grep atd //可以检测atd 是否在运行</li></ol><p>ps -ef 检测现在有哪些进程在运行</p><p>| grep 过滤</p><ol start="5"><li>画一个示意图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102156.png" alt="image-20210123135029411"></p><h3 id="at-命令格式"><a href="#at-命令格式" class="headerlink" title="at 命令格式"></a>at 命令格式</h3><p>at [选项] [时间]<br>Ctrl + D 结束at 命令的输入， 输出两次</p><h3 id="at-命令选项"><a href="#at-命令选项" class="headerlink" title="at 命令选项"></a>at 命令选项</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102200.png" alt="image-20210123135756634"></p><h3 id="at-时间定义"><a href="#at-时间定义" class="headerlink" title="at 时间定义"></a>at 时间定义</h3><p>at 指定时间的方法：</p><ol><li>接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04:00</li><li>使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4 点）等比较模糊的词语来指定时间。</li><li>采用12 小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。例如：12pm</li><li>指定命令执行的具体日期，指定格式为month day（月日）或mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指<br>定的日期必须跟在指定时间的后面。例如：04:00 2021-03-1</li><li>使用相对计时法。指定格式为：now + count time-units ，now 就是当前时间，time-units 是时间单位，这里能够是minutes<br>（分钟）、hours（小时）、days（天）、weeks（星期）。count 是时间的数量，几天，几小时。例如：now + 5 minutes</li><li>直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</li></ol><h2 id="p56-at任务调度实例"><a href="#p56-at任务调度实例" class="headerlink" title="p56 at任务调度实例"></a>p56 at任务调度实例</h2><h3 id="案例1：2-天后的下午5-点执行-bin-ls-home"><a href="#案例1：2-天后的下午5-点执行-bin-ls-home" class="headerlink" title="案例1：2 天后的下午5 点执行/bin/ls /home"></a>案例1：2 天后的下午5 点执行/bin/ls /home</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102205.png" alt="image-20210123141446318"></p><h3 id="案例2：atq-命令来查看系统中没有执行的工作任务"><a href="#案例2：atq-命令来查看系统中没有执行的工作任务" class="headerlink" title="案例2：atq 命令来查看系统中没有执行的工作任务"></a>案例2：atq 命令来查看系统中没有执行的工作任务</h3><h3 id="案例3：明天17-点钟，输出时间到指定文件内比如-root-date100-log"><a href="#案例3：明天17-点钟，输出时间到指定文件内比如-root-date100-log" class="headerlink" title="案例3：明天17 点钟，输出时间到指定文件内比如/root/date100.log"></a>案例3：明天17 点钟，输出时间到指定文件内比如/root/date100.log</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102210.png" alt="image-20210123141512908"></p><h3 id="案例4：2-分钟后，输出时间到指定文件内比如-root-date200-log"><a href="#案例4：2-分钟后，输出时间到指定文件内比如-root-date200-log" class="headerlink" title="案例4：2 分钟后，输出时间到指定文件内比如/root/date200.log"></a>案例4：2 分钟后，输出时间到指定文件内比如/root/date200.log</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102214.png" alt="image-20210123141526550"></p><h3 id="案例5：删除已经设置的任务-atrm-编号"><a href="#案例5：删除已经设置的任务-atrm-编号" class="headerlink" title="案例5：删除已经设置的任务, atrm 编号"></a>案例5：删除已经设置的任务, atrm 编号</h3><p>atrm 4 //表示将job 队列，编号为4 的job 删除.</p><h3 id="默认删除键变-H，只要按住ctrl键，删除键就可以使用了"><a href="#默认删除键变-H，只要按住ctrl键，删除键就可以使用了" class="headerlink" title="默认删除键变^H，只要按住ctrl键，删除键就可以使用了~"></a><em><strong>默认删除键变^H，只要按住ctrl键，删除键就可以使用了~</strong></em></h3><h2 id="p57-任务调度小结"><a href="#p57-任务调度小结" class="headerlink" title="p57 任务调度小结"></a>p57 任务调度小结</h2><h2 id="p58-磁盘分区机制"><a href="#p58-磁盘分区机制" class="headerlink" title="p58 磁盘分区机制"></a>p58 磁盘分区机制</h2><h3 id="Linux-分区"><a href="#Linux-分区" class="headerlink" title="Linux 分区"></a>Linux 分区</h3><h4 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h4><ol><li>Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构, Linux<br>中每个分区都是用来组成整个文件系统的一部分。</li><li>Linux 采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录<br>联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得。</li><li>示意图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102219.png" alt="image-20210123143218395"></p><h4 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h4><ol><li>Linux 硬盘分IDE 硬盘和SCSI 硬盘，目前基本上是SCSI 硬盘</li><li>对于IDE 硬盘，驱动器标识符为“hdx<del>”,其中“hd”表明分区所在设备的类型，这里是指IDE 硬盘了。“x”为盘号（a 为<br>基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）,“</del>”代表分区，前四个分区用数字1 到4 表示，它们是主分区或扩展分区，从5 开始就是逻辑分区。例，hda3 表示为第一个IDE 硬盘上的第三个主分区或扩展分区,hdb2表示为第二个IDE 硬盘上的第二个主分区或扩展分区。</li><li>对于SCSI 硬盘则标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE 硬盘的表示方法一样</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102223.png" alt="image-20210129134831613"></p><h3 id="查看所有设备挂载情况"><a href="#查看所有设备挂载情况" class="headerlink" title="查看所有设备挂载情况"></a>查看所有设备挂载情况</h3><p>命令：lsblk 或者lsblk -f</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102227.png" alt="image-20210201094938180"></p><h2 id="p59-增加磁盘应用实例"><a href="#p59-增加磁盘应用实例" class="headerlink" title="p59 增加磁盘应用实例"></a>p59 增加磁盘应用实例</h2><h3 id="挂载的经典案例"><a href="#挂载的经典案例" class="headerlink" title="挂载的经典案例"></a>挂载的经典案例</h3><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>下面我们以增加一块硬盘为例来熟悉下磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念。</p><h4 id="如何增加一块硬盘"><a href="#如何增加一块硬盘" class="headerlink" title="如何增加一块硬盘"></a>如何增加一块硬盘</h4><ol><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>设置可以自动挂载</li></ol><h4 id="虚拟机增加硬盘步骤1"><a href="#虚拟机增加硬盘步骤1" class="headerlink" title="虚拟机增加硬盘步骤1"></a>虚拟机增加硬盘步骤1</h4><p>在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方<br>需要修改，至到完成。然后重启系统（才能识别）！</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102231.png" alt="image-20210201145342620"></p><h4 id="虚拟机增加硬盘步骤2"><a href="#虚拟机增加硬盘步骤2" class="headerlink" title="虚拟机增加硬盘步骤2"></a>虚拟机增加硬盘步骤2</h4><p>分区命令fdisk /dev/sdb</p><p>开始对/sdb 分区<br>m 显示命令列表<br>p 显示磁盘分区同fdisk –l<br>n 新增分区<br>d 删除分区<br>w 写入并退出</p><p>说明： 开始分区后输入n，新增分区，然后选择p ，分区类型为主分区。两次回车默认剩余全部空间。最后输入w<br>写入分区并退出，若不保存退出输入q。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102235.png" alt="image-20210201170126047"></p><h4 id="虚拟机增加硬盘步骤3"><a href="#虚拟机增加硬盘步骤3" class="headerlink" title="虚拟机增加硬盘步骤3"></a>虚拟机增加硬盘步骤3</h4><p>格式化磁盘<br>分区命令:mkfs -t ext4 /dev/sdb1<br>其中ext4 是分区类型</p><h4 id="虚拟机增加硬盘步骤4"><a href="#虚拟机增加硬盘步骤4" class="headerlink" title="虚拟机增加硬盘步骤4"></a>虚拟机增加硬盘步骤4</h4><p>挂载: 将一个分区与一个目录联系起来，<br>mount 设备名称挂载目录<br>例如： mount /dev/sdb1 /newdisk</p><p>umount 设备名称或者挂载目录</p><p>例如： umount /dev/sdb1 或者umount /newdisk</p><p>老师注意: 用命令行挂载,重启后会失效</p><p><strong>问题：1.能否在一个目录下挂载多个分区</strong></p><p>不能，只能挂载一个</p><p><strong>如果切换挂载 已经写入的文件位置仍然不变</strong></p><h4 id="虚拟机增加硬盘步骤5"><a href="#虚拟机增加硬盘步骤5" class="headerlink" title="虚拟机增加硬盘步骤5"></a>虚拟机增加硬盘步骤5</h4><p>永久挂载: 通过修改/etc/fstab 实现挂载<br>添加完成后执行mount –a 即刻生效</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102240.png" alt="image-20210201175116348"></p><h2 id="p60-磁盘情况查询"><a href="#p60-磁盘情况查询" class="headerlink" title="p60 磁盘情况查询"></a>p60 磁盘情况查询</h2><h3 id="查询系统整体磁盘使用情况"><a href="#查询系统整体磁盘使用情况" class="headerlink" title="查询系统整体磁盘使用情况"></a>查询系统整体磁盘使用情况</h3><h4 id="基本语法-8"><a href="#基本语法-8" class="headerlink" title="基本语法"></a>基本语法</h4><p>df -h</p><h4 id="应用实例-7"><a href="#应用实例-7" class="headerlink" title="应用实例"></a>应用实例</h4><p>查询系统整体磁盘使用情况</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102244.png" alt="image-20210201175332950"></p><h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><h4 id="基本语法-9"><a href="#基本语法-9" class="headerlink" title="基本语法"></a>基本语法</h4><p>du -h</p><p>查询指定目录的磁盘占用情况，默认为当前目录<br>-s 指定目录占用大小汇总<br>-h 带计量单位<br>-a 含文件<br>–max-depth=1 子目录深度<br>-c 列出明细的同时，增加汇总值</p><h4 id="应用实例-8"><a href="#应用实例-8" class="headerlink" title="应用实例"></a>应用实例</h4><p>查询/opt 目录的磁盘占用情况，深度为1</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102248.png" alt="image-20210201175545788"></p><h2 id="p61-磁盘情况-工作实用指令"><a href="#p61-磁盘情况-工作实用指令" class="headerlink" title="p61 磁盘情况-工作实用指令"></a>p61 磁盘情况-工作实用指令</h2><ol><li>统计/opt 文件夹下文件的个数<br>ls -l /opt | grep “^-“ | wc -l</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102251.png" alt="image-20210201175741424"></p><ol start="2"><li>统计/opt 文件夹下目录的个数<br>ls -l /opt | grep “^d” | wc -l</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102256.png" alt="image-20210201175813710"></p><ol start="3"><li><p>统计/opt 文件夹下文件的个数，包括子文件夹里的<br>ls -lR /opt | grep “^-“ | wc -l</p></li><li><p>统计/opt 文件夹下目录的个数，包括子文件夹里的<br>ls -lR /opt | grep “^d” | wc -l</p></li><li><p>以树状显示目录结构tree 目录， 注意，如果没有tree ,则使用yum install tree 安装</p></li></ol><h2 id="p62-磁盘挂载小结"><a href="#p62-磁盘挂载小结" class="headerlink" title="p62 磁盘挂载小结"></a>p62 磁盘挂载小结</h2><h2 id="p63-NAT网络原理图"><a href="#p63-NAT网络原理图" class="headerlink" title="p63 NAT网络原理图"></a>p63 NAT网络原理图</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102301.png" alt="image-20210202091602122"></p><h2 id="p64-网络配置指令"><a href="#p64-网络配置指令" class="headerlink" title="p64 网络配置指令"></a>p64 网络配置指令</h2><h3 id="查看网络IP-和网关"><a href="#查看网络IP-和网关" class="headerlink" title="查看网络IP 和网关"></a>查看网络IP 和网关</h3><p>ip自动分配与指定ip</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102317.png" alt="image-20210202100611325"></p><h3 id="查看网关"><a href="#查看网关" class="headerlink" title="查看网关"></a>查看网关</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102322.png" alt="image-20210202100628749"></p><h3 id="查看windows-环境的中VMnet8-网络配置-ipconfig-指令"><a href="#查看windows-环境的中VMnet8-网络配置-ipconfig-指令" class="headerlink" title="查看windows 环境的中VMnet8 网络配置(ipconfig 指令)"></a>查看windows 环境的中VMnet8 网络配置(ipconfig 指令)</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102327.png" alt="image-20210202101222774"></p><h3 id="查看linux-的网络配置ifconfig"><a href="#查看linux-的网络配置ifconfig" class="headerlink" title="查看linux 的网络配置ifconfig"></a>查看linux 的网络配置ifconfig</h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102332.png" alt="image-20210202101245459"></p><h3 id="ping-测试主机之间网络连通性"><a href="#ping-测试主机之间网络连通性" class="headerlink" title="ping 测试主机之间网络连通性"></a>ping 测试主机之间网络连通性</h3><h4 id="基本语法-10"><a href="#基本语法-10" class="headerlink" title="基本语法"></a>基本语法</h4><p>ping 目的主机（功能描述：测试当前服务器是否可以连接目的主机）</p><h4 id="应用实例-9"><a href="#应用实例-9" class="headerlink" title="应用实例"></a>应用实例</h4><p>测试当前服务器是否可以连接百度<br>ping <a href="http://www.baidu.com/">www.baidu.com</a></p><h2 id="p65-网络配置实例"><a href="#p65-网络配置实例" class="headerlink" title="p65 网络配置实例"></a>p65 网络配置实例</h2><h3 id="linux-网络环境配置"><a href="#linux-网络环境配置" class="headerlink" title="linux 网络环境配置"></a>linux 网络环境配置</h3><h4 id="第一种方法-自动获取-："><a href="#第一种方法-自动获取-：" class="headerlink" title="第一种方法(自动获取)："></a>第一种方法(自动获取)：</h4><p>说明：登陆后，通过界面的来设置自动获取ip，特点：linux 启动后会自动获取IP,缺点是每次自动获取的ip 地址可<br>能不一样</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102336.png" alt="image-20210202101712920"></p><h4 id="第二种方法-指定ip"><a href="#第二种方法-指定ip" class="headerlink" title="第二种方法(指定ip)"></a>第二种方法(指定ip)</h4><p>说明<br>直接修改配置文件来指定IP,并可以连接到外网(程序员推荐)</p><p>编辑vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>要求：将ip 地址配置的静态的，比如: ip 地址为192.168.200.130</p><h5 id="ifcfg-ens33-文件说明"><a href="#ifcfg-ens33-文件说明" class="headerlink" title="ifcfg-ens33 文件说明"></a>ifcfg-ens33 文件说明</h5><p>DEVICE=eth0 #接口名（设备,网卡）</p><p>HWADDR=00:0C:2x:6x:0x:xx #MAC 地址</p><p>TYPE=Ethernet #网络类型（通常是Ethemet）</p><p>UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44 #随机id</p><p>#系统启动的时候网络接口是否有效（yes/no）<br>ONBOOT=yes</p><p>#IP 的配置方法[none|static|bootp|dhcp]（引导时不使用协议|静态分配IP|BOOTP 协议|DHCP 协议）<br>BOOTPROTO=static<br>#IP 地址<br>IPADDR=192.168.200.130<br>#网关<br>GATEWAY=192.168.200.2<br>#域名解析器<br>DNS1=192.168.200.2<br>重启网络服务或者重启系统生效<br>service network restart 、reboot</p><h2 id="p66-主机名和hosts映射"><a href="#p66-主机名和hosts映射" class="headerlink" title="p66 主机名和hosts映射"></a>p66 主机名和hosts映射</h2><h3 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h3><ol><li>为了方便记忆，可以给linux 系统设置主机名, 也可以根据需要修改主机名</li><li>指令hostname ： 查看主机名</li><li>修改文件在/etc/hostname 指定</li><li>修改后，重启生效</li></ol><h3 id="设置hosts-映射"><a href="#设置hosts-映射" class="headerlink" title="设置hosts 映射"></a>设置hosts 映射</h3><p>思考：如何通过主机名能够找到(比如ping) 某个linux 系统?</p><p>windows<br>在C:\Windows\System32\drivers\etc\hosts 文件指定即可</p><p><a href="https://www.cnblogs.com/lwh-note/p/9005953.html">win10无法修改host文件参考</a></p><p>案例: 192.168.200.130 hspedu100</p><p>linux<br>在/etc/hosts 文件指定</p><p>案例: 192.168.200.1 ThinkPad-PC</p><h3 id="主机名解析过程分析-Hosts、DNS"><a href="#主机名解析过程分析-Hosts、DNS" class="headerlink" title="主机名解析过程分析(Hosts、DNS)"></a>主机名解析过程分析(Hosts、DNS)</h3><h4 id="Hosts-是什么"><a href="#Hosts-是什么" class="headerlink" title="Hosts 是什么"></a>Hosts 是什么</h4><p>一个文本文件，用来记录IP 和Hostname(主机名)的映射关系</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>DNS，就是Domain Name System 的缩写，翻译过来就是域名系统<br>是互联网上作为域名和IP 地址相互映射的一个分布式数据库</p><h4 id="应用实例-用户在浏览器输入了www-baidu-com"><a href="#应用实例-用户在浏览器输入了www-baidu-com" class="headerlink" title="应用实例: 用户在浏览器输入了www.baidu.com"></a>应用实例: 用户在浏览器输入了<a href="http://www.baidu.com/">www.baidu.com</a></h4><ol><li>浏览器先检查浏览器缓存中有没有该域名解析IP 地址，有就先调用这个IP 完成解析；如果没有，就检查DNS 解析<br>器缓存，如果有直接返回IP 完成解析。这两个缓存，可以理解为本地解析器缓存</li><li>一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存他的IP 地址（DNS 解析记<br>录）.如在cmd 窗口中输入<br>ipconfig /displaydns //DNS 域名解析缓存<br>ipconfig /flushdns //手动清理dns 缓存</li><li>如果本地解析器缓存没有找到对应映射，检查系统中hosts 文件中有没有配置对应的域名IP 映射，如果有，则完成<br>解析并返回。</li><li>如果本地DNS 解析器缓存和hosts 文件中均没有找到对应的IP，则到域名服务DNS 进行解析域</li><li>示意图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102340.png" alt="image-20210202111536782"></p><h2 id="p67-网络配置小结"><a href="#p67-网络配置小结" class="headerlink" title="p67 网络配置小结"></a>p67 网络配置小结</h2><h2 id="p68-进程基本介绍"><a href="#p68-进程基本介绍" class="headerlink" title="p68 进程基本介绍"></a>p68 进程基本介绍</h2><ol><li>在LINUX 中，每个执行的程序都称为一个进程。每一个进程都分配一个ID 号(pid,进程号)。=&gt;windows =&gt; linux</li><li>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程<br>则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行。</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</li><li>示意图</li></ol><h2 id="p69-ps指令详解"><a href="#p69-ps指令详解" class="headerlink" title="p69 ps指令详解"></a>p69 ps指令详解</h2><h3 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h3><h4 id="基本介绍-3"><a href="#基本介绍-3" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>ps 命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数.</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102344.png" alt="image-20210202113438356"></p><h3 id="ps-详解"><a href="#ps-详解" class="headerlink" title="ps 详解"></a>ps 详解</h3><ol><li><p>指令：ps –aux|grep xxx ，比如我看看有没有sshd 服务</p></li><li><p>指令说明</p></li></ol><p> System V 展示风格<br> USER：用户名称<br> PID：进程号<br> %CPU：进程占用CPU 的百分比<br> %MEM：进程占用物理内存的百分比<br> VSZ：进程占用的虚拟内存大小（单位：KB）<br> RSS：进程占用的物理内存大小（单位：KB）<br> TT：终端名称,缩写.<br> STAT：进程状态，其中S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更   低的优先级，R-<br> 正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等<br> STARTED：进程的启动时间<br> TIME：CPU 时间，即进程使用CPU 的总时间<br> COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p><h2 id="p70-父子进程"><a href="#p70-父子进程" class="headerlink" title="p70 父子进程"></a>p70 父子进程</h2><h3 id="应用实例-10"><a href="#应用实例-10" class="headerlink" title="应用实例"></a>应用实例</h3><p>要求：以全格式显示当前所有的进程，查看进程的父进程。查看sshd 的父进程信息<br>ps -ef 是以全格式显示当前所有的进程<br>-e 显示所有进程。-f 全格式<br>ps -ef|grep sshd</p><p> 是BSD 风格<br>UID：用户ID<br>PID：进程ID<br>PPID：父进程ID<br>C：CPU 用于计算执行优先级的因子。数值越大，表明进程是CPU 密集型运算，执行优先级会降低；数值越小，表<br>明进程是I/O 密集型运算，执行优先级会提高<br>STIME：进程启动的时间<br>TTY：完整的终端名称<br>TIME：CPU 时间<br>CMD：启动进程所用的命令和参数</p><h2 id="p71-终止进程kill-和killall"><a href="#p71-终止进程kill-和killall" class="headerlink" title="p71 终止进程kill 和killall"></a>p71 终止进程kill 和killall</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍:"></a>介绍:</h3><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill 命令来完<br>成此项任务。</p><h3 id="基本语法-11"><a href="#基本语法-11" class="headerlink" title="基本语法"></a>基本语法</h3><p>kill [选项] 进程号（功能描述：通过进程号杀死/终止进程）<br>killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><h3 id="常用选项-2"><a href="#常用选项-2" class="headerlink" title="常用选项"></a>常用选项</h3><p>-9 :表示强迫进程立即停止</p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li>案例1：踢掉某个非法登录用户<br>kill 进程号, 比如kill 11421</li><li>案例2: 终止远程登录服务sshd, 在适当时候再次重启sshd 服务<br>kill sshd 对应的进程号; /bin/systemctl start sshd.service</li><li>案例3: 终止多个gedit , 演示killall gedit</li><li>案例4：强制杀掉一个终端, 指令kill -9 bash 对应的进程号</li></ol><h2 id="p72-查看进程树"><a href="#p72-查看进程树" class="headerlink" title="p72 查看进程树"></a>p72 查看进程树</h2><h3 id="14-4-1-基本语法"><a href="#14-4-1-基本语法" class="headerlink" title="14.4.1 基本语法"></a>14.4.1 基本语法</h3><p>pstree [选项] ,可以更加直观的来看进程信息</p><h3 id="14-4-2-常用选项"><a href="#14-4-2-常用选项" class="headerlink" title="14.4.2 常用选项"></a>14.4.2 常用选项</h3><p>-p :显示进程的PID<br>-u :显示进程的所属用户</p><h3 id="14-4-3-应用实例："><a href="#14-4-3-应用实例：" class="headerlink" title="14.4.3 应用实例："></a>14.4.3 应用实例：</h3><p> 案例1：请你树状的形式显示进程的pid<br>pstree -p<br> 案例2：请你树状的形式进程的用户<br>pstree -u</p><h2 id="p73-服务管理"><a href="#p73-服务管理" class="headerlink" title="p73 服务管理"></a>p73 服务管理</h2><h3 id="14-5-1-介绍"><a href="#14-5-1-介绍" class="headerlink" title="14.5.1 介绍:"></a>14.5.1 介绍:</h3><p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysqld , sshd<br>防火墙等)，因此我们又称为守护进程，是Linux 中非常重要的知识点。【原理图】</p><h3 id="14-5-2-service-管理指令"><a href="#14-5-2-service-管理指令" class="headerlink" title="14.5.2 service 管理指令"></a>14.5.2 service 管理指令</h3><ol><li>service 服务名[start | stop | restart | reload | status]</li><li>在CentOS7.0 后很多服务不再使用<font color="SkyBlue">  <strong>service</strong></font>  ,而是<font color="SkyBlue">  <strong>systemctl</strong></font>  (后面专门讲)</li><li>service 指令管理的服务在/etc/init.d 查看</li></ol><h3 id="service-管理指令案例"><a href="#service-管理指令案例" class="headerlink" title="service 管理指令案例"></a>service 管理指令案例</h3><p>请使用service 指令，查看，关闭，启动network [注意：在虚拟系统演示，因为网络连接会关闭]<br>指令:<br>service network status<br>service network stop<br>service network start</p><h3 id="14-5-4-查看服务名"><a href="#14-5-4-查看服务名" class="headerlink" title="14.5.4 查看服务名:"></a>14.5.4 查看服务名:</h3><p>方式1：使用setup -&gt; 系统服务就可以看到全部。<br>setup</p><p><font color="Red">按tab会进入图形化界面的下面的菜单 ，利于退出</font></p><p>方式2: /etc/init.d 看到service 指令管理的服务<br>ls -l /etc/init.d</p><h2 id="p74-服务管理（2）"><a href="#p74-服务管理（2）" class="headerlink" title="p74 服务管理（2）"></a>p74 服务管理（2）</h2><h3 id="14-5-5-服务的运行级别-runlevel"><a href="#14-5-5-服务的运行级别-runlevel" class="headerlink" title="14.5.5 服务的运行级别(runlevel):"></a>14.5.5 服务的运行级别(runlevel):</h3><p>Linux 系统有7 种运行级别(runlevel)：常用的是级别3 和5<br>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br>运行级别1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆<br>运行级别2：多用户状态(没有NFS)，不支持网络<br>运行级别3：完全的多用户状态(有NFS)，无界面，登陆后进入控制台命令行模式<br>运行级别4：系统未使用，保留<br>运行级别5：X11 控制台，登陆后进入图形GUI 模式<br>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动<br>开机的流程说明：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102348.png" alt="image-20210205142706265"></p><h2 id="p75-服务管理（3）"><a href="#p75-服务管理（3）" class="headerlink" title="p75 服务管理（3）"></a>p75 服务管理（3）</h2><h3 id="14-5-7-chkconfig-指令"><a href="#14-5-7-chkconfig-指令" class="headerlink" title="14.5.7 chkconfig 指令"></a>14.5.7 chkconfig 指令</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>通过chkconfig 命令可以给服务的各个运行级别设置自启动/关闭<br>chkconfig 指令管理的服务在/etc/init.d 查看<br>注意: Centos7.0 后，很多服务使用systemctl 管理(后面马上讲)</p><h4 id="chkconfig-基本语法"><a href="#chkconfig-基本语法" class="headerlink" title="chkconfig 基本语法"></a>chkconfig 基本语法</h4><ol><li>查看服务chkconfig –list [| grep xxx]</li><li>chkconfig 服务名–list</li><li>chkconfig –level 5 服务名on/off<br> 案例演示: 对network 服务进行各种操作, 把network 在3 运行级别,关闭自启动<br>chkconfig –level 3 network off<br>chkconfig –level 3 network on</li></ol><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><p>chkconfig 重新设置服务后自启动或关闭，需要重启机器reboot 生效.</p><h2 id="p76-服务管理（4）"><a href="#p76-服务管理（4）" class="headerlink" title="p76 服务管理（4）"></a>p76 服务管理（4）</h2><h3 id="14-5-8-systemctl-管理指令"><a href="#14-5-8-systemctl-管理指令" class="headerlink" title="14.5.8 systemctl 管理指令"></a>14.5.8 systemctl 管理指令</h3><p>基本语法： systemctl [start | stop | restart | status] 服务名<br>systemctl 指令管理的服务在/usr/lib/systemd/system 查看</p><h3 id="14-5-9-systemctl-设置服务的自启动状态"><a href="#14-5-9-systemctl-设置服务的自启动状态" class="headerlink" title="14.5.9 systemctl 设置服务的自启动状态"></a>14.5.9 systemctl 设置服务的自启动状态</h3><p>systemctl list-unit-files [ | grep 服务名] (查看服务开机启动状态, grep 可以进行过滤)<br>systemctl enable 服务名(设置服务开机启动)<br>systemctl disable 服务名(关闭服务开机启动)<br>systemctl is-enabled 服务名(查询某个服务是否是自启动的)</p><h3 id="14-5-10-应用案例："><a href="#14-5-10-应用案例：" class="headerlink" title="14.5.10 应用案例："></a>14.5.10 应用案例：</h3><p>查看当前防火墙的状况，关闭防火墙和重启防火墙。=&gt; firewalld.service<br>systemctl status firewalld; systemctl stop firewalld; systemctl start firewalld</p><h3 id="14-5-11-细节讨论："><a href="#14-5-11-细节讨论：" class="headerlink" title="14.5.11 细节讨论："></a>14.5.11 细节讨论：</h3><p>关闭或者启用防火墙后，立即生效。[telnet 测试某个端口即可]<br>这种方式只是<font color="Red">临时生效</font>，当重启系统后，还是回归以前对服务的设置。<br>如果希望设置某个服务自启动或关闭永久生效，要使用systemctl [enable|disable] 服务名. [演示]</p><h2 id="p77-服务管理（5）"><a href="#p77-服务管理（5）" class="headerlink" title="p77 服务管理（5）"></a>p77 服务管理（5）</h2><h3 id="14-5-12-打开或者关闭指定端口"><a href="#14-5-12-打开或者关闭指定端口" class="headerlink" title="14.5.12 打开或者关闭指定端口"></a>14.5.12 打开或者关闭指定端口</h3><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟<br>服务器监听端口通讯。这时，需要打开指定的端口。比如80、22、8080 等，这个又怎么做呢？老韩给给大家讲一讲。[示<br>意图]</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102353.png" alt="image-20210205155145378"></p><h3 id="14-5-13-firewall-指令"><a href="#14-5-13-firewall-指令" class="headerlink" title="14.5.13 firewall 指令"></a>14.5.13 firewall 指令</h3><ol><li>打开端口: firewall-cmd –permanent –add-port=端口号/协议</li><li>关闭端口: firewall-cmd –permanent –remove-port=端口号/协议</li><li>重新载入,才能生效: firewall-cmd –reload</li><li>查询端口是否开放: firewall-cmd –query-port=端口/协议</li></ol><h3 id="14-5-14-应用案例："><a href="#14-5-14-应用案例：" class="headerlink" title="14.5.14 应用案例："></a>14.5.14 应用案例：</h3><ol><li>启用防火墙， 测试111 端口是否能telnet , 不行</li><li>开放111 端口<br>firewall-cmd –permanent –add-port=111/tcp ; 需要firewall-cmd –reload</li><li>再次关闭111 端口<br>firewall-cmd –permanent –remove-port=111/tcp ; 需要firewall-cmd –reload</li></ol><h2 id="p78-动态监控进程"><a href="#p78-动态监控进程" class="headerlink" title="p78 动态监控进程"></a>p78 动态监控进程</h2><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>top 与ps 命令很相似。它们都用来显示正在执行的进程。Top 与ps 最大的不同之处，在于top 在执行一段时间可以<br>更新正在运行的的进程。</p><h3 id="14-6-2-基本语法"><a href="#14-6-2-基本语法" class="headerlink" title="14.6.2 基本语法"></a>14.6.2 基本语法</h3><p>top [选项]</p><h4 id="14-6-3-选项说明："><a href="#14-6-3-选项说明：" class="headerlink" title="14.6.3 选项说明："></a>14.6.3 选项说明：</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102357.png" alt="image-20210220092556056"></p><h2 id="p79-交互操作说明"><a href="#p79-交互操作说明" class="headerlink" title="p79 交互操作说明"></a>p79 交互操作说明</h2><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102402.png" alt="image-20210220092641785"></p><h3 id="14-6-5-应用实例"><a href="#14-6-5-应用实例" class="headerlink" title="14.6.5 应用实例"></a>14.6.5 应用实例</h3><p> 案例1.监视特定用户, 比如我们监控tom 用户<br>top：输入此命令，按回车键，查看执行的进程。<br>u：然后输入“u”回车，再输入用户名，即可,<br> 案例2：终止指定的进程, 比如我们要结束tom 登录<br>top：输入此命令，按回车键，查看执行的进程。<br>k：然后输入“k”回车，再输入要结束的进程ID 号<br> 案例3:指定系统状态更新的时间(每隔10 秒自动更新), 默认是3 秒<br>top -d 10</p><h2 id="p80-监控网络状态"><a href="#p80-监控网络状态" class="headerlink" title="p80 监控网络状态"></a>p80 监控网络状态</h2><h3 id="14-7-1-查看系统网络情况netstat"><a href="#14-7-1-查看系统网络情况netstat" class="headerlink" title="14.7.1 查看系统网络情况netstat"></a>14.7.1 查看系统网络情况netstat</h3><h4 id="基本语法-12"><a href="#基本语法-12" class="headerlink" title="基本语法"></a>基本语法</h4><p>netstat [选项]</p><h4 id="选项说明-1"><a href="#选项说明-1" class="headerlink" title="选项说明"></a>选项说明</h4><p>-an 按一定顺序排列输出<br>-p 显示哪个进程在调用</p><h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4><p>请查看服务名为sshd 的服务的信息。<br>netstat -anp | grep sshd</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102406.png" alt="image-20210220103422291"></p><h3 id="14-7-2-检测主机连接命令ping："><a href="#14-7-2-检测主机连接命令ping：" class="headerlink" title="14.7.2 检测主机连接命令ping："></a>14.7.2 检测主机连接命令ping：</h3><p>是一种网络检测工具，它主要是用检测远程主机是否正常，或是两部主机间的网线或网卡故障。<br>如: ping 对方ip 地址</p><h2 id="p81-进程管理小结"><a href="#p81-进程管理小结" class="headerlink" title="p81 进程管理小结"></a>p81 进程管理小结</h2><h2 id="p82-rpm管理（1）"><a href="#p82-rpm管理（1）" class="headerlink" title="p82 rpm管理（1）"></a>p82 rpm管理（1）</h2><h3 id="15-1-rpm-包的管理"><a href="#15-1-rpm-包的管理" class="headerlink" title="15.1 rpm 包的管理"></a>15.1 rpm 包的管理</h3><h4 id="15-1-1-介绍"><a href="#15-1-1-介绍" class="headerlink" title="15.1.1 介绍"></a>15.1.1 介绍</h4><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM<br>是RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似windows 的setup.exe，这一文件格式名称虽然打上<br>了RedHat 的标志，但理念是通用的。<br>Linux 的分发版本都有采用（suse,redhat, centos 等等），可以算是公认的行业标准了。</p><h4 id="15-1-2-rpm-包的简单查询指令"><a href="#15-1-2-rpm-包的简单查询指令" class="headerlink" title="15.1.2 rpm 包的简单查询指令"></a>15.1.2 rpm 包的简单查询指令</h4><p>查询已安装的rpm 列表rpm –qa|grep xx<br>举例： 看看当前系统，是否安装了firefox<br>指令: rpm -qa | grep firefox</p><h4 id="15-1-3-rpm-包名基本格式"><a href="#15-1-3-rpm-包名基本格式" class="headerlink" title="15.1.3 rpm 包名基本格式"></a>15.1.3 rpm 包名基本格式</h4><p>一个rpm 包名：firefox-60.2.2-1.el7.centos.x86_64<br>名称:firefox<br>版本号：60.2.2-1<br>适用操作系统: el7.centos.x86_64<br>表示centos7.x 的64 位系统<br>如果是i686、i386 表示32 位系统，noarch 表示通用</p><h4 id="15-1-4-rpm-包的其它查询指令："><a href="#15-1-4-rpm-包的其它查询指令：" class="headerlink" title="15.1.4 rpm 包的其它查询指令："></a>15.1.4 rpm 包的其它查询指令：</h4><p>rpm -qa :查询所安装的所有rpm 软件包<br>rpm -qa | more<br>rpm -qa | grep X [rpm -qa | grep firefox ]</p><p>rpm -q 软件包名:查询软件包是否安装<br>案例：rpm -q firefox<br>rpm -qi 软件包名：查询软件包信息<br>案例: rpm -qi firefox<br>rpm -ql 软件包名:查询软件包中的文件<br>比如： rpm -ql firefox<br>rpm -qf 文件全路径名查询文件所属的软件包<br>rpm -qf /etc/passwd<br>rpm -qf /root/install.log</p><h2 id="p83-rpm的卸载"><a href="#p83-rpm的卸载" class="headerlink" title="p83 rpm的卸载"></a>p83 rpm的卸载</h2><h4 id="15-1-5-卸载rpm-包："><a href="#15-1-5-卸载rpm-包：" class="headerlink" title="15.1.5 卸载rpm 包："></a>15.1.5 卸载rpm 包：</h4><h5 id="基本语法-13"><a href="#基本语法-13" class="headerlink" title="基本语法"></a>基本语法</h5><p>rpm -e RPM 包的名称//erase</p><h5 id="应用案例-1"><a href="#应用案例-1" class="headerlink" title="应用案例"></a>应用案例</h5><p>删除firefox 软件包<br>rpm -e firefox</p><h5 id="细节讨论"><a href="#细节讨论" class="headerlink" title="细节讨论"></a>细节讨论</h5><ol><li>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。<br>如： $ rpm -e foo<br>removing these packages would break dependencies:foo is needed by bar-1.0-1</li><li>如果我们就是要删除foo 这个rpm 包，可以增加参数–nodeps ,就可以强制删除，但是一般不推荐这样做，因为依<br>赖于该软件包的程序可能无法运行<br>如：$ rpm -e –nodeps foo</li></ol><h4 id="15-1-6-安装rpm-包"><a href="#15-1-6-安装rpm-包" class="headerlink" title="15.1.6 安装rpm 包"></a>15.1.6 安装rpm 包</h4><h5 id="基本语法-14"><a href="#基本语法-14" class="headerlink" title="基本语法"></a>基本语法</h5><p>rpm -ivh RPM 包全路径名称</p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><p>i=install 安装<br>v=verbose 提示<br>h=hash 进度条</p><h5 id="应用实例-11"><a href="#应用实例-11" class="headerlink" title="应用实例"></a>应用实例</h5><p>演示卸载和安装firefox 浏览器<br>rpm -e firefox<br>rpm -ivh firefox</p><p><span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 2021年2月20日10点59分</p><h2 id="p84-yum"><a href="#p84-yum" class="headerlink" title="p84 yum"></a>p84 yum</h2><h3 id="15-2-1-介绍："><a href="#15-2-1-介绍：" class="headerlink" title="15.2.1 介绍："></a>15.2.1 介绍：</h3><p>Yum 是一个Shell 前端软件包管理器。基于RPM 包管理，能够从指定的服务器自动<br>下载RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。<br>示意图</p><h3 id="15-2-2-yum-的基本指令"><a href="#15-2-2-yum-的基本指令" class="headerlink" title="15.2.2 yum 的基本指令"></a>15.2.2 yum 的基本指令</h3><p>查询yum 服务器是否有需要安装的软件<br>yum list|grep xx 软件列表</p><h3 id="15-2-3-安装指定的yum-包"><a href="#15-2-3-安装指定的yum-包" class="headerlink" title="15.2.3 安装指定的yum 包"></a>15.2.3 安装指定的yum 包</h3><p>yum install xxx 下载安装</p><h3 id="15-2-4-yum-应用实例："><a href="#15-2-4-yum-应用实例：" class="headerlink" title="15.2.4 yum 应用实例："></a>15.2.4 yum 应用实例：</h3><p>案例：请使用yum 的方式来安装firefox<br>rpm -e firefox<br>yum list | grep firefox<br>yum install firefox</p><h2 id="p85-软件包管理小结"><a href="#p85-软件包管理小结" class="headerlink" title="p85 软件包管理小结"></a>p85 软件包管理小结</h2><h2 id="p86-安装配置JDK1-8"><a href="#p86-安装配置JDK1-8" class="headerlink" title="p86 安装配置JDK1.8"></a>p86 安装配置JDK1.8</h2><h3 id="16-1-概述"><a href="#16-1-概述" class="headerlink" title="16.1 概述"></a>16.1 概述</h3><p>如果需要在Linux 下进行JavaEE 的开发，我们需要安装如下软件</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102409.png" alt="image-20210220113612663"></p><h3 id="16-2-安装JDK"><a href="#16-2-安装JDK" class="headerlink" title="16.2 安装JDK"></a>16.2 安装JDK</h3><h4 id="16-2-1-安装步骤"><a href="#16-2-1-安装步骤" class="headerlink" title="16.2.1 安装步骤"></a>16.2.1 安装步骤</h4><ol><li>mkdir /opt/jdk</li><li>通过xftp6 上传到/opt/jdk 下</li><li>cd /opt/jdk</li><li>解压tar -zxvf jdk-8u261-linux-x64.tar.gz</li><li>mkdir /usr/local/java</li><li>mv /opt/jdk/jdk1.8.0_261 /usr/local/java</li><li>配置环境变量的配置文件vim /etc/profile</li><li>export JAVA_HOME=/usr/local/java/jdk1.8.0_261</li><li>export PATH=$JAVA_HOME/bin:$PATH</li><li>source /etc/profile [让新的环境变量生效]</li></ol><p>刷新系统环境变量</p><h4 id="16-2-2-测试是否安装成功"><a href="#16-2-2-测试是否安装成功" class="headerlink" title="16.2.2 测试是否安装成功"></a>16.2.2 测试是否安装成功</h4><p>编写一个简单的Hello.java 输出”hello,world!”</p><h2 id="p87-tomcat-的安装"><a href="#p87-tomcat-的安装" class="headerlink" title="p87  tomcat 的安装"></a>p87  tomcat 的安装</h2><h4 id="16-3-1-步骤"><a href="#16-3-1-步骤" class="headerlink" title="16.3.1 步骤:"></a>16.3.1 步骤:</h4><ol><li>上传安装文件，并解压缩到/opt/tomcat</li><li>进入解压目录/bin , 启动tomcat ./startup.sh</li><li>开放端口8080 , 回顾firewall-cmd</li></ol><h4 id="16-3-2-测试是否安装成功："><a href="#16-3-2-测试是否安装成功：" class="headerlink" title="16.3.2 测试是否安装成功："></a>16.3.2 测试是否安装成功：</h4><p>在windows、Linux 下访问<a href="http://linuxip:8080/">http://linuxip:8080</a></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102413.png" alt="image-20210220135615700"></p><h2 id="p88-idea2020-的安装"><a href="#p88-idea2020-的安装" class="headerlink" title="p88 idea2020 的安装"></a>p88 idea2020 的安装</h2><h3 id="16-4-1-步骤"><a href="#16-4-1-步骤" class="headerlink" title="16.4.1 步骤"></a>16.4.1 步骤</h3><ol><li>下载地址: <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></li><li>解压缩到/opt/idea</li><li>启动idea bin 目录下./idea.sh，配置jdk</li><li>编写Hello world 程序并测试成功！</li></ol><h2 id="p89-mysql5-7-的安装"><a href="#p89-mysql5-7-的安装" class="headerlink" title="p89 mysql5.7 的安装(!!)"></a>p89 mysql5.7 的安装(!!)</h2><ol><li><p>新建文件夹/opt/mysql，并cd进去</p></li><li><p>运行wget <a href="http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar%EF%BC%8C%E4%B8%8B%E8%BD%BDmysql%E5%AE%89%E8%A3%85%E5%8C%85">http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar，下载mysql安装包</a></p></li></ol><p>PS：centos7.6自带的类mysql数据库是mariadb，会跟mysql冲突，要先删除。</p><ol start="3"><li><p>运行tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar </p></li><li><p>运行rpm -qa|grep mari，查询mariadb相关安装包</p></li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102417.jpg" alt="img"></p><ol start="5"><li><p>运行rpm -e –nodeps mariadb-libs，卸载</p></li><li><p>然后开始真正安装mysql，依次运行以下几条</p></li></ol><p>rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</p><p>rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</p><ol start="7"><li><p>运行systemctl start mysqld.service，启动mysql</p></li><li><p>然后开始设置root用户密码</p></li></ol><p>Mysql自动给root用户设置随机密码，运行grep “password” /var/log/mysqld.log可看到当前密码</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102420.jpg" alt="img"></p><ol start="9"><li><p>运行mysql -u root -p，用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行</p></li><li><p>设置root密码，对于个人开发环境，如果要设比较简单的密码（<strong>生产环境服务器要设复杂密码</strong>），可以运行</p></li></ol><p>set global validate_password_policy=0; 提示密码设置策略</p><p>（validate_password_policy默认值1，）</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102425.jpg" alt="img"></p><ol start="11"><li><p>set password for ‘root’@’localhost’ =password(‘xjxj1109’);</p></li><li><p>运行flush privileges;使密码设置生效</p></li></ol><h2 id="p90-小结"><a href="#p90-小结" class="headerlink" title="p90 小结"></a>p90 小结</h2><h2 id="p91-shell编程快速入门"><a href="#p91-shell编程快速入门" class="headerlink" title="p91 shell编程快速入门"></a>p91 shell编程快速入门</h2><h3 id="17-1-为什么要学习Shell-编程"><a href="#17-1-为什么要学习Shell-编程" class="headerlink" title="17.1 为什么要学习Shell 编程"></a>17.1 为什么要学习Shell 编程</h3><ol><li>Linux 运维工程师在进行服务器集群管理时，需要编写Shell 程序来进行服务器管理。</li><li>对于JavaEE 和Python 程序员来说，工作的需要，你的老大会要求你编写一些Shell 脚本进行程序或者是服务器的维<br>护，比如编写一个定时备份数据库的脚本。</li><li>对于大数据程序员来说，需要编写Shell 程序来管理集群</li></ol><h3 id="17-2-Shell-是什么"><a href="#17-2-Shell-是什么" class="headerlink" title="17.2 Shell 是什么"></a>17.2 Shell 是什么</h3><p>Shell 是一个命令行解释器，它为用户提供了一个向Linux 内核发送请求以便运行程序的界面系统级程序，用户可以<br>用Shell 来启动、挂起、停止甚至是编写一些程序。看一个示意图</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507102428.png" alt="image-20210222092830033"></p><h3 id="17-3-Shell-脚本的执行方式"><a href="#17-3-Shell-脚本的执行方式" class="headerlink" title="17.3 Shell 脚本的执行方式"></a>17.3 Shell 脚本的执行方式</h3><h4 id="17-3-1-脚本格式要求"><a href="#17-3-1-脚本格式要求" class="headerlink" title="17.3.1 脚本格式要求"></a>17.3.1 脚本格式要求</h4><ol><li>脚本以#!/bin/bash 开头</li><li>脚本需要有可执行权限</li></ol><p>chmod u+x [file]</p><h4 id="17-3-2-编写第一个Shell-脚本"><a href="#17-3-2-编写第一个Shell-脚本" class="headerlink" title="17.3.2 编写第一个Shell 脚本"></a>17.3.2 编写第一个Shell 脚本</h4><p>需求说明：创建一个Shell 脚本，输出hello world!<br>vim hello.sh<br>#!/bin/bash<br>echo “hello,world~”</p><p>可以使用绝对也可以使用相对路径来执行这个脚本，前提是有可执行权限</p><p>./hello.sh    <code>相对路径</code></p><p>/root/shcode/hello.sh    <code>绝对路径</code></p><h4 id="17-3-3-脚本的常用执行方式"><a href="#17-3-3-脚本的常用执行方式" class="headerlink" title="17.3.3 脚本的常用执行方式"></a>17.3.3 脚本的常用执行方式</h4><p>方式1(输入脚本的绝对路径或相对路径)<br>说明：首先要赋予helloworld.sh 脚本的+x 权限， 再执行脚本<br>比如./hello.sh 或者使用绝对路径/root/shcode/hello.sh<br>方式2(sh+脚本)<br>说明：<strong>不用赋予脚本+x 权限，直接执行即可。</strong><br>比如sh hello.sh , 也可以使用绝对路径</p><h2 id="p92-shell变量"><a href="#p92-shell变量" class="headerlink" title="p92 shell变量"></a>p92 shell变量</h2><h3 id="17-4-Shell-的变量"><a href="#17-4-Shell-的变量" class="headerlink" title="17.4 Shell 的变量"></a>17.4 Shell 的变量</h3><h4 id="17-4-1-Shell-变量介绍"><a href="#17-4-1-Shell-变量介绍" class="headerlink" title="17.4.1 Shell 变量介绍"></a>17.4.1 Shell 变量介绍</h4><ol><li>Linux Shell 中的变量分为，系统变量和用户自定义变量。</li><li>系统变量：$HOME、$PWD、$SHELL、$USER 等等，比如： echo $HOME 等等..</li><li>显示当前shell 中所有变量：set</li></ol><h4 id="17-4-2-shell-变量的定义"><a href="#17-4-2-shell-变量的定义" class="headerlink" title="17.4.2 shell 变量的定义"></a>17.4.2 shell 变量的定义</h4><p>基本语法</p><ol><li>定义变量：变量名=值</li></ol><p><code>中间不要空格</code></p><ol start="2"><li>撤销变量：unset 变量</li><li>声明静态变量：readonly 变量，注意：不能unset<br>快速入门</li><li>案例1：定义变量A</li><li>案例2：撤销变量A</li><li>案例3：声明静态的变量B=2，不能unset</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例1：定义变量A</span><br><span class="line">A=100</span><br><span class="line">#输出变量需要加上$</span><br><span class="line">echo A=$A</span><br><span class="line">echo "A=$A"</span><br><span class="line">#案例2：撤销变量A</span><br><span class="line">unset A</span><br><span class="line">echo "A=$A"</span><br><span class="line">#案例3：声明静态的变量B=2，不能unset</span><br><span class="line">readonly B=2</span><br><span class="line">echo "B=$B"</span><br><span class="line">#unset B</span><br><span class="line">#将指令返回的结果赋给变量</span><br><span class="line">:&lt;&lt;!</span><br><span class="line">C=`date`</span><br><span class="line">D=$(date)</span><br><span class="line">echo "C=$C"</span><br><span class="line">echo "D=$D"</span><br><span class="line">!</span><br><span class="line">#使用环境变量TOMCAT_HOME</span><br><span class="line">echo "tomcat_home=$TOMCAT_HOME"</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>案例4：可把变量提升为全局环境变量，可供其他shell 程序使用[该案例后面讲]</li></ol><h4 id="17-4-3-shell-变量的定义"><a href="#17-4-3-shell-变量的定义" class="headerlink" title="17.4.3 shell 变量的定义"></a>17.4.3 shell 变量的定义</h4><p>定义变量的规则</p><ol><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A=200(×)</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写， 这是一个规范，我们遵守即可<br>将命令的返回值赋给变量</li><li>A=<code>date</code>反引号，运行里面的命令，并把结果返回给变量A</li><li>A=$(date) 等价于反引号</li></ol><h2 id="p93-设置环境变量"><a href="#p93-设置环境变量" class="headerlink" title="p93 设置环境变量"></a>p93 设置环境变量</h2><h3 id="17-5-设置环境变量"><a href="#17-5-设置环境变量" class="headerlink" title="17.5 设置环境变量"></a>17.5 设置环境变量</h3><h4 id="17-5-1-基本语法"><a href="#17-5-1-基本语法" class="headerlink" title="17.5.1 基本语法"></a>17.5.1 基本语法</h4><ol><li>export 变量名=变量值（功能描述：将shell 变量输出为环境变量/全局变量）</li><li>source 配置文件（功能描述：让修改后的配置信息立即生效）</li><li>echo $变量名（功能描述：查询环境变量的值）</li><li>示意</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103217.png" alt="image-20210222093111460"></p><h4 id="17-5-2-快速入门"><a href="#17-5-2-快速入门" class="headerlink" title="17.5.2 快速入门"></a>17.5.2 快速入门</h4><ol><li>在/etc/profile 文件中定义TOMCAT_HOME 环境变量</li><li>查看环境变量TOMCAT_HOME 的值</li><li>在另外一个shell 程序中使用TOMCAT_HOME<br>注意：在输出TOMCAT_HOME 环境变量前，需要让其生效<br>source /etc/profile</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103221.png" alt="image-20210222093129382"></p><p>shell 脚本的多行注释<br>:&lt;&lt;! 内容!</p><h2 id="p94-位置参数变量"><a href="#p94-位置参数变量" class="headerlink" title="p94 位置参数变量"></a>p94 位置参数变量</h2><h4 id="17-6-1-介绍"><a href="#17-6-1-介绍" class="headerlink" title="17.6.1 介绍"></a>17.6.1 介绍</h4><p>当我们执行一个shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量<br>比如： ./myshell.sh 100 200 , 这个就是一个执行shell 的命令行，可以在myshell 脚本中获取到参数信息</p><h4 id="17-6-2-基本语法"><a href="#17-6-2-基本语法" class="headerlink" title="17.6.2 基本语法"></a>17.6.2 基本语法</h4><p>$n （功能描述：n 为数字，$0 代表命令本身，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参数需要用<br>大括号包含，如${10}）<br>$* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）<br>$@（功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）<br>$#（功能描述：这个变量代表命令行中所有参数的个数）</p><h4 id="17-6-3-位置参数变量"><a href="#17-6-3-位置参数变量" class="headerlink" title="17.6.3 位置参数变量"></a>17.6.3 位置参数变量</h4><p>案例：编写一个shell 脚本position.sh ， 在脚本中获取到命令行的各个参数信息。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103225.png" alt="image-20210222104341185"></p><h2 id="p95-预定义变量"><a href="#p95-预定义变量" class="headerlink" title="p95 预定义变量"></a>p95 预定义变量</h2><h3 id="17-7-预定义变量"><a href="#17-7-预定义变量" class="headerlink" title="17.7 预定义变量"></a>17.7 预定义变量</h3><h4 id="17-7-1-基本介绍"><a href="#17-7-1-基本介绍" class="headerlink" title="17.7.1 基本介绍"></a>17.7.1 基本介绍</h4><p>就是shell 设计者事先已经定义好的变量，可以直接在shell 脚本中使用</p><h4 id="17-7-2-基本语法"><a href="#17-7-2-基本语法" class="headerlink" title="17.7.2 基本语法"></a>17.7.2 基本语法</h4><ol><li>$$ （功能描述：当前进程的进程号（PID））</li><li>$! （功能描述：后台运行的最后一个进程的进程号（PID））</li><li>$？（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变<br>量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</li></ol><h4 id="17-7-3-应用实例"><a href="#17-7-3-应用实例" class="headerlink" title="17.7.3 应用实例"></a>17.7.3 应用实例</h4><p>在一个shell 脚本中简单使用一下预定义变量<br>preVar.sh<br>#!/bin/bash<br>echo “当前执行的进程id=$$”<br>#以后台的方式运行一个脚本，并获取他的进程号<br>/root/shcode/myshell.sh &amp;<br>echo “最后一个后台方式运行的进程id=$!”<br>echo “执行的结果是=$?”</p><h2 id="p96-运算符"><a href="#p96-运算符" class="headerlink" title="p96 运算符"></a>p96 运算符</h2><h4 id="17-8-1-基本介绍"><a href="#17-8-1-基本介绍" class="headerlink" title="17.8.1 基本介绍"></a>17.8.1 基本介绍</h4><p>学习如何在shell 中进行各种运算操作。</p><h4 id="17-8-2-基本语法"><a href="#17-8-2-基本语法" class="headerlink" title="17.8.2 基本语法"></a>17.8.2 基本语法</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1) “$((运算式))”或“$[运算式]”或者expr m + n //expression 表达式</span><br><span class="line">2) 注意expr 运算符间要有 空格 , 如果希望将expr 的结果赋给某个变量，使用``</span><br><span class="line">3) expr m - n</span><br><span class="line">4) expr \*, /, % 乘，除，取余</span><br></pre></td></tr></tbody></table></figure><h4 id="17-8-3-应用实例oper-sh"><a href="#17-8-3-应用实例oper-sh" class="headerlink" title="17.8.3 应用实例oper.sh"></a>17.8.3 应用实例oper.sh</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">案例1：计算（2+3）X4 的值</span><br><span class="line">案例2：请求出命令行的两个参数[整数]的和20 50</span><br><span class="line">#!/bin/bash</span><br><span class="line">#案例1：计算（2+3）X4 的值</span><br><span class="line">#使用第一种方式</span><br><span class="line">RES1=$(((2+3)*4))</span><br><span class="line">echo "res1=$RES1"</span><br><span class="line">#使用第二种方式, 推荐使用</span><br><span class="line">RES2=$[(2+3)*4]</span><br><span class="line">echo "res2=$RES2"</span><br><span class="line">#使用第三种方式expr</span><br><span class="line">TEMP=`expr 2 + 3`</span><br><span class="line">RES4=`expr $TEMP \* 4`</span><br><span class="line">echo "temp=$TEMP"</span><br><span class="line">echo "res4=$RES4"</span><br><span class="line">#案例2：请求出命令行的两个参数[整数]的和20 50</span><br><span class="line">SUM=$[$1+$2]</span><br><span class="line">echo "sum=$SUM"</span><br></pre></td></tr></tbody></table></figure><h2 id="p97-条件判断"><a href="#p97-条件判断" class="headerlink" title="p97 条件判断"></a>p97 条件判断</h2><h4 id="17-9-1-判断语句"><a href="#17-9-1-判断语句" class="headerlink" title="17.9.1 判断语句"></a>17.9.1 判断语句</h4><h5 id="基本语法-cry"><a href="#基本语法-cry" class="headerlink" title="基本语法 :cry:"></a>基本语法 <span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><p>[ condition ]（注意condition 前后要有空格）<br>#非空返回true，可使用$?验证（0 为true，&gt;1 为false）</p><h5 id="应用实例-no-bell"><a href="#应用实例-no-bell" class="headerlink" title="应用实例 :no_bell:"></a>应用实例 <span class="github-emoji"><span>🔕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><p>[ hspEdu ] 返回true<br>[ ] 返回false<br>[ condition ] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p><h5 id="判断语句-fu"><a href="#判断语句-fu" class="headerlink" title="判断语句 :fu:"></a>判断语句 <span class="github-emoji"><span>🖕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><p>常用判断条件 </p><ol><li><p>= 字符串比较</p></li><li><p>两个整数的比较</p></li></ol><p>-lt 小于<br>-le 小于等于little equal<br>-eq 等于<br>-gt 大于<br>-ge 大于等于<br>-ne 不等于</p><ol start="3"><li>按照文件权限进行判断</li></ol><p>-r 有读的权限<br>-w 有写的权限<br>-x 有执行的权限</p><ol start="4"><li>按照文件类型进行判断</li></ol><p>-f 文件存在并且是一个常规的文件<br>-e 文件存在<br>-d 文件存在并是一个目录</p><h5 id="应用实例-rocket"><a href="#应用实例-rocket" class="headerlink" title="应用实例:rocket:"></a>应用实例<span class="github-emoji"><span>🚀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h5><p>案例1：”ok”是否等于”ok”<br>判断语句：使用=<br>案例2：23 是否大于等于22<br>判断语句：使用-ge<br>案例3：/root/shcode/aaa.txt 目录中的文件是否存在<br>判断语句： 使用-f<br>代码如下:</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103229.png" alt="image-20210222152906029"></p><h2 id="p98-流程控制"><a href="#p98-流程控制" class="headerlink" title="p98 流程控制"></a>p98 流程控制</h2><h4 id="17-10-1-if-判断"><a href="#17-10-1-if-判断" class="headerlink" title="17.10.1 if 判断"></a>17.10.1 if 判断</h4><h5 id="基本语法-15"><a href="#基本语法-15" class="headerlink" title="基本语法"></a>基本语法</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br><span class="line">或者, 多分支</span><br><span class="line"></span><br><span class="line">if [ 条件判断式]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">elif [条件判断式]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure><p> 注意事项：[ 条件判断式]，中括号和条件判断式之间必须有空格<br> 应用实例ifCase.sh<br>案例：请编写一个shell 程序，如果输入的参数，大于等于60，则输出”及格了”，如果小于60,则输出”不及格”</p><h3 id="kissing"><a href="#kissing" class="headerlink" title=":kissing:"></a><span class="github-emoji"><span>😗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><h3 id="smirk"><a href="#smirk" class="headerlink" title=":smirk:"></a><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103232.png" alt="image-20210222160234077"></p><h2 id="p99-流程控制（2）"><a href="#p99-流程控制（2）" class="headerlink" title="p99 流程控制（2）"></a>p99 流程控制（2）</h2><h4 id="17-10-2-case-语句"><a href="#17-10-2-case-语句" class="headerlink" title="17.10.2 case 语句"></a>17.10.2 case 语句</h4><h5 id="基本语法-16"><a href="#基本语法-16" class="headerlink" title="基本语法"></a>基本语法</h5><p>case $变量名in<br>“值1”）<br>如果变量的值等于值1，则执行程序1<br>;;<br>“值2”）<br>如果变量的值等于值2，则执行程序2<br>;;<br>…省略其他分支…</p><p>*）<br>如果变量的值都不是以上的值，则执行此程序<br>;;<br>esac</p><h5 id="应用实例-testCase-sh"><a href="#应用实例-testCase-sh" class="headerlink" title="应用实例 testCase.sh"></a>应用实例 testCase.sh</h5><p>案例1 ：当命令行参数是1 时，输出”周一”, 是2 时，就输出”周二”， 其它情况输出”other”</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103235.png" alt="image-20210222160323330"></p><h2 id="p100-for-循环"><a href="#p100-for-循环" class="headerlink" title="p100 for 循环"></a>p100 for 循环</h2><h4 id="基本语法1-face-with-head-bandage"><a href="#基本语法1-face-with-head-bandage" class="headerlink" title="基本语法1:face_with_head_bandage:"></a>基本语法1<span class="github-emoji"><span>🤕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f915.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>for 变量in 值1 值2 值3…<br>do<br>程序/代码<br>done</p><h4 id="应用实例testFor1-sh-factory"><a href="#应用实例testFor1-sh-factory" class="headerlink" title="应用实例testFor1.sh:factory:"></a>应用实例testFor1.sh<span class="github-emoji"><span>🏭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>案例1 ：打印命令行输入的参数[这里可以看出$* 和$@ 的区别]</p><h4 id="基本语法2-face-with-thermometer"><a href="#基本语法2-face-with-thermometer" class="headerlink" title="基本语法2:face_with_thermometer:"></a>基本语法2<span class="github-emoji"><span>🤒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f912.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>for (( 初始值;循环控制条件;变量变化))<br>do<br>程序/代码<br>done</p><h4 id="应用实例testFor2-sh-facepunch"><a href="#应用实例testFor2-sh-facepunch" class="headerlink" title="应用实例testFor2.sh:facepunch:"></a>应用实例testFor2.sh<span class="github-emoji"><span>👊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>案例1 ：从1 加到100 的值输出显示</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103238.png" alt="image-20210222175514495"></p><h2 id="p101-while循环"><a href="#p101-while循环" class="headerlink" title="p101 while循环"></a>p101 while循环</h2><h4 id="基本语法1"><a href="#基本语法1" class="headerlink" title="基本语法1"></a>基本语法1</h4><p>while [ 条件判断式]<br>do<br>程序/代码<br>done<br>注意：while 和[有空格，条件判断式和[也有空格</p><h4 id="应用实例testWhile-sh"><a href="#应用实例testWhile-sh" class="headerlink" title="应用实例testWhile.sh"></a>应用实例testWhile.sh</h4><p>案例1 ：从命令行输入一个数n，统计从1+..+ n 的值是多少？</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例1 ：从命令行输入一个数n，统计从1+..+ n 的值是多少？</span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line">while [ $i -le $1 ]</span><br><span class="line">do</span><br><span class="line">SUM=$[$SUM+$i]</span><br><span class="line">#i 自增</span><br><span class="line">i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo "执行结果=$SUM"</span><br></pre></td></tr></tbody></table></figure><h2 id="p102-read-读取控制台输入"><a href="#p102-read-读取控制台输入" class="headerlink" title="p102 read 读取控制台输入"></a>p102 read 读取控制台输入</h2><h4 id="17-11-1-基本语法"><a href="#17-11-1-基本语法" class="headerlink" title="17.11.1 基本语法"></a>17.11.1 基本语法</h4><p>read(选项)(参数)<br>选项：<br>-p：指定读取值时的提示符；<br>-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。。<br>参数<br>变量：指定读取值的变量名</p><h4 id="17-11-2-应用实例testRead-sh"><a href="#17-11-2-应用实例testRead-sh" class="headerlink" title="17.11.2 应用实例testRead.sh"></a>17.11.2 应用实例testRead.sh</h4><p>案例1：读取控制台输入一个NUM1 值<br>案例2：读取控制台输入一个NUM2 值，在10 秒内输入。<br>代码:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例1：读取控制台输入一个NUM1 值</span><br><span class="line">read -p "请输入一个数NUM1=" NUM1</span><br><span class="line">echo "你输入的NUM1=$NUM1"</span><br><span class="line">#案例2：读取控制台输入一个NUM2 值，在10 秒内输入。</span><br><span class="line">read -t 10 -p "请输入一个数NUM2=" NUM2</span><br><span class="line">echo "你输入的NUM2=$NUM2"</span><br></pre></td></tr></tbody></table></figure><h2 id="p103-函数"><a href="#p103-函数" class="headerlink" title="p103 函数"></a>p103 函数</h2><h4 id="17-12-1-函数介绍"><a href="#17-12-1-函数介绍" class="headerlink" title="17.12.1 函数介绍"></a>17.12.1 函数介绍</h4><p>shell 编程和其它编程语言一样，有系统函数，也可以自定义函数。系统函数中，我们这里就介绍两个。</p><h4 id="17-12-2-系统函数"><a href="#17-12-2-系统函数" class="headerlink" title="17.12.2 系统函数"></a>17.12.2 系统函数</h4><h5 id="basename-基本语法"><a href="#basename-基本语法" class="headerlink" title="basename 基本语法"></a>basename 基本语法</h5><p>功能：返回完整路径最后/ 的部分，常用于获取文件名<br>basename [pathname] [suffix]<br>basename [string] [suffix] （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串<br>显示出来。<br>选项：<br>suffix 为后缀，如果suffix 被指定了，basename 会将pathname 或string 中的suffix 去掉。</p><p>应用实例<br>案例1：请返回/home/aaa/test.txt 的”test.txt” 部分<br>basename /home/aaa/test.txt</p><h5 id="dirname-基本语法"><a href="#dirname-基本语法" class="headerlink" title="dirname 基本语法"></a>dirname 基本语法</h5><p>功能：返回完整路径最后/ 的前面的部分，常用于返回路径部分<br>dirname 文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩<br>下的路径（目录的部分））<br> 应用实例<br>案例1：请返回/home/aaa/test.txt 的/home/aaa<br>dirname /home/aaa/test.txt</p><h2 id="p104-自定义函数"><a href="#p104-自定义函数" class="headerlink" title="p104 自定义函数"></a>p104 自定义函数</h2><p>基本语法<br>[ function ] funname[()]<br>{<br>Action;<br>[return int;]<br>}<br>调用直接写函数名：funname [值]<br>应用实例<br>案例1：计算输入两个参数的和(动态的获取)， getSum<br>代码</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#案例1：计算输入两个参数的和(动态的获取)， getSum</span><br><span class="line">#定义函数getSum</span><br><span class="line">function getSum() {</span><br><span class="line">SUM=$[$n1+$n2]</span><br><span class="line">echo "和是=$SUM"</span><br><span class="line">}</span><br><span class="line">#输入两个值</span><br><span class="line">read -p "请输入一个数n1=" n1</span><br><span class="line">read -p "请输入一个数n2=" n2</span><br><span class="line">#调用自定义函数</span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></tbody></table></figure><h2 id="p105-Shell-编程综合案例"><a href="#p105-Shell-编程综合案例" class="headerlink" title="p105 Shell 编程综合案例"></a>p105 Shell 编程综合案例</h2><h3 id="17-13-1-需求分析"><a href="#17-13-1-需求分析" class="headerlink" title="17.13.1 需求分析"></a>17.13.1 需求分析</h3><ol><li>每天凌晨2:30 备份数据库hspedu 到/data/backup/db</li><li>备份开始和备份结束能够给出相应的提示信息</li><li>备份后的文件要求以备份时间为文件名，并打包成.tar.gz 的形式，比如：2021-03-12_230201.tar.gz</li><li>在备份的同时，检查是否有10 天前备份的数据库文件，如果有就将其删除。</li><li>画一个思路分析图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103242.png" alt="image-20210223111934958"></p><h4 id="17-13-2-代码-usr-sbin-mysql-db-backup-sh"><a href="#17-13-2-代码-usr-sbin-mysql-db-backup-sh" class="headerlink" title="17.13.2 代码/usr/sbin/mysql_db.backup.sh"></a>17.13.2 代码/usr/sbin/mysql_db.backup.sh</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#备份目录</span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line">#当前时间</span><br><span class="line">DATETIME=$(date +%Y-%m-%d_%H%M%S)</span><br><span class="line">echo $DATETIME</span><br><span class="line">#数据库的地址</span><br><span class="line">HOST=localhost</span><br><span class="line">#数据库用户名</span><br><span class="line">DB_USER=root</span><br><span class="line">#数据库密码</span><br><span class="line">DB_PW=hspedu100</span><br><span class="line">#备份的数据库名</span><br><span class="line">DATABASE=hspedu</span><br><span class="line">#创建备份目录, 如果不存在，就创建</span><br><span class="line">[ ! -d "${BACKUP}/${DATETIME}" ] &amp;&amp; mkdir -p "${BACKUP}/${DATETIME}"</span><br><span class="line">#备份数据库</span><br><span class="line">mysqldump -u${DB_USER} -p${DB_PW} --host=${HOST} -q -R --databases ${DATABASE} | gzip &gt;</span><br><span class="line">${BACKUP}/${DATETIME}/$DATETIME.sql.gz</span><br><span class="line">#将文件处理成tar.gz</span><br><span class="line">cd ${BACKUP}</span><br><span class="line">tar -zcvf $DATETIME.tar.gz ${DATETIME}</span><br><span class="line">#删除对应的备份目录</span><br><span class="line">rm -rf ${BACKUP}/${DATETIME}</span><br><span class="line">#删除10 天前的备份文件</span><br><span class="line">find ${BACKUP} -atime +10 -name "*.tar.gz" -exec rm -rf {} \;</span><br><span class="line">echo "备份数据库${DATABASE} 成功~"</span><br></pre></td></tr></tbody></table></figure><h2 id="p106-备份数据库"><a href="#p106-备份数据库" class="headerlink" title="p106 备份数据库"></a>p106 备份数据库</h2><h2 id="p107-小结"><a href="#p107-小结" class="headerlink" title="p107 小结"></a>p107 小结</h2><h2 id="p108-Ubuntu安装"><a href="#p108-Ubuntu安装" class="headerlink" title="p108 Ubuntu安装"></a>p108 Ubuntu安装</h2><h2 id="p109-中文包"><a href="#p109-中文包" class="headerlink" title="p109 中文包"></a>p109 中文包</h2><h2 id="p110-ubuntu的root"><a href="#p110-ubuntu的root" class="headerlink" title="p110 ubuntu的root"></a>p110 ubuntu的root</h2><h4 id="18-4-1-介绍"><a href="#18-4-1-介绍" class="headerlink" title="18.4.1 介绍"></a>18.4.1 介绍</h4><p>安装ubuntu 成功后，都是普通用户权限，并没有最高root 权限，如果需要使用root 权限的时候，通常都会在命令<br>前面加上sudo 。有的时候感觉很麻烦。(演示)<br>我们一般使用su 命令来直接切换到root 用户的，但是如果没有给root 设置初始密码，就会抛出su : Authentication<br>failure 这样的问题。所以，我们只要给root 用户设置一个初始密码就好了。</p><h4 id="18-4-2-给root-用户设置密码并使用"><a href="#18-4-2-给root-用户设置密码并使用" class="headerlink" title="18.4.2 给root 用户设置密码并使用"></a>18.4.2 给root 用户设置密码并使用</h4><ol><li>输入sudo passwd 命令，设定root 用户密码。</li><li>设定root 密码成功后，输入su 命令，并输入刚才设定的root 密码，就可以切换成root 了。提示符$代表一般用户，<br>提示符#代表root 用户。</li><li>以后就可以使用root 用户了</li><li>输入exit 命令，退出root 并返回一般用户</li></ol><h2 id="p111-Ubuntu-下开发Python"><a href="#p111-Ubuntu-下开发Python" class="headerlink" title="p111 Ubuntu 下开发Python"></a>p111 Ubuntu 下开发Python</h2><h4 id="18-5-1-说明"><a href="#18-5-1-说明" class="headerlink" title="18.5.1 说明"></a>18.5.1 说明</h4><p>安装好Ubuntu 后，默认就已经安装好Python 的开发环境。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103246.png" alt="image-20210224163302346"></p><h4 id="18-5-2-在Ubuntu-下开发一个Python-程序"><a href="#18-5-2-在Ubuntu-下开发一个Python-程序" class="headerlink" title="18.5.2 在Ubuntu 下开发一个Python 程序"></a>18.5.2 在Ubuntu 下开发一个Python 程序</h4><p>vi hello.py [编写hello.py]<br>python3 hello.py [运行hello.py]</p><h2 id="p112-APT-软件管理和远程登录"><a href="#p112-APT-软件管理和远程登录" class="headerlink" title="p112 APT 软件管理和远程登录"></a>p112 APT 软件管理和远程登录</h2><h3 id="19-1-apt-介绍"><a href="#19-1-apt-介绍" class="headerlink" title="19.1 apt 介绍"></a>19.1 apt 介绍</h3><p>apt 是Advanced Packaging Tool 的简称，是一款安装包管理工具。在Ubuntu 下，我们可以使用apt 命令进行软件包<br>的安装、删除、清理等，类似于Windows 中的软件管理工具。<br>unbuntu 软件管理的原理示意图：</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103249.png" alt="image-20210224164240421"></p><h3 id="19-2-Ubuntu-软件操作的相关命令"><a href="#19-2-Ubuntu-软件操作的相关命令" class="headerlink" title="19.2 Ubuntu 软件操作的相关命令"></a>19.2 Ubuntu 软件操作的相关命令</h3><p>sudo apt-get update 更新源</p><p>sudo apt-get install package 安装包</p><p>sudo apt-get remove package 删除包</p><p>sudo apt-cache search package 搜索软件包</p><p>sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等</p><p>sudo apt-get install package –reinstall 重新安装包</p><p>sudo apt-get -f install 修复安装</p><p>sudo apt-get remove package –purge 删除包，包括配置文件等</p><p>sudo apt-get build-dep package 安装相关的编译环境</p><p>sudo apt-get upgrade 更新已安装的包</p><p>sudo apt-get dist-upgrade 升级系统</p><p>sudo apt-cache depends package 了解使用该包依赖那些包</p><p>sudo apt-cache rdepends package 查看该包被哪些包依赖</p><p>sudo apt-get source package</p><p>更新Ubuntu 软件下载地址</p><h4 id="19-3-1-原理介绍"><a href="#19-3-1-原理介绍" class="headerlink" title="19.3.1 原理介绍"></a>19.3.1 原理介绍</h4><p>(画出示意图)</p><h4 id="19-3-2-寻找国内镜像源"><a href="#19-3-2-寻找国内镜像源" class="headerlink" title="19.3.2 寻找国内镜像源"></a>19.3.2 寻找国内镜像源</h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a><br>所谓的镜像源：可以理解为提供下载软件的地方，比如Android 手机上可以下载软件的安卓市场；iOS 手机上可<br>以下载软件的AppStore</p><h4 id="19-3-3-寻找国内镜像源"><a href="#19-3-3-寻找国内镜像源" class="headerlink" title="19.3.3 寻找国内镜像源"></a>19.3.3 寻找国内镜像源</h4><h4 id="19-3-4-备份Ubuntu-默认的源地址"><a href="#19-3-4-备份Ubuntu-默认的源地址" class="headerlink" title="19.3.4 备份Ubuntu 默认的源地址"></a>19.3.4 备份Ubuntu 默认的源地址</h4><p>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103252.png" alt="image-20210225120327120"></p><h4 id="19-3-5-更新源服务器列表"><a href="#19-3-5-更新源服务器列表" class="headerlink" title="19.3.5 更新源服务器列表"></a>19.3.5 更新源服务器列表</h4><p>先清空sources.list 文件复制镜像网站的地址</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103257.png" alt="image-20210225120351316"></p><p>复制镜像网站的地址， 拷贝到sources.list 文件</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103301.png" alt="image-20210225120405564"></p><h2 id="p113-更新源和实例"><a href="#p113-更新源和实例" class="headerlink" title="p113 更新源和实例"></a>p113 更新源和实例</h2><h4 id="19-3-6-更新源"><a href="#19-3-6-更新源" class="headerlink" title="19.3.6 更新源"></a>19.3.6 更新源</h4><p>更新源地址：sudo apt-get update</p><h3 id="19-4-Ubuntu-软件安装，卸载的最佳实践"><a href="#19-4-Ubuntu-软件安装，卸载的最佳实践" class="headerlink" title="19.4 Ubuntu 软件安装，卸载的最佳实践"></a>19.4 Ubuntu 软件安装，卸载的最佳实践</h3><p>案例说明：使用apt 完成安装和卸载vim 软件，并查询vim 软件的信息：（因为使用了镜像网站， 速度很快）<br>sudo apt-get remove vim //删除<br>sudo apt-get install vim //安装<br>sudo apt-cache show vim //获取软件信息</p><h2 id="p114-ubuntu远程登录和集群"><a href="#p114-ubuntu远程登录和集群" class="headerlink" title="p114 ubuntu远程登录和集群"></a>p114 ubuntu远程登录和集群</h2><h4 id="19-5-1-ssh-介绍"><a href="#19-5-1-ssh-介绍" class="headerlink" title="19.5.1 ssh 介绍"></a>19.5.1 ssh 介绍</h4><p>SSH 为Secure Shell 的缩写，由IETF 的网络工作小组（Network Working Group）所制<br>定；SSH 为建立在应用层和传输层基础上的安全协议。</p><p>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录。几乎所有UNIX/LInux<br>平台都可运行SSH。<br>使用SSH 服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果，A 机器想被B 机器远程控制，<br>那么，A 机器需要安装SSH 服务器，B 机器需要安装SSH 客户端。<br>和CentOS 不一样，Ubuntu 默认没有安装SSHD 服务(使用netstat 指令查看: apt install net-tools)，因此，我们不能进行远程登录。</p><h4 id="19-5-2-原理示意图"><a href="#19-5-2-原理示意图" class="headerlink" title="19.5.2 原理示意图"></a>19.5.2 原理示意图</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103305.png" alt="image-20210225135132153"></p><h4 id="19-5-3-安装SSH-和启用"><a href="#19-5-3-安装SSH-和启用" class="headerlink" title="19.5.3 安装SSH 和启用"></a>19.5.3 安装SSH 和启用</h4><p>sudo apt-get install openssh-server<br>执行上面指令后，在当前这台Linux 上就安装了SSH 服务端和客户端。<br>service sshd restart<br>执行上面的指令，就启动了sshd 服务。会监听端口22</p><h4 id="19-5-4-在Windows-使用XShell6-XFTP6-登录Ubuntu"><a href="#19-5-4-在Windows-使用XShell6-XFTP6-登录Ubuntu" class="headerlink" title="19.5.4 在Windows 使用XShell6/XFTP6 登录Ubuntu"></a>19.5.4 在Windows 使用XShell6/XFTP6 登录Ubuntu</h4><p>前面我们已经安装了XShell6，直接使用即可。<br>注意：使用hspEdu 用户登录，需要的时候再su - 切换成root 用户</p><h4 id="19-5-5-从一台linux-系统远程登陆另外一台linux-系统"><a href="#19-5-5-从一台linux-系统远程登陆另外一台linux-系统" class="headerlink" title="19.5.5 从一台linux 系统远程登陆另外一台linux 系统"></a>19.5.5 从一台linux 系统远程登陆另外一台linux 系统</h4><p>在创建服务器集群时，会使用到该技术</p><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><p>ssh 用户名@IP<br>例如：ssh <a href="mailto:hspedu@192.168.200.130">hspedu@192.168.200.130</a><br>使用ssh 访问，如访问出现错误。可查看是否有该文件～/.ssh/known_ssh 尝试删除该文件解决，一般不会有问题</p><h5 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h5><p>登出命令：exit 或者logout</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103308.png" alt="image-20210225135212566"></p><h2 id="p115-小结"><a href="#p115-小结" class="headerlink" title="p115 小结"></a>p115 小结</h2><h2 id="p116-CentOS8-1-8-2的使用"><a href="#p116-CentOS8-1-8-2的使用" class="headerlink" title="p116 CentOS8.1/8.2的使用"></a>p116 CentOS8.1/8.2的使用</h2><h3 id="安装Centos8-1-8-2"><a href="#安装Centos8-1-8-2" class="headerlink" title="安装Centos8.1/8.2"></a>安装Centos8.1/8.2</h3><h4 id="20-1-1-Centos-下载地址"><a href="#20-1-1-Centos-下载地址" class="headerlink" title="20.1.1 Centos 下载地址"></a>20.1.1 Centos 下载地址</h4><p>CentOS-8.1.1911-x86_64-dvd1.iso CentOS 8.1/8.2 DVD 版8G (未来的主流.)<br><a href="https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/">https://mirrors.aliyun.com/centos/8.1.1911/isos/x86_64/</a></p><h2 id="p117-日志管理"><a href="#p117-日志管理" class="headerlink" title="p117 日志管理"></a>p117 日志管理</h2><h3 id="21-1-基本介绍"><a href="#21-1-基本介绍" class="headerlink" title="21.1 基本介绍"></a>21.1 基本介绍</h3><ol><li>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统<br>的安全信息、邮件相关信息、各种服务相关信息等。</li><li>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击<br>时攻击者留下的痕迹。</li><li>可以这样理解日志是用来记录重大事件的工具</li></ol><h3 id="21-2-系统常用的日志"><a href="#21-2-系统常用的日志" class="headerlink" title="21.2 系统常用的日志"></a>21.2 系统常用的日志</h3><p> /var/log/ 目录就是系统日志文件的保存位置，看张图<br><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103311.png" alt="image-20210225154356225"></p><p>系统常用的日志</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103314.png" alt="image-20210225154408482"></p><h5 id="应用案例-2"><a href="#应用案例-2" class="headerlink" title="应用案例"></a>应用案例</h5><p>使用root 用户通过xshell6 登陆, 第一次使用错误的密码，第二次使用正确的密码登录成功<br>看看在日志文件/var/log/secure 里有没有记录相关信息</p><h2 id="p118-日志管理服务rsyslogd"><a href="#p118-日志管理服务rsyslogd" class="headerlink" title="p118 日志管理服务rsyslogd"></a>p118 日志管理服务rsyslogd</h2><h4 id="21-3-日志管理服务rsyslogd"><a href="#21-3-日志管理服务rsyslogd" class="headerlink" title="21.3 日志管理服务rsyslogd"></a>21.3 日志管理服务rsyslogd</h4><p>CentOS7.6 日志服务是rsyslogd ， CentOS6.x 日志服务是syslogd 。rsyslogd 功能更强大。rsyslogd 的使用、日志<br>文件的格式，和syslogd 服务兼容的。原理示意图</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103318.png" alt="image-20210225164253173"></p><h2 id="p119-日志服务配置文件"><a href="#p119-日志服务配置文件" class="headerlink" title="p119 日志服务配置文件"></a>p119 日志服务配置文件</h2><p>查询Linux 中的rsyslogd 服务是否启动<br>ps aux | grep “rsyslog” | grep -v “grep”</p><p>-v 表示反向匹配 表示查询不包含grep的服务</p><p>查询rsyslogd 服务的自启动状态<br>systemctl list-unit-files | grep rsyslog<br> 配置文件：/etc/rsyslog.conf<br>编辑文件时的格式为： <em>.</em> 存放日志文件<br>其中第一个<em>代表日志类型，第二个</em>代表日志级别</p><ol><li>日志类型分为：<br>auth ##pam 产生的日志</li></ol><p>authpriv ##ssh、ftp 等登录信息的验证信息<br>corn ##时间任务相关<br>kern ##内核<br>lpr ##打印<br>mail ##邮件<br>mark(syslog)-rsyslog##服务内部的信息，时间标识<br>news ##新闻组<br>user ##用户程序产生的相关信息<br>uucp ##unix to nuix copy 主机之间相关的通信<br>local 1-7 ##自定义的日志设备<br>2) 日志级别分为：<br>debug ##有调试信息的，日志通信最多<br>info ##一般信息日志，最常用<br>notice ##最具有重要性的普通条件的信息<br>warning ##警告级别<br>err ##错误级别，阻止某个功能或者模块不能正常工作的信息<br>crit ##严重级别，阻止整个系统或者整个软件不能正常工作的信息<br>alert ##需要立刻修改的信息<br>emerg ##内核崩溃等重要信息<br>none ##什么都不记录<br>注意：从上到下，级别从低到高，记录信息越来越少<br> 由日志服务rsyslogd 记录的日志文件，日志文件的格式包含以下4 列：</p><ol><li>事件产生的时间</li><li>产生事件的服务器的主机名</li><li>产生事件的服务名或程序名</li><li>事件的具体信息</li></ol><p>日志如何查看实例<br>查看一下/var/log/secure 日志，这个日志中记录的是用户验证和授权方面的信息来分析如何查看</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103321.png" alt="image-20210225164345348"></p><h2 id="p120-自定义日志服务"><a href="#p120-自定义日志服务" class="headerlink" title="p120 自定义日志服务"></a>p120 自定义日志服务</h2><p>日志管理服务应用实例<br>在/etc/rsyslog.conf 中添加一个日志文件/var/log/hsp.log,当有事件发送时(比如sshd 服务相关事件)，该文件会接收到<br>信息并保存. 给小伙伴演示重启，登录的情况，看看是否有日志保存</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103324.png" alt="image-20210225164353977"></p><h2 id="p121-日志轮替"><a href="#p121-日志轮替" class="headerlink" title="p121 日志轮替"></a>p121 日志轮替</h2><h3 id="21-4-1-基本介绍"><a href="#21-4-1-基本介绍" class="headerlink" title="21.4.1 基本介绍"></a>21.4.1 基本介绍</h3><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进<br>行删除</p><h3 id="21-4-2-日志轮替文件命名"><a href="#21-4-2-日志轮替文件命名" class="headerlink" title="21.4.2 日志轮替文件命名"></a>21.4.2 日志轮替文件命名</h3><ol><li><p>centos7 使用logrotate 进行日志轮替管理，要想改变日志轮替文件名字，通过/etc/logrotate.conf 配置文件中“dateext”<br>参数：</p></li><li><p>如果配置文件中有“dateext”参数，那么日志会用日期来作为日志文件的后缀，例如“secure-20201010”。这样日<br>志文件名不会重叠，也就不需要日志文件的改名， 只需要指定保存日志个数，删除多余的日志文件即可。</p></li><li><p>如果配置文件中没有“dateext”参数，日志文件就需要进行改名了。当第一次进行日志轮替时，当前的“secure”日<br>志会自动改名为“secure.1”，然后新建“secure”日志， 用来保存新的日志。当第二次进行日志轮替时，“secure.1”<br>会自动改名为“secure.2”， 当前的“secure”日志会自动改名为“secure.1”，然后也会新建“secure”日志，用来<br>保存新的日志，以此类推。</p></li></ol><h3 id="21-4-3-logrotate-配置文件"><a href="#21-4-3-logrotate-配置文件" class="headerlink" title="21.4.3 logrotate 配置文件"></a>21.4.3 logrotate 配置文件</h3><p>/etc/logrotate.conf 为logrotate 的全局配置文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># rotate log files weekly, 每周对日志文件进行一次轮替</span><br><span class="line"></span><br><span class="line">weekly</span><br><span class="line"></span><br><span class="line"># keep 4 weeks worth of backlogs, 共保存4 份日志文件，当建立新的日志文件时，旧的将会被删除</span><br><span class="line"></span><br><span class="line">rotate 4</span><br><span class="line"></span><br><span class="line"># create new (empty) log files after rotating old ones, 创建新的空的日志文件，在日志轮替后</span><br><span class="line"></span><br><span class="line">create</span><br><span class="line"></span><br><span class="line"># use date as a suffix of the rotated file, 使用日期作为日志轮替文件的后缀</span><br><span class="line"></span><br><span class="line">dateext</span><br><span class="line"></span><br><span class="line"># uncomment this if you want your log files compressed, 日志文件是否压缩。如果取消注释，则日志会在转储的同时进</span><br><span class="line"></span><br><span class="line">行压缩</span><br><span class="line">#compress</span><br><span class="line">#RPM packages drop log rotation information into this directory</span><br><span class="line">include /etc/logrotate.d</span><br><span class="line"></span><br><span class="line"># 包含/etc/logrotate.d/ 目录中所有的子配置文件。也就是说会把这个目录中所有子配置文件读取进来，</span><br><span class="line"></span><br><span class="line">#下面是单独设置，优先级更高。</span><br><span class="line"></span><br><span class="line"># no packages own wtmp and btmp -- we'll rotate them here</span><br><span class="line"></span><br><span class="line">/var/log/wtmp {</span><br><span class="line">monthly # 每月对日志文件进行一次轮替</span><br><span class="line"></span><br><span class="line">create 0664 root utmp # 建立的新日志文件，权限是0664 ，所有者是root ，所属组是utmp 组</span><br><span class="line">minsize 1M # 日志文件最小轮替大小是1MB 。也就是日志一定要超过1MB 才会轮替，否则就算时间达到</span><br><span class="line">一个月，也不进行日志转储</span><br><span class="line">rotate 1 # 仅保留一个日志备份。也就是只有wtmp 和wtmp.1 日志保留而已</span><br><span class="line">}</span><br><span class="line">/var/log/btmp {</span><br><span class="line">missingok # 如果日志不存在，则忽略该日志的警告信息</span><br><span class="line">monthly</span><br><span class="line">create 0600 root utmp</span><br><span class="line">rotate 1</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="p122-自定义日志轮替"><a href="#p122-自定义日志轮替" class="headerlink" title="p122 自定义日志轮替"></a>p122 自定义日志轮替</h2><h4 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">参数参数说明</span><br><span class="line">daily 日志的轮替周期是每天</span><br><span class="line">weekly 日志的轮替周期是每周</span><br><span class="line">monthly 日志的轮替周期是每月</span><br><span class="line">rotate 数字保留的日志文件的个数。0 指没有备份</span><br><span class="line">compress 日志轮替时，旧的日志进行压缩</span><br><span class="line">create mode owner group 建立新日志，同时指定新日志的权限与所有者和所属组。</span><br><span class="line">mail address 当日志轮替时，输出内容通过邮件发送到指定的邮件地址。</span><br><span class="line">missingok 如果日志不存在，则忽略该日志的警告信息</span><br><span class="line">notifempty 如果日志为空文件，则不进行日志轮替</span><br><span class="line">minsize 大小日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替，否则就算时间达到也</span><br><span class="line">不轮替</span><br><span class="line">size 大小日志只有大于指定大小才进行日志轮替，而不是按照时间轮替。</span><br><span class="line">dateext 使用日期作为日志轮替文件的后缀。</span><br><span class="line">sharedscripts 在此关键字之后的脚本只执行一次。</span><br><span class="line">prerotate/endscript 在日志轮替之前执行脚本命令。</span><br><span class="line">postrotate/endscript 在日志轮替之后执行脚本命令。</span><br></pre></td></tr></tbody></table></figure><h3 id="21-4-4-把自己的日志加入日志轮替"><a href="#21-4-4-把自己的日志加入日志轮替" class="headerlink" title="21.4.4 把自己的日志加入日志轮替"></a>21.4.4 把自己的日志加入日志轮替</h3><ol><li>第一种方法是直接在/etc/logrotate.conf 配置文件中写入该日志的轮替策略</li><li>第二种方法是在/etc/logrotate.d/目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录<br>中的文件都会被“include”到主配置文件中，所以也可以把日志加入轮替。</li><li>推荐使用第二种方法，因为系统中需要轮替的日志非常多，如果全都直接写入/etc/logrotate.conf 配置文件，那么这<br>个文件的可管理性就会非常差，不利于此文件的维护。</li><li>在/etc/logrotate.d/ 配置轮替文件一览</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103328.png" alt="image-20210226134642042"></p><h3 id="21-4-5-应用实例"><a href="#21-4-5-应用实例" class="headerlink" title="21.4.5 应用实例"></a>21.4.5 应用实例</h3><p>看一个案例, 在/etc/logrotate.conf 进行配置, 或者直接在/etc/logrotate.d/ 下创建文件hsplog 编写如下内容, 具体<br>轮替的效果可以参考/var/log 下的boot.log 情况.</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103331.png" alt="image-20210226134658670"></p><h2 id="p123-日志轮替机制原理"><a href="#p123-日志轮替机制原理" class="headerlink" title="p123 日志轮替机制原理"></a>p123 日志轮替机制原理</h2><h3 id="21-5-日志轮替机制原理"><a href="#21-5-日志轮替机制原理" class="headerlink" title="21.5 日志轮替机制原理"></a>21.5 日志轮替机制原理</h3><p>日志轮替之所以可以在指定的时间备份日志，是依赖系统定时任务。在/etc/cron.daily/目录，就会发现这个目录中是有logrotate 文件(可执行)，logrotate 通过这个文件依赖定时任务执行的。</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103334.png" alt="image-20210301104806772"></p><h2 id="p124-查看内存日志"><a href="#p124-查看内存日志" class="headerlink" title="p124 查看内存日志"></a>p124 查看内存日志</h2><p>journalctl 可以查看内存日志, 这里我们看看常用的指令<br>journalctl ##查看全部<br>journalctl -n 3 ##查看最新3 条<br>journalctl –since 19:00 –until 19:10:10 #查看起始时间到结束时间的日志可加日期<br>journalctl -p err ##报错日志<br>journalctl -o verbose ##日志详细内容<br>journalctl _PID=1245 _COMM=sshd ##查看包含这些参数的日志（在详细日志查看）<br>或者journalctl | grep sshd</p><p>注意: journalctl 查看的是内存日志, 重启清空<br>演示案例:<br>使用journalctl | grep sshd 来看看用户登录清空, 重启系统，再次查询，看看日志有什么变化没有</p><h2 id="p125-小结"><a href="#p125-小结" class="headerlink" title="p125 小结"></a>p125 小结</h2><h2 id="p126-定制自己的linux系统"><a href="#p126-定制自己的linux系统" class="headerlink" title="p126 定制自己的linux系统"></a>p126 定制自己的linux系统</h2><h3 id="22-1-基本介绍"><a href="#22-1-基本介绍" class="headerlink" title="22.1 基本介绍"></a>22.1 基本介绍</h3><p>通过裁剪现有Linux 系统(CentOS7.6)，创建属于自己的min Linux 小系统，可以加深我们对linux 的理解。<br>老韩利用centos7.6，搭建一个小小linux 系统, 很有趣。</p><h3 id="22-2-基本原理"><a href="#22-2-基本原理" class="headerlink" title="22.2 基本原理"></a>22.2 基本原理</h3><p>启动流程介绍：<br>制作Linux 小系统之前，再了解一下Linux 的启动流程：<br>1、首先Linux 要通过自检，检查硬件设备有没有故障<br>2、如果有多块启动盘的话，需要在BIOS 中选择启动磁盘<br>3、启动MBR 中的bootloader 引导程序<br>4、加载内核文件<br>5、执行所有进程的父进程、老祖宗systemd<br>6、欢迎界面<br>在Linux 的启动流程中，加载内核文件时关键文件：<br>1）kernel 文件: vmlinuz-3.10.0-957.el7.x86_64<br>2）initrd 文件: initramfs-3.10.0-957.el7.x86_64.img</p><h3 id="22-3-制作min-linux-思路分析"><a href="#22-3-制作min-linux-思路分析" class="headerlink" title="22.3 制作min linux 思路分析"></a>22.3 制作min linux 思路分析</h3><ol><li>在现有的Linux 系统(centos7.6)上加一块硬盘/dev/sdb，在硬盘上分两个分区，一个是/boot，一个是/，并将其格式化。<br>需要明确的是，现在加的这个硬盘在现有的Linux 系统中是/dev/sdb，但是，当我们把东西全部设置好时，要把这个<br>硬盘拔除，放在新系统上，此时，就是/dev/sda</li><li>在/dev/sdb 硬盘上，将其打造成独立的Linux 系统，里面的所有文件是需要拷贝进去的</li><li>作为能独立运行的Linux 系统，内核是一定不能少，要把内核文件和initramfs 文件也一起拷到/dev/sdb 上</li><li>以上步骤完成，我们的自制Linux 就完成, 创建一个新的linux 虚拟机，将其硬盘指向我们创建的硬盘，启动即可</li><li>示意图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103337.png" alt="image-20210301134859946"></p><h3 id="制作自己的min-linux-基于CentOS7-6"><a href="#制作自己的min-linux-基于CentOS7-6" class="headerlink" title="制作自己的min linux(基于CentOS7.6)"></a><strong>制作自己的min linux(基于CentOS7.6)</strong></h3><ol><li>首先，我们在现有的linux添加一块大小为20G的硬盘</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103355.png" alt="image-20210301145006791"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103400.png" alt="image-20210301145016514"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103408.png" alt="image-20210301145022970"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103412.png" alt="image-20210301145029299"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103416.png" alt="image-20210301145034675"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103420.png" alt="image-20210301145040827"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103422.png" alt="image-20210301145045883"></p><p>点击完成，就OK了， 可以使用 lsblk 查看，需要重启</p><ol start="2"><li>添加完成后，点击确定，然后启动现有的linux(centos7.6)。 通过fdisk来给我们的/dev/sdb进行分区</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> 1 [root@localhost ~]# fdisk /dev/sdb</span><br><span class="line"> 2 Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line"> 3 Building a new DOS disklabel with disk identifier 0x4fde4cd0.</span><br><span class="line"> 4 Changes will remain in memory only, until you decide to write them.</span><br><span class="line"> 5 After that, of course, the previous content won't be recoverable.</span><br><span class="line"> 6 </span><br><span class="line"> 7  </span><br><span class="line"> 8 Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span><br><span class="line"> 9 </span><br><span class="line">10  </span><br><span class="line">11 WARNING: DOS-compatible mode is deprecated. It's strongly recommended to</span><br><span class="line">12 switch off the mode (command 'c') and change display units to</span><br><span class="line">13 sectors (command 'u').</span><br><span class="line">14 </span><br><span class="line">15 </span><br><span class="line">16 Command (m for help): n</span><br><span class="line">17 Command action</span><br><span class="line">18 e extended</span><br><span class="line">19 p primary partition (1-4)</span><br><span class="line">20 p</span><br><span class="line">21 Partition number (1-4): 1</span><br><span class="line">22 First cylinder (1-2610, default 1):</span><br><span class="line">23 Using default value 1</span><br><span class="line">24 Last cylinder, +cylinders or +size{K,M,G} (1-2610, default 2610): +500M</span><br><span class="line">25 </span><br><span class="line">26 </span><br><span class="line">27 Command (m for help): n</span><br><span class="line">28 Command action</span><br><span class="line">29 e extended</span><br><span class="line">30 p primary partition (1-4)</span><br><span class="line">31 p</span><br><span class="line">32 Partition number (1-4): 2</span><br><span class="line">33 First cylinder (15-2610, default 15):</span><br><span class="line">34 Using default value 15</span><br><span class="line">35 Last cylinder, +cylinders or +size{K,M,G} (15-2610, default 2610):</span><br><span class="line">36 Using default value 2610</span><br><span class="line">37 #查看分区</span><br><span class="line">38 Command (m for help): p</span><br><span class="line">39 </span><br><span class="line">40  </span><br><span class="line">41 Disk /dev/sdb: 21.5 GB, 21474836480 bytes</span><br><span class="line">42 255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">43 Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">44 Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">45 I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">46 Disk identifier: 0x4fde4cd0</span><br><span class="line">47 </span><br><span class="line">48  </span><br><span class="line">49 Device Boot Start End Blocks Id System</span><br><span class="line">50 /dev/sdb1 1 14 112423+ 83 Linux</span><br><span class="line">51 /dev/sdb2 15 2610 20852370 83 Linux</span><br><span class="line">52 #保存并退出</span><br><span class="line">53 Command (m for help): w</span><br><span class="line">54 The partition table has been altered!</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>接下来，我们对/dev/sdb的分区进行格式化</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkfs.ext4 /dev/sdb1</span><br><span class="line">[root@localhost ~]# mkfs.ext4 /dev/sdb2 </span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>创建目录，并挂载新的磁盘</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#mkdir -p /mnt/boot /mnt/sysroot </span><br><span class="line">#mount /dev/sdb1 /mnt/boot </span><br><span class="line">#mount /dev/sdb2 /mnt/sysroot/</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>安装grub, 内核文件拷贝至目标磁盘</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#grub2-install --root-directory=/mnt /dev/sdb</span><br><span class="line">#我们可以来看一下二进制确认我们是否安装成功</span><br><span class="line">#hexdump -C -n 512 /dev/sdb    </span><br><span class="line">#cp -rf /boot/*  /mnt/boot/</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>修改 grub2/grub.cfg 文件, 标红的部分 是需要使用 指令来查看的</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103426.png" alt="image-20210301145323167"></p><p>在grub.cfg文件中 , 红色部分用 上面 sdb1 的 UUID替换，蓝色部分用 sdb2的UUID来替换, 紫色部分是添加的，表示</p><p>selinux给关掉，同时设定一下init，告诉内核不要再去找这个程序了，不然开机的时候会出现错误的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">### BEGIN /etc/grub.d/10_linux ###</span><br><span class="line">menuentry 'CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-3.10.0-957.el7.x86_64-advanced-2eef594e-68fc-49a0-8b23-07cf87dda424' {</span><br><span class="line">load_video</span><br><span class="line">set gfxpayload=keep</span><br><span class="line">insmod gzio</span><br><span class="line">insmod part_msdos</span><br><span class="line">insmod ext2</span><br><span class="line">set root='hd0,msdos1'</span><br><span class="line">if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1</span><br><span class="line">--hint='hd0,msdos1'  6ba72e9a-19ec-4552-ae54-e35e735142d4</span><br><span class="line">else</span><br><span class="line">  search --no-floppy --fs-uuid --set=root 6ba72e9a-19ec-4552-ae54-e35e735142d4</span><br><span class="line">fi</span><br><span class="line">linux16 /vmlinuz-3.10.0-957.el7.x86_64 root=UUID=d2e0ce0f-e209-472a-a4f1-4085f777d9bb ro crashkernel=auto rhgb quiet LANG=zh_CN.UTF-8  selinux=0 init=/bin/bash</span><br><span class="line">initrd16 /initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">}</span><br><span class="line">menuentry 'CentOS Linux (0-rescue-5bd4fb8d8e9d4198983fc1344f652b5d) 7 (Core)' --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option 'gnulinux-0-rescue-5bd4fb8d8e9d4198983fc1344f652b5d-advanced-2eef594e-68fc-49a0-8b23-07cf87dda424' {</span><br><span class="line">load_video</span><br><span class="line">insmod gzio</span><br><span class="line">insmod part_msdos</span><br><span class="line">insmod ext2</span><br><span class="line">set root='hd0,msdos1'</span><br><span class="line">if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint='hd0,msdos1'  6ba72e9a-19ec-4552-ae54-e35e735142d4</span><br><span class="line">else</span><br><span class="line">  search --no-floppy --fs-uuid --set=root 6ba72e9a-19ec-4552-ae54-e35e735142d4</span><br><span class="line">fi</span><br><span class="line">linux16 /vmlinuz-0-rescue-5bd4fb8d8e9d4198983fc1344f652b5d root=UUID=d2e0ce0f-e209-472a-a4f1-4085f777d9bb ro crashkernel=auto rhgb quiet selinux=0 init=/bin/bash</span><br><span class="line">initrd16 /initramfs-0-rescue-5bd4fb8d8e9d4198983fc1344f652b5d.img</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">### END /etc/grub.d/10_linux ###</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>创建目标主机根文件系统</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mkdir -pv /mnt/sysroot/{etc/rc.d,usr,var,proc,sys,dev,lib,lib64,bin,sbin,boot,srv,mnt,media,home,root}  </span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>拷贝需要的bash(也可以拷贝你需要的指令)和库文件给新的系统使用</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#cp /lib64/*.* /mnt/sysroot/lib64/ </span><br><span class="line">#cp /bin/bash /mnt/sysroot/bin/ </span><br></pre></td></tr></tbody></table></figure><ol start="9"><li>现在我们就可以创建一个新的虚拟机，然后将默认分配的硬盘 移除掉，指向我们刚刚创建的磁盘即可.</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103429.png" alt="image-20210301145604557"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103432.png" alt="image-20210301145609028"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103435.png" alt="image-20210301145614315"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103438.png" alt="image-20210301145618467"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103441.png" alt="image-20210301145623533"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103443.png" alt="image-20210301145627627"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103446.png" alt="image-20210301145632539"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103449.png" alt="image-20210301145644662"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103451.png" alt="image-20210301145649091"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103454.png" alt="image-20210301145652835"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103457.png" alt="image-20210301145656635"></p><ol start="10"><li><p>这时，很多指令都不能使用，比如 ls , reboot 等，可以将需要的指令拷贝到对应的目录即可</p></li><li><p>如果要拷贝指令，<strong>重新进入到原来的</strong> <strong>linux****系统拷贝相应的指令即可</strong>，比较将 /bin/ls 拷贝到 /mnt/sysroot/bin 将/sbin/reboot 拷贝到 /mnt/sysroot/sbin </p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@hspedu100 ~]# mount /dev/sdb2 /mnt/sysroot/</span><br><span class="line">[root@hspedu100 ~]# cp /bin/ls /mnt/sysroot/bin/</span><br><span class="line">[root@hspedu100 ~]# cp /bin/systemctl  /mnt/sysroot/bin/</span><br><span class="line">[root@hspedu100 ~]# cp /sbin/reboot /mnt/sysroot/sbin/</span><br></pre></td></tr></tbody></table></figure><ol start="12"><li>   再重新启动新的min linux系统，就可以使用 ls , reboot 指令了</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103500.png" alt="image-20210301145751469"></p><h2 id="p127-定制自己的linux系统-2"><a href="#p127-定制自己的linux系统-2" class="headerlink" title="p127 定制自己的linux系统(2)"></a>p127 定制自己的linux系统(2)</h2><h2 id="p128-小结"><a href="#p128-小结" class="headerlink" title="p128 小结"></a>p128 小结</h2><h2 id="p129-Linux-内核源码介绍-amp-内核升级"><a href="#p129-Linux-内核源码介绍-amp-内核升级" class="headerlink" title="p129 Linux 内核源码介绍&amp;内核升级"></a>p129 Linux 内核源码介绍&amp;内核升级</h2><h3 id="23-1-为什么要阅读linux-内核"><a href="#23-1-为什么要阅读linux-内核" class="headerlink" title="23.1 为什么要阅读linux 内核?"></a>23.1 为什么要阅读linux 内核?</h3><ol><li>爱好，就是喜欢linux(黑客精神)</li><li>想深入理解linux 底层运行机制，对操作系统有深入理解</li><li>阅读Linux 内核，你会对整个计算机体系有一个更深刻的认识。作为开发者，不管你从事的是驱动开发，应用开发<br>还是后台开发，你都需要了解操作系统内核的运行机制，这样才能写出更好的代码。</li><li>作为开发人员不应该只局限在自己的领域，你设计的模块看起来小，但是你不了解进程的调用机制，你不知道进程<br>为什么会阻塞、就绪、执行几个状态。那么很难写出优质的代码。</li><li>找工作面试的需要<br><span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 老韩忠告，作为有追求的程序员，还是应该深入的了解一个操作系统的底层机制,(比如linux/unix) 最好是源码级别<br>的，这样你写多线程高并发程序，包括架构，优化，算法等，高度不一样的，当然老韩也不是要求小伙伴儿把一个<br>非常庞大的Linux 内核每一行都读懂。我觉得。你至少能看几个核心的模块。</li></ol><h3 id="23-2-linux0-01-内核源码"><a href="#23-2-linux0-01-内核源码" class="headerlink" title="23.2 linux0.01 内核源码"></a>23.2 linux0.01 内核源码</h3><p>23.2.1 基本介绍<br>Linux 的内核源代码可以从网上下载, 解压缩后文件一般也都位于linux 目录下。内核源代码有很多版本，可以从<br>linux0.01 内核入手，总共的代码1w 行左右， 最新版本5.9.8 总共代码超过700w 行，非常庞大.<br>内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p><p>很多人害怕读Linux 内核，Linux 内核这样大而复杂的系统代码，阅读起来确实有很多困难，但是也不象想象的那<br>么高不可攀。老韩建议可以从linux0.01 入手。</p><h2 id="p130-linux0-01-内核源码目录-amp-阅读"><a href="#p130-linux0-01-内核源码目录-amp-阅读" class="headerlink" title="p130 linux0.01 内核源码目录&amp;阅读"></a>p130 linux0.01 内核源码目录&amp;阅读</h2><h3 id="23-2-2-linux0-01-内核源码目录-amp-阅读"><a href="#23-2-2-linux0-01-内核源码目录-amp-阅读" class="headerlink" title="23.2.2 linux0.01 内核源码目录&amp;阅读"></a>23.2.2 linux0.01 内核源码目录&amp;阅读</h3><p>老韩提示阅读内核源码技巧</p><ol><li>linux0.01 的阅读需要懂c 语言</li><li>阅读源码前，应知道Linux 内核源码的整体分布情况。现代的操作系统一般由进程管理、内存管理、文件系统、驱<br>动程序和网络等组成。Linux 内核源码的各个目录大致与此相对应.</li><li>在阅读方法或顺序上，有纵向与横向之分。所谓纵向就是顺着程序的执行顺序逐步进行；所谓横向，就是按模块进<br>行。它们经常结合在一起进行。</li><li>对于Linux 启动的代码可顺着Linux 的启动顺序一步步来阅读；对于像内存管理部分，可以单独拿出来进行阅读分<br>析。实际上这是一个反复的过程，不可能读一遍就理解<br>linux 内核源码阅读&amp;目录介绍&amp;main.c 说明</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103503.png" alt="image-20210301174633732"></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103506.png" alt="image-20210301174643079"></p><h2 id="p131-linux-内核最新版和内核升级"><a href="#p131-linux-内核最新版和内核升级" class="headerlink" title="p131 linux 内核最新版和内核升级"></a>p131 linux 内核最新版和内核升级</h2><h4 id="23-3-1-内核地址：https-www-kernel-org-查看"><a href="#23-3-1-内核地址：https-www-kernel-org-查看" class="headerlink" title="23.3.1 内核地址：https://www.kernel.org/ 查看"></a>23.3.1 内核地址：<a href="https://www.kernel.org/">https://www.kernel.org/</a> 查看</h4><h4 id="23-3-2-下载-amp-解压最新版"><a href="#23-3-2-下载-amp-解压最新版" class="headerlink" title="23.3.2 下载&amp;解压最新版"></a>23.3.2 下载&amp;解压最新版</h4><p>wget <a href="https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.11.2.tar.gz">https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.11.2.tar.gz</a><br>tar -zxvf linux-5.8.16.tar.gz</p><h4 id="23-3-3-linux-内核升级应用实例"><a href="#23-3-3-linux-内核升级应用实例" class="headerlink" title="23.3.3 linux 内核升级应用实例"></a>23.3.3 linux 内核升级应用实例</h4><p>将Centos 系统从7.6 内核升级到7.8 版本内核(兼容性问题)</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103509.png" alt="image-20210301181655226"></p><h4 id="23-3-4-具体步骤，看老师演示"><a href="#23-3-4-具体步骤，看老师演示" class="headerlink" title="23.3.4 具体步骤，看老师演示"></a>23.3.4 具体步骤，看老师演示</h4><p>uname -a // 查看当前的内核版本<br>yum info kernel -q //检测内核版本，显示可以升级的内核<br>yum update kernel //升级内核<br>yum list kernel -q //查看已经安装的内核</p><h2 id="p132-linux-内核最新版和内核升级-2"><a href="#p132-linux-内核最新版和内核升级-2" class="headerlink" title="p132 linux 内核最新版和内核升级(2)"></a>p132 linux 内核最新版和内核升级(2)</h2><h2 id="p133-第24-章linux-系统-备份与恢复"><a href="#p133-第24-章linux-系统-备份与恢复" class="headerlink" title="p133 第24 章linux 系统-备份与恢复"></a>p133 第24 章linux 系统-备份与恢复</h2><h3 id="24-1-基本介绍"><a href="#24-1-基本介绍" class="headerlink" title="24.1 基本介绍"></a>24.1 基本介绍</h3><p>实体机无法做快照，如果系统出现异常或者数据损坏，后果严重， 要重做系统，还会造成数据丢失。所以我们可<br>以使用备份和恢复技术<br>linux 的备份和恢复很简单， 有两种方式：</p><ol><li>把需要的文件(或者分区)用TAR 打包就行，下次需要恢复的时候，再解压开覆盖即可</li><li>使用dump 和restore 命令</li><li>示意图</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103512.png" alt="image-20210302115649592"></p><h3 id="24-2-安装dump-和restore"><a href="#24-2-安装dump-和restore" class="headerlink" title="24.2 安装dump 和restore"></a>24.2 安装dump 和restore</h3><p>如果linux 上没有dump 和restore 指令，需要先按照<br>yum -y install dump<br>yum -y install restore</p><h3 id="24-3-使用dump-完成备份"><a href="#24-3-使用dump-完成备份" class="headerlink" title="24.3 使用dump 完成备份"></a>24.3 使用dump 完成备份</h3><h4 id="24-3-1-基本介绍"><a href="#24-3-1-基本介绍" class="headerlink" title="24.3.1 基本介绍"></a>24.3.1 基本介绍</h4><p>dump 支持分卷和增量备份（所谓增量备份是指备份上次备份后修改/增加过的文件，也称差异备份）。</p><h4 id="24-3-2-dump-语法说明"><a href="#24-3-2-dump-语法说明" class="headerlink" title="24.3.2 dump 语法说明"></a>24.3.2 dump 语法说明</h4><p>dump [ -cu] [-123456789] [ -f &lt;备份后文件名&gt;] [-T &lt;日期&gt;] [ 目录或文件系统]<br>dump []-wW<br>-c ： 创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头。<br>-0123456789： 备份的层级。0 为最完整备份，会备份所有文件。若指定0 以上的层级，则备份至上一次备份以来<br>修改或新增的文件, 到9 后，可以再次轮替.<br>-f &lt;备份后文件名&gt;： 指定备份后文件名<br>-j : 调用bzlib 库压缩备份文件，也就是将备份后的文件压缩成bz2 格式，让文件更小<br>-T &lt;日期&gt;： 指定开始备份的时间与日期<br>-u ： 备份完毕后，在/etc/dumpdares 中记录备份的文件系统，层级，日期与时间等。<br>-t ： 指定文件名，若该文件已存在备份文件中，则列出名称<br>-W ：显示需要备份的文件及其最后一次备份的层级，时间，日期。<br>-w ：与-W 类似，但仅显示需要备份的文件。</p><h4 id="24-3-3-dump-应用案例1"><a href="#24-3-3-dump-应用案例1" class="headerlink" title="24.3.3 dump 应用案例1"></a>24.3.3 dump 应用案例1</h4><p>将/boot 分区所有内容备份到/opt/boot.bak0.bz2 文件中，备份层级为“0”<br>􀀃dump -0uj -f /opt/boot.bak0.bz2 /boot</p><h4 id="24-3-4-dump-应用案例2"><a href="#24-3-4-dump-应用案例2" class="headerlink" title="24.3.4 dump 应用案例2"></a>24.3.4 dump 应用案例2</h4><p>在/boot 目录下增加新文件，备份层级为“1”(只备份上次使用层次“0”备份后发生过改变的数据), 注意比较看看<br>这次生成的备份文件boot1.bak 有多大<br>dump -1uj -f /opt/boot.bak1.bz2 /boot<br>老韩提醒: 通过dump 命令在配合crontab 可以实现无人值守备份</p><p>只有分区支持增量备份</p><h4 id="24-3-5-dump-W"><a href="#24-3-5-dump-W" class="headerlink" title="24.3.5 dump -W"></a>24.3.5 dump -W</h4><p>显示需要备份的文件及其最后一次备份的层级，时间，日期</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103515.png" alt="image-20210302115744713"></p><h4 id="24-3-6-查看备份时间文件"><a href="#24-3-6-查看备份时间文件" class="headerlink" title="24.3.6 查看备份时间文件"></a>24.3.6 查看备份时间文件</h4><p>cat /etc/dumpdates</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103518.png" alt="image-20210302115759588"></p><h4 id="24-3-7-dump-备份文件或者目录"><a href="#24-3-7-dump-备份文件或者目录" class="headerlink" title="24.3.7 dump 备份文件或者目录"></a>24.3.7 dump 备份文件或者目录</h4><p>前面我们在备份分区时，是可以支持增量备份的，如果备份文件或者目录，不再支持增量备份, 即只能使用0 级别<br>备份<br>案例， 使用dump 备份/etc 整个目录<br>dump -0j -f /opt/etc.bak.bz2 /etc/<br>#下面这条语句会报错，提示DUMP: Only level 0 dumps are allowed on a subdirectory<br>dump -1j -f /opt/etc.bak.bz2 /etc/</p><h4 id="24-3-8-老韩提醒"><a href="#24-3-8-老韩提醒" class="headerlink" title="24.3.8 老韩提醒"></a>24.3.8 老韩提醒</h4><p>如果是重要的备份文件， 比如数据区，建议将文件上传到其它服务器保存，不要将鸡蛋放在同一个篮子.</p><h2 id="p134-数据备份与恢复"><a href="#p134-数据备份与恢复" class="headerlink" title="p134 数据备份与恢复"></a>p134 数据备份与恢复</h2><h3 id="24-4-使用restore-完成恢复"><a href="#24-4-使用restore-完成恢复" class="headerlink" title="24.4 使用restore 完成恢复"></a>24.4 使用restore 完成恢复</h3><h4 id="24-4-1-基本介绍"><a href="#24-4-1-基本介绍" class="headerlink" title="24.4.1 基本介绍"></a>24.4.1 基本介绍</h4><p>restore 命令用来恢复已备份的文件，可以从dump 生成的备份文件中恢复原文件</p><h4 id="24-4-2-restore-基本语法"><a href="#24-4-2-restore-基本语法" class="headerlink" title="24.4.2 restore 基本语法"></a>24.4.2 restore 基本语法</h4><p>restore [模式选项] [选项]</p><p>说明下面四个模式， 不能混用，在一次命令中， 只能指定一种。<br>-C ：使用对比模式，将备份的文件与已存在的文件相互对比。<br>-i：使用交互模式，在进行还原操作时，restors 指令将依序询问用户<br>-r：进行还原模式<br>-t : 查看模式，看备份文件有哪些文件<br>选项<br>-f &lt;备份设备&gt;：从指定的文件中读取备份数据，进行还原操作</p><h4 id="24-4-3-应用案例1"><a href="#24-4-3-应用案例1" class="headerlink" title="24.4.3 应用案例1"></a>24.4.3 应用案例1</h4><p>restore 命令比较模式，比较备份文件和原文件的区别<br>测试<br>mv /boot/hello.java /boot/hello100.java<br>restore -C -f boot.bak1.bz2 //注意和最新的文件比较</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103521.png" alt="image-20210305172200189"></p><p>mv /boot/hello100.java /boot/hello.java<br>restore -C -f boot.bak1.bz2</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103524.png" alt="image-20210305172212863"></p><h4 id="24-4-4-应用案例2"><a href="#24-4-4-应用案例2" class="headerlink" title="24.4.4 应用案例2"></a>24.4.4 应用案例2</h4><p>restore 命令查看模式，看备份文件有哪些数据/文件</p><p>测试<br>restore -t -f boot.bak0.bz2</p><h4 id="24-4-5-应用案例3"><a href="#24-4-5-应用案例3" class="headerlink" title="24.4.5 应用案例3"></a>24.4.5 应用案例3</h4><p>restore 命令还原模式, 注意细节： 如果你有增量备份，需要把增量备份文件也进行恢复， 有几个增量备份文件，<br>就要恢复几个，按顺序来恢复即可。<br>测试<br>mkdir /opt/boottmp<br>cd /opt/boottmp<br>restore -r -f /opt/boot.bak0.bz2 //恢复到第1 次完全备份状态<br>restore -r -f /opt/boot.bak1.bz2 //恢复到第2 次增量备份状态</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103527.png" alt="image-20210305172244722"></p><h4 id="24-4-6-应用案例4"><a href="#24-4-6-应用案例4" class="headerlink" title="24.4.6 应用案例4"></a>24.4.6 应用案例4</h4><p>restore 命令恢复备份的文件，或者整个目录的文件<br>基本语法： restore -r -f 备份好的文件<br>测试<br>[root@hspedu100 opt]# mkdir etctmp<br>[root@hspedu100 opt]# cd etctmp/<br>[root@hspedu100 etctmp]# restore -r -f /opt/etc.bak0.bz2</p><h2 id="p135-数据备份与恢复（2）"><a href="#p135-数据备份与恢复（2）" class="headerlink" title="p135 数据备份与恢复（2）"></a>p135 数据备份与恢复（2）</h2><h2 id="p136-数据备份与恢复小结"><a href="#p136-数据备份与恢复小结" class="headerlink" title="p136 数据备份与恢复小结"></a>p136 数据备份与恢复小结</h2><h2 id="p137-Linux-可视化管理-webmin-和bt-运维工具"><a href="#p137-Linux-可视化管理-webmin-和bt-运维工具" class="headerlink" title="p137 Linux 可视化管理-webmin 和bt 运维工具"></a>p137 Linux 可视化管理-webmin 和bt 运维工具</h2><h3 id="25-1-webmin"><a href="#25-1-webmin" class="headerlink" title="25.1 webmin"></a>25.1 webmin</h3><h4 id="25-1-1-基本介绍"><a href="#25-1-1-基本介绍" class="headerlink" title="25.1.1 基本介绍"></a>25.1.1 基本介绍</h4><p>Webmin 是功能强大的基于Web 的Unix/linux 系统管理工具。管理员通过浏览器访问Webmin 的各种管理功能并完<br>成相应的管理操作。除了各版本的linux 以外还可用于：AIX、HPUX、Solaris、Unixware、Irix 和FreeBSD 等系统</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103530.png" alt="image-20210306093452146"></p><h4 id="25-1-2-安装webmin-amp-配置"><a href="#25-1-2-安装webmin-amp-配置" class="headerlink" title="25.1.2 安装webmin&amp;配置"></a>25.1.2 安装webmin&amp;配置</h4><ol><li>下载地址: <a href="http://download.webmin.com/download/yum/">http://download.webmin.com/download/yum/</a> , 用下载工具下载即可</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103533.png" alt="image-20210306093509857"></p><p>也可以使用wget <a href="http://download.webmin.com/download/yum/webmin-1.700-1.noarch.rpm">http://download.webmin.com/download/yum/webmin-1.700-1.noarch.rpm</a></p><ol start="2"><li><p>安装： rpm -ivh webmin-1.700-1.noarch.rpm</p></li><li><p>重置密码/usr/libexec/webmin/changepass.pl /etc/webmin root test<br>root 是webmin 的用户名，不是OS 的, 这里就是把webmin 的root 用户密码改成了test</p></li><li><p>修改webmin 服务的端口号（默认是10000 出于安全目的）<br>vim /etc/webmin/miniserv.conf # 修改端口</p></li><li><p>将port=10000 修改为其他端口号，如port=6666</p></li><li><p>重启webmin<br>/etc/webmin/restart # 重启<br>/etc/webmin/start # 启动<br>/etc/webmin/stop # 停止</p></li><li><p>防火墙放开6666 端口<br>firewall-cmd –zone=public –add-port=6666/tcp –permanent # 配置防火墙开放6666 端口<br>firewall-cmd –reload # 更新防火墙配置<br>firewall-cmd –zone=public –list-ports # 查看已经开放的端口号</p></li></ol><h4 id="在这个位置我出现了登录不上去的问题，搜了很多方案没有解决-cry"><a href="#在这个位置我出现了登录不上去的问题，搜了很多方案没有解决-cry" class="headerlink" title="在这个位置我出现了登录不上去的问题，搜了很多方案没有解决:cry:"></a>在这个位置我出现了登录不上去的问题，搜了很多方案没有解决<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>包括 1.杀进程换端口 2.reboot 3.在gnu上登录</p><ol start="8"><li>登录webmin<br><a href="http://ip:6666/">http://ip:6666</a> 可以访问了<br>用root 账号和重置的新密码test</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103536.png" alt="image-20210306093559177"></p><h2 id="p138-webmin演示"><a href="#p138-webmin演示" class="headerlink" title="p138 webmin演示"></a>p138 webmin演示</h2><h4 id="25-1-3-简单使用演示"><a href="#25-1-3-简单使用演示" class="headerlink" title="25.1.3 简单使用演示"></a>25.1.3 简单使用演示</h4><p>比如修改语言设置，IP 访问控制，查看进程, 修改密码， 任务调度，mysql 等.</p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103539.png" alt="image-20210306093905143"></p><h2 id="p139-bt宝塔介绍和安装"><a href="#p139-bt宝塔介绍和安装" class="headerlink" title="p139 bt宝塔介绍和安装"></a>p139 bt宝塔介绍和安装</h2><h3 id="25-2-bt-宝塔"><a href="#25-2-bt-宝塔" class="headerlink" title="25.2 bt(宝塔)"></a>25.2 bt(宝塔)</h3><h4 id="25-2-1-基本介绍"><a href="#25-2-1-基本介绍" class="headerlink" title="25.2.1 基本介绍"></a>25.2.1 基本介绍</h4><p>bt 宝塔Linux 面板是提升运维效率的服务器管理软件，支持一键LAMP/LNMP/集群/监控/网站/FTP/数据库/JAVA 等<br>多项服务器管理功能。</p><h4 id="25-2-2-安装和使用"><a href="#25-2-2-安装和使用" class="headerlink" title="25.2.2 安装和使用"></a>25.2.2 安装和使用</h4><ol><li>安装: yum install -y wget &amp;&amp; wget -O install.sh <a href="http://download.bt.cn/install/install_6.0.sh">http://download.bt.cn/install/install_6.0.sh</a> &amp;&amp; sh install.sh</li><li>安装成功后控制台会显示登录地址，账户密码，复制浏览器打开登录，</li></ol><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103542.png" alt="image-20210306104341551"></p><h4 id="myself-command"><a href="#myself-command" class="headerlink" title="myself command"></a>myself command</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103545.png" alt="image-20210306104904512"></p><p>外网面板地址: <a href="http://58.221.242.226:8888/d9b5227e">http://58.221.242.226:8888/d9b5227e</a><br>内网面板地址: <a href="http://192.168.200.130:8888/d9b5227e">http://192.168.200.130:8888/d9b5227e</a><br>username: tz6prifg<br>password: 2276bcb2</p><h2 id="p140-介绍"><a href="#p140-介绍" class="headerlink" title="p140 介绍"></a>p140 介绍</h2><h4 id="25-2-3-使用介绍，-比如可以登录终端-配置，快捷安装运行环境和系统工具-添加计划任务脚本"><a href="#25-2-3-使用介绍，-比如可以登录终端-配置，快捷安装运行环境和系统工具-添加计划任务脚本" class="headerlink" title="25.2.3 使用介绍， 比如可以登录终端, 配置，快捷安装运行环境和系统工具, 添加计划任务脚本"></a>25.2.3 使用介绍， 比如可以登录终端, 配置，快捷安装运行环境和系统工具, 添加计划任务脚本</h4><p><a href="http://192.168.200.130:8888/2e673418/">http://192.168.200.130:8888/2e673418/</a></p><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103548.png" alt="image-20210306104404359"></p><h4 id="25-2-4-如果bt-的用户名，密码忘记了，使用bt-default-可以查看"><a href="#25-2-4-如果bt-的用户名，密码忘记了，使用bt-default-可以查看" class="headerlink" title="25.2.4 如果bt 的用户名，密码忘记了，使用bt default 可以查看"></a>25.2.4 如果bt 的用户名，密码忘记了，使用bt default 可以查看</h4><p><img src="https://gitee.com/penno/blogimg/raw/master/img/20210507103551.png" alt="image-20210306104415737"></p><h2 id="p141-小结"><a href="#p141-小结" class="headerlink" title="p141 小结"></a>p141 小结</h2><h2 id="p142-Linux-面试题-腾讯-百度-美团-滴滴"><a href="#p142-Linux-面试题-腾讯-百度-美团-滴滴" class="headerlink" title="p142 Linux 面试题-(腾讯,百度,美团,滴滴)"></a>p142 Linux 面试题-(腾讯,百度,美团,滴滴)</h2><h3 id="26-1-分析日志t-log-访问量-，将各个ip-地址截取，并统计出现次数-并按从大到小排序-腾讯"><a href="#26-1-分析日志t-log-访问量-，将各个ip-地址截取，并统计出现次数-并按从大到小排序-腾讯" class="headerlink" title="26.1 分析日志t.log(访问量)，将各个ip 地址截取，并统计出现次数,并按从大到小排序(腾讯)"></a>26.1 分析日志t.log(访问量)，将各个ip 地址截取，并统计出现次数,并按从大到小排序(腾讯)</h3><p><a href="http://192.168.200.10/index1.html">http://192.168.200.10/index1.html</a><br><a href="http://192.168.200.10/index2.html">http://192.168.200.10/index2.html</a><br><a href="http://192.168.200.20/index1.html">http://192.168.200.20/index1.html</a><br><a href="http://192.168.200.30/index1.html">http://192.168.200.30/index1.html</a><br><a href="http://192.168.200.40/index1.html">http://192.168.200.40/index1.html</a><br><a href="http://192.168.200.30/order.html">http://192.168.200.30/order.html</a><br><a href="http://192.168.200.10/order.html">http://192.168.200.10/order.html</a><br>答案: cat t.txt | cut -d ‘/‘ -f 3 | sort | uniq -c | sort -nr</p><h3 id="26-2-统计连接到服务器的各个ip-情况，并按连接数从大到小排序-腾讯"><a href="#26-2-统计连接到服务器的各个ip-情况，并按连接数从大到小排序-腾讯" class="headerlink" title="26.2 统计连接到服务器的各个ip 情况，并按连接数从大到小排序(腾讯)"></a>26.2 统计连接到服务器的各个ip 情况，并按连接数从大到小排序(腾讯)</h3><p>netstat -an | grep ESTABLISHED | awk -F “ “ ‘{print $5}’ | cut -d “:” -f 1 | sort | uniq -c| sort -nr</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>redis 相关指令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 重新加载系统服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 开机启动</span><br><span class="line">system enable redis-server.service</span><br><span class="line"></span><br><span class="line"># 关闭redis-server</span><br><span class="line">system stop redis-server.service</span><br><span class="line"></span><br><span class="line"># 启动redis-server</span><br><span class="line">system start redis-server.service</span><br><span class="line"></span><br><span class="line"># 重新启动redis-server</span><br><span class="line">system restart redis-server.service</span><br><span class="line"></span><br><span class="line"># 查看redis-server运行状态</span><br><span class="line">system status redis-server.service</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
